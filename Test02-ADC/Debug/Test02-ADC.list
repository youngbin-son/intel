
Test02-ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049b4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  08004b54  08004b54  00014b54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c6c  08004c6c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004c6c  08004c6c  00014c6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c74  08004c74  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c74  08004c74  00014c74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c78  08004c78  00014c78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004c7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  20000070  08004cec  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001dc  08004cec  000201dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ec70  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000204a  00000000  00000000  0002ed10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000de8  00000000  00000000  00030d60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d20  00000000  00000000  00031b48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018300  00000000  00000000  00032868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f7ed  00000000  00000000  0004ab68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b2f9  00000000  00000000  0005a355  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f564e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042b0  00000000  00000000  000f56a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004b3c 	.word	0x08004b3c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08004b3c 	.word	0x08004b3c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <__io_putchar>:
int __io_putchar(int c)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, &c , 1, 10);
 800058c:	1d39      	adds	r1, r7, #4
 800058e:	230a      	movs	r3, #10
 8000590:	2201      	movs	r2, #1
 8000592:	4804      	ldr	r0, [pc, #16]	; (80005a4 <__io_putchar+0x20>)
 8000594:	f002 ff27 	bl	80033e6 <HAL_UART_Transmit>
  return c;
 8000598:	687b      	ldr	r3, [r7, #4]
}
 800059a:	4618      	mov	r0, r3
 800059c:	3708      	adds	r7, #8
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	2000017c 	.word	0x2000017c

080005a8 <HAL_ADC_ConvCpltCallback>:
int xValue = -1;
int yValue = -1;
int n = 0;
void noOp(){}
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)  // 1 time
{
 80005a8:	b480      	push	{r7}
 80005aa:	b083      	sub	sp, #12
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
//    printf("(intr)Y Value : %d\r\n",yValue);
//    printf("(intr)Z Value : %d\r\n\n",HAL_GPIO_ReadPin(Zaxis_GPIO_Port, Zaxis_Pin));
//  }
//  myDelay(1000);
//  HAL_ADC_Start_IT(&hadc1);
}
 80005b0:	bf00      	nop
 80005b2:	370c      	adds	r7, #12
 80005b4:	46bd      	mov	sp, r7
 80005b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ba:	4770      	bx	lr

080005bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c0:	f000 fc6c 	bl	8000e9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c4:	f000 f848 	bl	8000658 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c8:	f000 f9ac 	bl	8000924 <MX_GPIO_Init>
  MX_DMA_Init();
 80005cc:	f000 f98a 	bl	80008e4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80005d0:	f000 f95e 	bl	8000890 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80005d4:	f000 f8aa 	bl	800072c <MX_ADC1_Init>
  MX_TIM3_Init();
 80005d8:	f000 f90c 	bl	80007f4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim3);
 80005dc:	4815      	ldr	r0, [pc, #84]	; (8000634 <main+0x78>)
 80005de:	f002 fc0b 	bl	8002df8 <HAL_TIM_Base_Start>
  printf("\033[1J\033[1;1HProgram Restart \r\n");
 80005e2:	4815      	ldr	r0, [pc, #84]	; (8000638 <main+0x7c>)
 80005e4:	f003 fb2c 	bl	8003c40 <puts>
  HAL_ADC_Start_DMA(&hadc1, (int*)dValue, 2);
 80005e8:	2202      	movs	r2, #2
 80005ea:	4914      	ldr	r1, [pc, #80]	; (800063c <main+0x80>)
 80005ec:	4814      	ldr	r0, [pc, #80]	; (8000640 <main+0x84>)
 80005ee:	f000 fd2f 	bl	8001050 <HAL_ADC_Start_DMA>
  printf("ADC DMA started...\r\n");
 80005f2:	4814      	ldr	r0, [pc, #80]	; (8000644 <main+0x88>)
 80005f4:	f003 fb24 	bl	8003c40 <puts>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    printf("X Value : %d\r\n",dValue[0]);
 80005f8:	4b10      	ldr	r3, [pc, #64]	; (800063c <main+0x80>)
 80005fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80005fe:	4619      	mov	r1, r3
 8000600:	4811      	ldr	r0, [pc, #68]	; (8000648 <main+0x8c>)
 8000602:	f003 fa97 	bl	8003b34 <iprintf>
    printf("Y Value : %d\r\n",dValue[1]);
 8000606:	4b0d      	ldr	r3, [pc, #52]	; (800063c <main+0x80>)
 8000608:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800060c:	4619      	mov	r1, r3
 800060e:	480f      	ldr	r0, [pc, #60]	; (800064c <main+0x90>)
 8000610:	f003 fa90 	bl	8003b34 <iprintf>
    printf("Z Value : %d\r\n\n",HAL_GPIO_ReadPin(Zaxis_GPIO_Port, Zaxis_Pin));
 8000614:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000618:	480d      	ldr	r0, [pc, #52]	; (8000650 <main+0x94>)
 800061a:	f001 fed3 	bl	80023c4 <HAL_GPIO_ReadPin>
 800061e:	4603      	mov	r3, r0
 8000620:	4619      	mov	r1, r3
 8000622:	480c      	ldr	r0, [pc, #48]	; (8000654 <main+0x98>)
 8000624:	f003 fa86 	bl	8003b34 <iprintf>
    HAL_Delay(500);
 8000628:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800062c:	f000 fca8 	bl	8000f80 <HAL_Delay>
    printf("X Value : %d\r\n",dValue[0]);
 8000630:	e7e2      	b.n	80005f8 <main+0x3c>
 8000632:	bf00      	nop
 8000634:	20000134 	.word	0x20000134
 8000638:	08004b54 	.word	0x08004b54
 800063c:	200001c0 	.word	0x200001c0
 8000640:	2000008c 	.word	0x2000008c
 8000644:	08004b70 	.word	0x08004b70
 8000648:	08004b84 	.word	0x08004b84
 800064c:	08004b94 	.word	0x08004b94
 8000650:	40020000 	.word	0x40020000
 8000654:	08004ba4 	.word	0x08004ba4

08000658 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b094      	sub	sp, #80	; 0x50
 800065c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065e:	f107 0320 	add.w	r3, r7, #32
 8000662:	2230      	movs	r2, #48	; 0x30
 8000664:	2100      	movs	r1, #0
 8000666:	4618      	mov	r0, r3
 8000668:	f003 fa5c 	bl	8003b24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800066c:	f107 030c 	add.w	r3, r7, #12
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	605a      	str	r2, [r3, #4]
 8000676:	609a      	str	r2, [r3, #8]
 8000678:	60da      	str	r2, [r3, #12]
 800067a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800067c:	2300      	movs	r3, #0
 800067e:	60bb      	str	r3, [r7, #8]
 8000680:	4b28      	ldr	r3, [pc, #160]	; (8000724 <SystemClock_Config+0xcc>)
 8000682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000684:	4a27      	ldr	r2, [pc, #156]	; (8000724 <SystemClock_Config+0xcc>)
 8000686:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800068a:	6413      	str	r3, [r2, #64]	; 0x40
 800068c:	4b25      	ldr	r3, [pc, #148]	; (8000724 <SystemClock_Config+0xcc>)
 800068e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000690:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000694:	60bb      	str	r3, [r7, #8]
 8000696:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000698:	2300      	movs	r3, #0
 800069a:	607b      	str	r3, [r7, #4]
 800069c:	4b22      	ldr	r3, [pc, #136]	; (8000728 <SystemClock_Config+0xd0>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a21      	ldr	r2, [pc, #132]	; (8000728 <SystemClock_Config+0xd0>)
 80006a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006a6:	6013      	str	r3, [r2, #0]
 80006a8:	4b1f      	ldr	r3, [pc, #124]	; (8000728 <SystemClock_Config+0xd0>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006b0:	607b      	str	r3, [r7, #4]
 80006b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006b4:	2302      	movs	r3, #2
 80006b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b8:	2301      	movs	r3, #1
 80006ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006bc:	2310      	movs	r3, #16
 80006be:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c0:	2302      	movs	r3, #2
 80006c2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006c4:	2300      	movs	r3, #0
 80006c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006c8:	2310      	movs	r3, #16
 80006ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006cc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006d0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006d2:	2304      	movs	r3, #4
 80006d4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006d6:	2304      	movs	r3, #4
 80006d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006da:	f107 0320 	add.w	r3, r7, #32
 80006de:	4618      	mov	r0, r3
 80006e0:	f001 fea2 	bl	8002428 <HAL_RCC_OscConfig>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006ea:	f000 f997 	bl	8000a1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ee:	230f      	movs	r3, #15
 80006f0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f2:	2302      	movs	r3, #2
 80006f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f6:	2300      	movs	r3, #0
 80006f8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006fe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000700:	2300      	movs	r3, #0
 8000702:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000704:	f107 030c 	add.w	r3, r7, #12
 8000708:	2102      	movs	r1, #2
 800070a:	4618      	mov	r0, r3
 800070c:	f002 f904 	bl	8002918 <HAL_RCC_ClockConfig>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000716:	f000 f981 	bl	8000a1c <Error_Handler>
  }
}
 800071a:	bf00      	nop
 800071c:	3750      	adds	r7, #80	; 0x50
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	40023800 	.word	0x40023800
 8000728:	40007000 	.word	0x40007000

0800072c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b084      	sub	sp, #16
 8000730:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000732:	463b      	mov	r3, r7
 8000734:	2200      	movs	r2, #0
 8000736:	601a      	str	r2, [r3, #0]
 8000738:	605a      	str	r2, [r3, #4]
 800073a:	609a      	str	r2, [r3, #8]
 800073c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800073e:	4b2b      	ldr	r3, [pc, #172]	; (80007ec <MX_ADC1_Init+0xc0>)
 8000740:	4a2b      	ldr	r2, [pc, #172]	; (80007f0 <MX_ADC1_Init+0xc4>)
 8000742:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000744:	4b29      	ldr	r3, [pc, #164]	; (80007ec <MX_ADC1_Init+0xc0>)
 8000746:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800074a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800074c:	4b27      	ldr	r3, [pc, #156]	; (80007ec <MX_ADC1_Init+0xc0>)
 800074e:	2200      	movs	r2, #0
 8000750:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000752:	4b26      	ldr	r3, [pc, #152]	; (80007ec <MX_ADC1_Init+0xc0>)
 8000754:	2201      	movs	r2, #1
 8000756:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000758:	4b24      	ldr	r3, [pc, #144]	; (80007ec <MX_ADC1_Init+0xc0>)
 800075a:	2200      	movs	r2, #0
 800075c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 800075e:	4b23      	ldr	r3, [pc, #140]	; (80007ec <MX_ADC1_Init+0xc0>)
 8000760:	2201      	movs	r2, #1
 8000762:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 8000766:	4b21      	ldr	r3, [pc, #132]	; (80007ec <MX_ADC1_Init+0xc0>)
 8000768:	2201      	movs	r2, #1
 800076a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_FALLING;
 800076c:	4b1f      	ldr	r3, [pc, #124]	; (80007ec <MX_ADC1_Init+0xc0>)
 800076e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000772:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8000774:	4b1d      	ldr	r3, [pc, #116]	; (80007ec <MX_ADC1_Init+0xc0>)
 8000776:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800077a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800077c:	4b1b      	ldr	r3, [pc, #108]	; (80007ec <MX_ADC1_Init+0xc0>)
 800077e:	2200      	movs	r2, #0
 8000780:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000782:	4b1a      	ldr	r3, [pc, #104]	; (80007ec <MX_ADC1_Init+0xc0>)
 8000784:	2202      	movs	r2, #2
 8000786:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000788:	4b18      	ldr	r3, [pc, #96]	; (80007ec <MX_ADC1_Init+0xc0>)
 800078a:	2201      	movs	r2, #1
 800078c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000790:	4b16      	ldr	r3, [pc, #88]	; (80007ec <MX_ADC1_Init+0xc0>)
 8000792:	2200      	movs	r2, #0
 8000794:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000796:	4815      	ldr	r0, [pc, #84]	; (80007ec <MX_ADC1_Init+0xc0>)
 8000798:	f000 fc16 	bl	8000fc8 <HAL_ADC_Init>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_ADC1_Init+0x7a>
  {
    Error_Handler();
 80007a2:	f000 f93b 	bl	8000a1c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80007a6:	2304      	movs	r3, #4
 80007a8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80007aa:	2301      	movs	r3, #1
 80007ac:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007ae:	2300      	movs	r3, #0
 80007b0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007b2:	463b      	mov	r3, r7
 80007b4:	4619      	mov	r1, r3
 80007b6:	480d      	ldr	r0, [pc, #52]	; (80007ec <MX_ADC1_Init+0xc0>)
 80007b8:	f000 fd4e 	bl	8001258 <HAL_ADC_ConfigChannel>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_ADC1_Init+0x9a>
  {
    Error_Handler();
 80007c2:	f000 f92b 	bl	8000a1c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80007c6:	2308      	movs	r3, #8
 80007c8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80007ca:	2302      	movs	r3, #2
 80007cc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007ce:	463b      	mov	r3, r7
 80007d0:	4619      	mov	r1, r3
 80007d2:	4806      	ldr	r0, [pc, #24]	; (80007ec <MX_ADC1_Init+0xc0>)
 80007d4:	f000 fd40 	bl	8001258 <HAL_ADC_ConfigChannel>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 80007de:	f000 f91d 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007e2:	bf00      	nop
 80007e4:	3710      	adds	r7, #16
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	2000008c 	.word	0x2000008c
 80007f0:	40012000 	.word	0x40012000

080007f4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b086      	sub	sp, #24
 80007f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007fa:	f107 0308 	add.w	r3, r7, #8
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
 8000802:	605a      	str	r2, [r3, #4]
 8000804:	609a      	str	r2, [r3, #8]
 8000806:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000808:	463b      	mov	r3, r7
 800080a:	2200      	movs	r2, #0
 800080c:	601a      	str	r2, [r3, #0]
 800080e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000810:	4b1d      	ldr	r3, [pc, #116]	; (8000888 <MX_TIM3_Init+0x94>)
 8000812:	4a1e      	ldr	r2, [pc, #120]	; (800088c <MX_TIM3_Init+0x98>)
 8000814:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8400-1;
 8000816:	4b1c      	ldr	r3, [pc, #112]	; (8000888 <MX_TIM3_Init+0x94>)
 8000818:	f242 02cf 	movw	r2, #8399	; 0x20cf
 800081c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800081e:	4b1a      	ldr	r3, [pc, #104]	; (8000888 <MX_TIM3_Init+0x94>)
 8000820:	2200      	movs	r2, #0
 8000822:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 5000-1;
 8000824:	4b18      	ldr	r3, [pc, #96]	; (8000888 <MX_TIM3_Init+0x94>)
 8000826:	f241 3287 	movw	r2, #4999	; 0x1387
 800082a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800082c:	4b16      	ldr	r3, [pc, #88]	; (8000888 <MX_TIM3_Init+0x94>)
 800082e:	2200      	movs	r2, #0
 8000830:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000832:	4b15      	ldr	r3, [pc, #84]	; (8000888 <MX_TIM3_Init+0x94>)
 8000834:	2200      	movs	r2, #0
 8000836:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000838:	4813      	ldr	r0, [pc, #76]	; (8000888 <MX_TIM3_Init+0x94>)
 800083a:	f002 fa8d 	bl	8002d58 <HAL_TIM_Base_Init>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000844:	f000 f8ea 	bl	8000a1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000848:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800084c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800084e:	f107 0308 	add.w	r3, r7, #8
 8000852:	4619      	mov	r1, r3
 8000854:	480c      	ldr	r0, [pc, #48]	; (8000888 <MX_TIM3_Init+0x94>)
 8000856:	f002 fb29 	bl	8002eac <HAL_TIM_ConfigClockSource>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000860:	f000 f8dc 	bl	8000a1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000864:	2320      	movs	r3, #32
 8000866:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000868:	2300      	movs	r3, #0
 800086a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800086c:	463b      	mov	r3, r7
 800086e:	4619      	mov	r1, r3
 8000870:	4805      	ldr	r0, [pc, #20]	; (8000888 <MX_TIM3_Init+0x94>)
 8000872:	f002 fcfd 	bl	8003270 <HAL_TIMEx_MasterConfigSynchronization>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800087c:	f000 f8ce 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000880:	bf00      	nop
 8000882:	3718      	adds	r7, #24
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	20000134 	.word	0x20000134
 800088c:	40000400 	.word	0x40000400

08000890 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000894:	4b11      	ldr	r3, [pc, #68]	; (80008dc <MX_USART2_UART_Init+0x4c>)
 8000896:	4a12      	ldr	r2, [pc, #72]	; (80008e0 <MX_USART2_UART_Init+0x50>)
 8000898:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800089a:	4b10      	ldr	r3, [pc, #64]	; (80008dc <MX_USART2_UART_Init+0x4c>)
 800089c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008a2:	4b0e      	ldr	r3, [pc, #56]	; (80008dc <MX_USART2_UART_Init+0x4c>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008a8:	4b0c      	ldr	r3, [pc, #48]	; (80008dc <MX_USART2_UART_Init+0x4c>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008ae:	4b0b      	ldr	r3, [pc, #44]	; (80008dc <MX_USART2_UART_Init+0x4c>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008b4:	4b09      	ldr	r3, [pc, #36]	; (80008dc <MX_USART2_UART_Init+0x4c>)
 80008b6:	220c      	movs	r2, #12
 80008b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ba:	4b08      	ldr	r3, [pc, #32]	; (80008dc <MX_USART2_UART_Init+0x4c>)
 80008bc:	2200      	movs	r2, #0
 80008be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008c0:	4b06      	ldr	r3, [pc, #24]	; (80008dc <MX_USART2_UART_Init+0x4c>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008c6:	4805      	ldr	r0, [pc, #20]	; (80008dc <MX_USART2_UART_Init+0x4c>)
 80008c8:	f002 fd40 	bl	800334c <HAL_UART_Init>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008d2:	f000 f8a3 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008d6:	bf00      	nop
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	2000017c 	.word	0x2000017c
 80008e0:	40004400 	.word	0x40004400

080008e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	607b      	str	r3, [r7, #4]
 80008ee:	4b0c      	ldr	r3, [pc, #48]	; (8000920 <MX_DMA_Init+0x3c>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	4a0b      	ldr	r2, [pc, #44]	; (8000920 <MX_DMA_Init+0x3c>)
 80008f4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80008f8:	6313      	str	r3, [r2, #48]	; 0x30
 80008fa:	4b09      	ldr	r3, [pc, #36]	; (8000920 <MX_DMA_Init+0x3c>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000902:	607b      	str	r3, [r7, #4]
 8000904:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000906:	2200      	movs	r2, #0
 8000908:	2100      	movs	r1, #0
 800090a:	2038      	movs	r0, #56	; 0x38
 800090c:	f001 f82f 	bl	800196e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000910:	2038      	movs	r0, #56	; 0x38
 8000912:	f001 f848 	bl	80019a6 <HAL_NVIC_EnableIRQ>

}
 8000916:	bf00      	nop
 8000918:	3708      	adds	r7, #8
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	40023800 	.word	0x40023800

08000924 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b08a      	sub	sp, #40	; 0x28
 8000928:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800092a:	f107 0314 	add.w	r3, r7, #20
 800092e:	2200      	movs	r2, #0
 8000930:	601a      	str	r2, [r3, #0]
 8000932:	605a      	str	r2, [r3, #4]
 8000934:	609a      	str	r2, [r3, #8]
 8000936:	60da      	str	r2, [r3, #12]
 8000938:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	613b      	str	r3, [r7, #16]
 800093e:	4b34      	ldr	r3, [pc, #208]	; (8000a10 <MX_GPIO_Init+0xec>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	4a33      	ldr	r2, [pc, #204]	; (8000a10 <MX_GPIO_Init+0xec>)
 8000944:	f043 0304 	orr.w	r3, r3, #4
 8000948:	6313      	str	r3, [r2, #48]	; 0x30
 800094a:	4b31      	ldr	r3, [pc, #196]	; (8000a10 <MX_GPIO_Init+0xec>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	f003 0304 	and.w	r3, r3, #4
 8000952:	613b      	str	r3, [r7, #16]
 8000954:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	60fb      	str	r3, [r7, #12]
 800095a:	4b2d      	ldr	r3, [pc, #180]	; (8000a10 <MX_GPIO_Init+0xec>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	4a2c      	ldr	r2, [pc, #176]	; (8000a10 <MX_GPIO_Init+0xec>)
 8000960:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000964:	6313      	str	r3, [r2, #48]	; 0x30
 8000966:	4b2a      	ldr	r3, [pc, #168]	; (8000a10 <MX_GPIO_Init+0xec>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800096e:	60fb      	str	r3, [r7, #12]
 8000970:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	60bb      	str	r3, [r7, #8]
 8000976:	4b26      	ldr	r3, [pc, #152]	; (8000a10 <MX_GPIO_Init+0xec>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	4a25      	ldr	r2, [pc, #148]	; (8000a10 <MX_GPIO_Init+0xec>)
 800097c:	f043 0301 	orr.w	r3, r3, #1
 8000980:	6313      	str	r3, [r2, #48]	; 0x30
 8000982:	4b23      	ldr	r3, [pc, #140]	; (8000a10 <MX_GPIO_Init+0xec>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	f003 0301 	and.w	r3, r3, #1
 800098a:	60bb      	str	r3, [r7, #8]
 800098c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	607b      	str	r3, [r7, #4]
 8000992:	4b1f      	ldr	r3, [pc, #124]	; (8000a10 <MX_GPIO_Init+0xec>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	4a1e      	ldr	r2, [pc, #120]	; (8000a10 <MX_GPIO_Init+0xec>)
 8000998:	f043 0302 	orr.w	r3, r3, #2
 800099c:	6313      	str	r3, [r2, #48]	; 0x30
 800099e:	4b1c      	ldr	r3, [pc, #112]	; (8000a10 <MX_GPIO_Init+0xec>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	f003 0302 	and.w	r3, r3, #2
 80009a6:	607b      	str	r3, [r7, #4]
 80009a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009aa:	2200      	movs	r2, #0
 80009ac:	2120      	movs	r1, #32
 80009ae:	4819      	ldr	r0, [pc, #100]	; (8000a14 <MX_GPIO_Init+0xf0>)
 80009b0:	f001 fd20 	bl	80023f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009ba:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80009be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009c4:	f107 0314 	add.w	r3, r7, #20
 80009c8:	4619      	mov	r1, r3
 80009ca:	4813      	ldr	r0, [pc, #76]	; (8000a18 <MX_GPIO_Init+0xf4>)
 80009cc:	f001 fb76 	bl	80020bc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80009d0:	2320      	movs	r3, #32
 80009d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d4:	2301      	movs	r3, #1
 80009d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d8:	2300      	movs	r3, #0
 80009da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009dc:	2300      	movs	r3, #0
 80009de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80009e0:	f107 0314 	add.w	r3, r7, #20
 80009e4:	4619      	mov	r1, r3
 80009e6:	480b      	ldr	r0, [pc, #44]	; (8000a14 <MX_GPIO_Init+0xf0>)
 80009e8:	f001 fb68 	bl	80020bc <HAL_GPIO_Init>

  /*Configure GPIO pin : Zaxis_Pin */
  GPIO_InitStruct.Pin = Zaxis_Pin;
 80009ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009f2:	2300      	movs	r3, #0
 80009f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009f6:	2301      	movs	r3, #1
 80009f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Zaxis_GPIO_Port, &GPIO_InitStruct);
 80009fa:	f107 0314 	add.w	r3, r7, #20
 80009fe:	4619      	mov	r1, r3
 8000a00:	4804      	ldr	r0, [pc, #16]	; (8000a14 <MX_GPIO_Init+0xf0>)
 8000a02:	f001 fb5b 	bl	80020bc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a06:	bf00      	nop
 8000a08:	3728      	adds	r7, #40	; 0x28
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	40023800 	.word	0x40023800
 8000a14:	40020000 	.word	0x40020000
 8000a18:	40020800 	.word	0x40020800

08000a1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a20:	b672      	cpsid	i
}
 8000a22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a24:	e7fe      	b.n	8000a24 <Error_Handler+0x8>
	...

08000a28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	607b      	str	r3, [r7, #4]
 8000a32:	4b10      	ldr	r3, [pc, #64]	; (8000a74 <HAL_MspInit+0x4c>)
 8000a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a36:	4a0f      	ldr	r2, [pc, #60]	; (8000a74 <HAL_MspInit+0x4c>)
 8000a38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a3c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a3e:	4b0d      	ldr	r3, [pc, #52]	; (8000a74 <HAL_MspInit+0x4c>)
 8000a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a46:	607b      	str	r3, [r7, #4]
 8000a48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	603b      	str	r3, [r7, #0]
 8000a4e:	4b09      	ldr	r3, [pc, #36]	; (8000a74 <HAL_MspInit+0x4c>)
 8000a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a52:	4a08      	ldr	r2, [pc, #32]	; (8000a74 <HAL_MspInit+0x4c>)
 8000a54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a58:	6413      	str	r3, [r2, #64]	; 0x40
 8000a5a:	4b06      	ldr	r3, [pc, #24]	; (8000a74 <HAL_MspInit+0x4c>)
 8000a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a62:	603b      	str	r3, [r7, #0]
 8000a64:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a66:	2007      	movs	r0, #7
 8000a68:	f000 ff76 	bl	8001958 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a6c:	bf00      	nop
 8000a6e:	3708      	adds	r7, #8
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	40023800 	.word	0x40023800

08000a78 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b08a      	sub	sp, #40	; 0x28
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a80:	f107 0314 	add.w	r3, r7, #20
 8000a84:	2200      	movs	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
 8000a88:	605a      	str	r2, [r3, #4]
 8000a8a:	609a      	str	r2, [r3, #8]
 8000a8c:	60da      	str	r2, [r3, #12]
 8000a8e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a3c      	ldr	r2, [pc, #240]	; (8000b88 <HAL_ADC_MspInit+0x110>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d171      	bne.n	8000b7e <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	613b      	str	r3, [r7, #16]
 8000a9e:	4b3b      	ldr	r3, [pc, #236]	; (8000b8c <HAL_ADC_MspInit+0x114>)
 8000aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aa2:	4a3a      	ldr	r2, [pc, #232]	; (8000b8c <HAL_ADC_MspInit+0x114>)
 8000aa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000aa8:	6453      	str	r3, [r2, #68]	; 0x44
 8000aaa:	4b38      	ldr	r3, [pc, #224]	; (8000b8c <HAL_ADC_MspInit+0x114>)
 8000aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ab2:	613b      	str	r3, [r7, #16]
 8000ab4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	60fb      	str	r3, [r7, #12]
 8000aba:	4b34      	ldr	r3, [pc, #208]	; (8000b8c <HAL_ADC_MspInit+0x114>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	4a33      	ldr	r2, [pc, #204]	; (8000b8c <HAL_ADC_MspInit+0x114>)
 8000ac0:	f043 0301 	orr.w	r3, r3, #1
 8000ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac6:	4b31      	ldr	r3, [pc, #196]	; (8000b8c <HAL_ADC_MspInit+0x114>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	f003 0301 	and.w	r3, r3, #1
 8000ace:	60fb      	str	r3, [r7, #12]
 8000ad0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	60bb      	str	r3, [r7, #8]
 8000ad6:	4b2d      	ldr	r3, [pc, #180]	; (8000b8c <HAL_ADC_MspInit+0x114>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	4a2c      	ldr	r2, [pc, #176]	; (8000b8c <HAL_ADC_MspInit+0x114>)
 8000adc:	f043 0302 	orr.w	r3, r3, #2
 8000ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae2:	4b2a      	ldr	r3, [pc, #168]	; (8000b8c <HAL_ADC_MspInit+0x114>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	f003 0302 	and.w	r3, r3, #2
 8000aea:	60bb      	str	r3, [r7, #8]
 8000aec:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000aee:	2310      	movs	r3, #16
 8000af0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000af2:	2303      	movs	r3, #3
 8000af4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000afa:	f107 0314 	add.w	r3, r7, #20
 8000afe:	4619      	mov	r1, r3
 8000b00:	4823      	ldr	r0, [pc, #140]	; (8000b90 <HAL_ADC_MspInit+0x118>)
 8000b02:	f001 fadb 	bl	80020bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b06:	2301      	movs	r3, #1
 8000b08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b0a:	2303      	movs	r3, #3
 8000b0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b12:	f107 0314 	add.w	r3, r7, #20
 8000b16:	4619      	mov	r1, r3
 8000b18:	481e      	ldr	r0, [pc, #120]	; (8000b94 <HAL_ADC_MspInit+0x11c>)
 8000b1a:	f001 facf 	bl	80020bc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000b1e:	4b1e      	ldr	r3, [pc, #120]	; (8000b98 <HAL_ADC_MspInit+0x120>)
 8000b20:	4a1e      	ldr	r2, [pc, #120]	; (8000b9c <HAL_ADC_MspInit+0x124>)
 8000b22:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000b24:	4b1c      	ldr	r3, [pc, #112]	; (8000b98 <HAL_ADC_MspInit+0x120>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b2a:	4b1b      	ldr	r3, [pc, #108]	; (8000b98 <HAL_ADC_MspInit+0x120>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b30:	4b19      	ldr	r3, [pc, #100]	; (8000b98 <HAL_ADC_MspInit+0x120>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000b36:	4b18      	ldr	r3, [pc, #96]	; (8000b98 <HAL_ADC_MspInit+0x120>)
 8000b38:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b3c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b3e:	4b16      	ldr	r3, [pc, #88]	; (8000b98 <HAL_ADC_MspInit+0x120>)
 8000b40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b44:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b46:	4b14      	ldr	r3, [pc, #80]	; (8000b98 <HAL_ADC_MspInit+0x120>)
 8000b48:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b4c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000b4e:	4b12      	ldr	r3, [pc, #72]	; (8000b98 <HAL_ADC_MspInit+0x120>)
 8000b50:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b54:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000b56:	4b10      	ldr	r3, [pc, #64]	; (8000b98 <HAL_ADC_MspInit+0x120>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b5c:	4b0e      	ldr	r3, [pc, #56]	; (8000b98 <HAL_ADC_MspInit+0x120>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000b62:	480d      	ldr	r0, [pc, #52]	; (8000b98 <HAL_ADC_MspInit+0x120>)
 8000b64:	f000 ff3a 	bl	80019dc <HAL_DMA_Init>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8000b6e:	f7ff ff55 	bl	8000a1c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	4a08      	ldr	r2, [pc, #32]	; (8000b98 <HAL_ADC_MspInit+0x120>)
 8000b76:	639a      	str	r2, [r3, #56]	; 0x38
 8000b78:	4a07      	ldr	r2, [pc, #28]	; (8000b98 <HAL_ADC_MspInit+0x120>)
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b7e:	bf00      	nop
 8000b80:	3728      	adds	r7, #40	; 0x28
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	40012000 	.word	0x40012000
 8000b8c:	40023800 	.word	0x40023800
 8000b90:	40020000 	.word	0x40020000
 8000b94:	40020400 	.word	0x40020400
 8000b98:	200000d4 	.word	0x200000d4
 8000b9c:	40026410 	.word	0x40026410

08000ba0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b085      	sub	sp, #20
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a0b      	ldr	r2, [pc, #44]	; (8000bdc <HAL_TIM_Base_MspInit+0x3c>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d10d      	bne.n	8000bce <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	60fb      	str	r3, [r7, #12]
 8000bb6:	4b0a      	ldr	r3, [pc, #40]	; (8000be0 <HAL_TIM_Base_MspInit+0x40>)
 8000bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bba:	4a09      	ldr	r2, [pc, #36]	; (8000be0 <HAL_TIM_Base_MspInit+0x40>)
 8000bbc:	f043 0302 	orr.w	r3, r3, #2
 8000bc0:	6413      	str	r3, [r2, #64]	; 0x40
 8000bc2:	4b07      	ldr	r3, [pc, #28]	; (8000be0 <HAL_TIM_Base_MspInit+0x40>)
 8000bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc6:	f003 0302 	and.w	r3, r3, #2
 8000bca:	60fb      	str	r3, [r7, #12]
 8000bcc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000bce:	bf00      	nop
 8000bd0:	3714      	adds	r7, #20
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	40000400 	.word	0x40000400
 8000be0:	40023800 	.word	0x40023800

08000be4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b08a      	sub	sp, #40	; 0x28
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bec:	f107 0314 	add.w	r3, r7, #20
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a19      	ldr	r2, [pc, #100]	; (8000c68 <HAL_UART_MspInit+0x84>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d12b      	bne.n	8000c5e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c06:	2300      	movs	r3, #0
 8000c08:	613b      	str	r3, [r7, #16]
 8000c0a:	4b18      	ldr	r3, [pc, #96]	; (8000c6c <HAL_UART_MspInit+0x88>)
 8000c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0e:	4a17      	ldr	r2, [pc, #92]	; (8000c6c <HAL_UART_MspInit+0x88>)
 8000c10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c14:	6413      	str	r3, [r2, #64]	; 0x40
 8000c16:	4b15      	ldr	r3, [pc, #84]	; (8000c6c <HAL_UART_MspInit+0x88>)
 8000c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c1e:	613b      	str	r3, [r7, #16]
 8000c20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c22:	2300      	movs	r3, #0
 8000c24:	60fb      	str	r3, [r7, #12]
 8000c26:	4b11      	ldr	r3, [pc, #68]	; (8000c6c <HAL_UART_MspInit+0x88>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	4a10      	ldr	r2, [pc, #64]	; (8000c6c <HAL_UART_MspInit+0x88>)
 8000c2c:	f043 0301 	orr.w	r3, r3, #1
 8000c30:	6313      	str	r3, [r2, #48]	; 0x30
 8000c32:	4b0e      	ldr	r3, [pc, #56]	; (8000c6c <HAL_UART_MspInit+0x88>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	f003 0301 	and.w	r3, r3, #1
 8000c3a:	60fb      	str	r3, [r7, #12]
 8000c3c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c3e:	230c      	movs	r3, #12
 8000c40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c42:	2302      	movs	r3, #2
 8000c44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c46:	2300      	movs	r3, #0
 8000c48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c4a:	2303      	movs	r3, #3
 8000c4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c4e:	2307      	movs	r3, #7
 8000c50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c52:	f107 0314 	add.w	r3, r7, #20
 8000c56:	4619      	mov	r1, r3
 8000c58:	4805      	ldr	r0, [pc, #20]	; (8000c70 <HAL_UART_MspInit+0x8c>)
 8000c5a:	f001 fa2f 	bl	80020bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c5e:	bf00      	nop
 8000c60:	3728      	adds	r7, #40	; 0x28
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	40004400 	.word	0x40004400
 8000c6c:	40023800 	.word	0x40023800
 8000c70:	40020000 	.word	0x40020000

08000c74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c78:	e7fe      	b.n	8000c78 <NMI_Handler+0x4>

08000c7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c7a:	b480      	push	{r7}
 8000c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c7e:	e7fe      	b.n	8000c7e <HardFault_Handler+0x4>

08000c80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c84:	e7fe      	b.n	8000c84 <MemManage_Handler+0x4>

08000c86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c86:	b480      	push	{r7}
 8000c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c8a:	e7fe      	b.n	8000c8a <BusFault_Handler+0x4>

08000c8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c90:	e7fe      	b.n	8000c90 <UsageFault_Handler+0x4>

08000c92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c92:	b480      	push	{r7}
 8000c94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c96:	bf00      	nop
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr

08000ca0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ca4:	bf00      	nop
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr

08000cae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cb2:	bf00      	nop
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr

08000cbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cc0:	f000 f93e 	bl	8000f40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cc4:	bf00      	nop
 8000cc6:	bd80      	pop	{r7, pc}

08000cc8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000ccc:	4802      	ldr	r0, [pc, #8]	; (8000cd8 <DMA2_Stream0_IRQHandler+0x10>)
 8000cce:	f000 ff8b 	bl	8001be8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000cd2:	bf00      	nop
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	200000d4 	.word	0x200000d4

08000cdc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b086      	sub	sp, #24
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	60f8      	str	r0, [r7, #12]
 8000ce4:	60b9      	str	r1, [r7, #8]
 8000ce6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ce8:	2300      	movs	r3, #0
 8000cea:	617b      	str	r3, [r7, #20]
 8000cec:	e00a      	b.n	8000d04 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000cee:	f3af 8000 	nop.w
 8000cf2:	4601      	mov	r1, r0
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	1c5a      	adds	r2, r3, #1
 8000cf8:	60ba      	str	r2, [r7, #8]
 8000cfa:	b2ca      	uxtb	r2, r1
 8000cfc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cfe:	697b      	ldr	r3, [r7, #20]
 8000d00:	3301      	adds	r3, #1
 8000d02:	617b      	str	r3, [r7, #20]
 8000d04:	697a      	ldr	r2, [r7, #20]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	429a      	cmp	r2, r3
 8000d0a:	dbf0      	blt.n	8000cee <_read+0x12>
  }

  return len;
 8000d0c:	687b      	ldr	r3, [r7, #4]
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	3718      	adds	r7, #24
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}

08000d16 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d16:	b580      	push	{r7, lr}
 8000d18:	b086      	sub	sp, #24
 8000d1a:	af00      	add	r7, sp, #0
 8000d1c:	60f8      	str	r0, [r7, #12]
 8000d1e:	60b9      	str	r1, [r7, #8]
 8000d20:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d22:	2300      	movs	r3, #0
 8000d24:	617b      	str	r3, [r7, #20]
 8000d26:	e009      	b.n	8000d3c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d28:	68bb      	ldr	r3, [r7, #8]
 8000d2a:	1c5a      	adds	r2, r3, #1
 8000d2c:	60ba      	str	r2, [r7, #8]
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	4618      	mov	r0, r3
 8000d32:	f7ff fc27 	bl	8000584 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d36:	697b      	ldr	r3, [r7, #20]
 8000d38:	3301      	adds	r3, #1
 8000d3a:	617b      	str	r3, [r7, #20]
 8000d3c:	697a      	ldr	r2, [r7, #20]
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	429a      	cmp	r2, r3
 8000d42:	dbf1      	blt.n	8000d28 <_write+0x12>
  }
  return len;
 8000d44:	687b      	ldr	r3, [r7, #4]
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3718      	adds	r7, #24
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}

08000d4e <_close>:

int _close(int file)
{
 8000d4e:	b480      	push	{r7}
 8000d50:	b083      	sub	sp, #12
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d56:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	370c      	adds	r7, #12
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr

08000d66 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d66:	b480      	push	{r7}
 8000d68:	b083      	sub	sp, #12
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	6078      	str	r0, [r7, #4]
 8000d6e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d76:	605a      	str	r2, [r3, #4]
  return 0;
 8000d78:	2300      	movs	r3, #0
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	370c      	adds	r7, #12
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr

08000d86 <_isatty>:

int _isatty(int file)
{
 8000d86:	b480      	push	{r7}
 8000d88:	b083      	sub	sp, #12
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d8e:	2301      	movs	r3, #1
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	370c      	adds	r7, #12
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr

08000d9c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b085      	sub	sp, #20
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	60f8      	str	r0, [r7, #12]
 8000da4:	60b9      	str	r1, [r7, #8]
 8000da6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000da8:	2300      	movs	r3, #0
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3714      	adds	r7, #20
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
	...

08000db8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b086      	sub	sp, #24
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dc0:	4a14      	ldr	r2, [pc, #80]	; (8000e14 <_sbrk+0x5c>)
 8000dc2:	4b15      	ldr	r3, [pc, #84]	; (8000e18 <_sbrk+0x60>)
 8000dc4:	1ad3      	subs	r3, r2, r3
 8000dc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dcc:	4b13      	ldr	r3, [pc, #76]	; (8000e1c <_sbrk+0x64>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d102      	bne.n	8000dda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dd4:	4b11      	ldr	r3, [pc, #68]	; (8000e1c <_sbrk+0x64>)
 8000dd6:	4a12      	ldr	r2, [pc, #72]	; (8000e20 <_sbrk+0x68>)
 8000dd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dda:	4b10      	ldr	r3, [pc, #64]	; (8000e1c <_sbrk+0x64>)
 8000ddc:	681a      	ldr	r2, [r3, #0]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	4413      	add	r3, r2
 8000de2:	693a      	ldr	r2, [r7, #16]
 8000de4:	429a      	cmp	r2, r3
 8000de6:	d207      	bcs.n	8000df8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000de8:	f002 fe72 	bl	8003ad0 <__errno>
 8000dec:	4603      	mov	r3, r0
 8000dee:	220c      	movs	r2, #12
 8000df0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000df2:	f04f 33ff 	mov.w	r3, #4294967295
 8000df6:	e009      	b.n	8000e0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000df8:	4b08      	ldr	r3, [pc, #32]	; (8000e1c <_sbrk+0x64>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dfe:	4b07      	ldr	r3, [pc, #28]	; (8000e1c <_sbrk+0x64>)
 8000e00:	681a      	ldr	r2, [r3, #0]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	4413      	add	r3, r2
 8000e06:	4a05      	ldr	r2, [pc, #20]	; (8000e1c <_sbrk+0x64>)
 8000e08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e0a:	68fb      	ldr	r3, [r7, #12]
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	3718      	adds	r7, #24
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	20020000 	.word	0x20020000
 8000e18:	00000400 	.word	0x00000400
 8000e1c:	200001c4 	.word	0x200001c4
 8000e20:	200001e0 	.word	0x200001e0

08000e24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e28:	4b06      	ldr	r3, [pc, #24]	; (8000e44 <SystemInit+0x20>)
 8000e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e2e:	4a05      	ldr	r2, [pc, #20]	; (8000e44 <SystemInit+0x20>)
 8000e30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e38:	bf00      	nop
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	e000ed00 	.word	0xe000ed00

08000e48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e80 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e4c:	480d      	ldr	r0, [pc, #52]	; (8000e84 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e4e:	490e      	ldr	r1, [pc, #56]	; (8000e88 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e50:	4a0e      	ldr	r2, [pc, #56]	; (8000e8c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e54:	e002      	b.n	8000e5c <LoopCopyDataInit>

08000e56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e5a:	3304      	adds	r3, #4

08000e5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e60:	d3f9      	bcc.n	8000e56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e62:	4a0b      	ldr	r2, [pc, #44]	; (8000e90 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e64:	4c0b      	ldr	r4, [pc, #44]	; (8000e94 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e68:	e001      	b.n	8000e6e <LoopFillZerobss>

08000e6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e6c:	3204      	adds	r2, #4

08000e6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e70:	d3fb      	bcc.n	8000e6a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e72:	f7ff ffd7 	bl	8000e24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e76:	f002 fe31 	bl	8003adc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e7a:	f7ff fb9f 	bl	80005bc <main>
  bx  lr    
 8000e7e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e80:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e88:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000e8c:	08004c7c 	.word	0x08004c7c
  ldr r2, =_sbss
 8000e90:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000e94:	200001dc 	.word	0x200001dc

08000e98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e98:	e7fe      	b.n	8000e98 <ADC_IRQHandler>
	...

08000e9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ea0:	4b0e      	ldr	r3, [pc, #56]	; (8000edc <HAL_Init+0x40>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a0d      	ldr	r2, [pc, #52]	; (8000edc <HAL_Init+0x40>)
 8000ea6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000eaa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000eac:	4b0b      	ldr	r3, [pc, #44]	; (8000edc <HAL_Init+0x40>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a0a      	ldr	r2, [pc, #40]	; (8000edc <HAL_Init+0x40>)
 8000eb2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000eb6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000eb8:	4b08      	ldr	r3, [pc, #32]	; (8000edc <HAL_Init+0x40>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a07      	ldr	r2, [pc, #28]	; (8000edc <HAL_Init+0x40>)
 8000ebe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ec2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ec4:	2003      	movs	r0, #3
 8000ec6:	f000 fd47 	bl	8001958 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eca:	2000      	movs	r0, #0
 8000ecc:	f000 f808 	bl	8000ee0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ed0:	f7ff fdaa 	bl	8000a28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ed4:	2300      	movs	r3, #0
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	40023c00 	.word	0x40023c00

08000ee0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ee8:	4b12      	ldr	r3, [pc, #72]	; (8000f34 <HAL_InitTick+0x54>)
 8000eea:	681a      	ldr	r2, [r3, #0]
 8000eec:	4b12      	ldr	r3, [pc, #72]	; (8000f38 <HAL_InitTick+0x58>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ef6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000efa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000efe:	4618      	mov	r0, r3
 8000f00:	f000 fd5f 	bl	80019c2 <HAL_SYSTICK_Config>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	e00e      	b.n	8000f2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2b0f      	cmp	r3, #15
 8000f12:	d80a      	bhi.n	8000f2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f14:	2200      	movs	r2, #0
 8000f16:	6879      	ldr	r1, [r7, #4]
 8000f18:	f04f 30ff 	mov.w	r0, #4294967295
 8000f1c:	f000 fd27 	bl	800196e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f20:	4a06      	ldr	r2, [pc, #24]	; (8000f3c <HAL_InitTick+0x5c>)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f26:	2300      	movs	r3, #0
 8000f28:	e000      	b.n	8000f2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f2a:	2301      	movs	r3, #1
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	3708      	adds	r7, #8
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	20000000 	.word	0x20000000
 8000f38:	20000008 	.word	0x20000008
 8000f3c:	20000004 	.word	0x20000004

08000f40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f44:	4b06      	ldr	r3, [pc, #24]	; (8000f60 <HAL_IncTick+0x20>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	461a      	mov	r2, r3
 8000f4a:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <HAL_IncTick+0x24>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4413      	add	r3, r2
 8000f50:	4a04      	ldr	r2, [pc, #16]	; (8000f64 <HAL_IncTick+0x24>)
 8000f52:	6013      	str	r3, [r2, #0]
}
 8000f54:	bf00      	nop
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	20000008 	.word	0x20000008
 8000f64:	200001c8 	.word	0x200001c8

08000f68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f6c:	4b03      	ldr	r3, [pc, #12]	; (8000f7c <HAL_GetTick+0x14>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	200001c8 	.word	0x200001c8

08000f80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f88:	f7ff ffee 	bl	8000f68 <HAL_GetTick>
 8000f8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f98:	d005      	beq.n	8000fa6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f9a:	4b0a      	ldr	r3, [pc, #40]	; (8000fc4 <HAL_Delay+0x44>)
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	4413      	add	r3, r2
 8000fa4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fa6:	bf00      	nop
 8000fa8:	f7ff ffde 	bl	8000f68 <HAL_GetTick>
 8000fac:	4602      	mov	r2, r0
 8000fae:	68bb      	ldr	r3, [r7, #8]
 8000fb0:	1ad3      	subs	r3, r2, r3
 8000fb2:	68fa      	ldr	r2, [r7, #12]
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	d8f7      	bhi.n	8000fa8 <HAL_Delay+0x28>
  {
  }
}
 8000fb8:	bf00      	nop
 8000fba:	bf00      	nop
 8000fbc:	3710      	adds	r7, #16
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	20000008 	.word	0x20000008

08000fc8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d101      	bne.n	8000fde <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	e033      	b.n	8001046 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d109      	bne.n	8000ffa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000fe6:	6878      	ldr	r0, [r7, #4]
 8000fe8:	f7ff fd46 	bl	8000a78 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2200      	movs	r2, #0
 8000ff0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffe:	f003 0310 	and.w	r3, r3, #16
 8001002:	2b00      	cmp	r3, #0
 8001004:	d118      	bne.n	8001038 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800100e:	f023 0302 	bic.w	r3, r3, #2
 8001012:	f043 0202 	orr.w	r2, r3, #2
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f000 fa4e 	bl	80014bc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2200      	movs	r2, #0
 8001024:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102a:	f023 0303 	bic.w	r3, r3, #3
 800102e:	f043 0201 	orr.w	r2, r3, #1
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	641a      	str	r2, [r3, #64]	; 0x40
 8001036:	e001      	b.n	800103c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001038:	2301      	movs	r3, #1
 800103a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2200      	movs	r2, #0
 8001040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001044:	7bfb      	ldrb	r3, [r7, #15]
}
 8001046:	4618      	mov	r0, r3
 8001048:	3710      	adds	r7, #16
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
	...

08001050 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b086      	sub	sp, #24
 8001054:	af00      	add	r7, sp, #0
 8001056:	60f8      	str	r0, [r7, #12]
 8001058:	60b9      	str	r1, [r7, #8]
 800105a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800105c:	2300      	movs	r3, #0
 800105e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001066:	2b01      	cmp	r3, #1
 8001068:	d101      	bne.n	800106e <HAL_ADC_Start_DMA+0x1e>
 800106a:	2302      	movs	r3, #2
 800106c:	e0ce      	b.n	800120c <HAL_ADC_Start_DMA+0x1bc>
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	2201      	movs	r2, #1
 8001072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	689b      	ldr	r3, [r3, #8]
 800107c:	f003 0301 	and.w	r3, r3, #1
 8001080:	2b01      	cmp	r3, #1
 8001082:	d018      	beq.n	80010b6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	689a      	ldr	r2, [r3, #8]
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f042 0201 	orr.w	r2, r2, #1
 8001092:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001094:	4b5f      	ldr	r3, [pc, #380]	; (8001214 <HAL_ADC_Start_DMA+0x1c4>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a5f      	ldr	r2, [pc, #380]	; (8001218 <HAL_ADC_Start_DMA+0x1c8>)
 800109a:	fba2 2303 	umull	r2, r3, r2, r3
 800109e:	0c9a      	lsrs	r2, r3, #18
 80010a0:	4613      	mov	r3, r2
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	4413      	add	r3, r2
 80010a6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80010a8:	e002      	b.n	80010b0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	3b01      	subs	r3, #1
 80010ae:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d1f9      	bne.n	80010aa <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	689b      	ldr	r3, [r3, #8]
 80010bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80010c4:	d107      	bne.n	80010d6 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	689a      	ldr	r2, [r3, #8]
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80010d4:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	689b      	ldr	r3, [r3, #8]
 80010dc:	f003 0301 	and.w	r3, r3, #1
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	f040 8086 	bne.w	80011f2 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ea:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80010ee:	f023 0301 	bic.w	r3, r3, #1
 80010f2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001104:	2b00      	cmp	r3, #0
 8001106:	d007      	beq.n	8001118 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001110:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001120:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001124:	d106      	bne.n	8001134 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800112a:	f023 0206 	bic.w	r2, r3, #6
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	645a      	str	r2, [r3, #68]	; 0x44
 8001132:	e002      	b.n	800113a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	2200      	movs	r2, #0
 8001138:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	2200      	movs	r2, #0
 800113e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001142:	4b36      	ldr	r3, [pc, #216]	; (800121c <HAL_ADC_Start_DMA+0x1cc>)
 8001144:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800114a:	4a35      	ldr	r2, [pc, #212]	; (8001220 <HAL_ADC_Start_DMA+0x1d0>)
 800114c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001152:	4a34      	ldr	r2, [pc, #208]	; (8001224 <HAL_ADC_Start_DMA+0x1d4>)
 8001154:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800115a:	4a33      	ldr	r2, [pc, #204]	; (8001228 <HAL_ADC_Start_DMA+0x1d8>)
 800115c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001166:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	685a      	ldr	r2, [r3, #4]
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001176:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	689a      	ldr	r2, [r3, #8]
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001186:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	334c      	adds	r3, #76	; 0x4c
 8001192:	4619      	mov	r1, r3
 8001194:	68ba      	ldr	r2, [r7, #8]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	f000 fcce 	bl	8001b38 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f003 031f 	and.w	r3, r3, #31
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d10f      	bne.n	80011c8 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d129      	bne.n	800120a <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	689a      	ldr	r2, [r3, #8]
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80011c4:	609a      	str	r2, [r3, #8]
 80011c6:	e020      	b.n	800120a <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a17      	ldr	r2, [pc, #92]	; (800122c <HAL_ADC_Start_DMA+0x1dc>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d11b      	bne.n	800120a <HAL_ADC_Start_DMA+0x1ba>
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	689b      	ldr	r3, [r3, #8]
 80011d8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d114      	bne.n	800120a <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	689a      	ldr	r2, [r3, #8]
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80011ee:	609a      	str	r2, [r3, #8]
 80011f0:	e00b      	b.n	800120a <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f6:	f043 0210 	orr.w	r2, r3, #16
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001202:	f043 0201 	orr.w	r2, r3, #1
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800120a:	2300      	movs	r3, #0
}
 800120c:	4618      	mov	r0, r3
 800120e:	3718      	adds	r7, #24
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	20000000 	.word	0x20000000
 8001218:	431bde83 	.word	0x431bde83
 800121c:	40012300 	.word	0x40012300
 8001220:	080016b5 	.word	0x080016b5
 8001224:	0800176f 	.word	0x0800176f
 8001228:	0800178b 	.word	0x0800178b
 800122c:	40012000 	.word	0x40012000

08001230 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001238:	bf00      	nop
 800123a:	370c      	adds	r7, #12
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr

08001244 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800124c:	bf00      	nop
 800124e:	370c      	adds	r7, #12
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr

08001258 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001258:	b480      	push	{r7}
 800125a:	b085      	sub	sp, #20
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001262:	2300      	movs	r3, #0
 8001264:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800126c:	2b01      	cmp	r3, #1
 800126e:	d101      	bne.n	8001274 <HAL_ADC_ConfigChannel+0x1c>
 8001270:	2302      	movs	r3, #2
 8001272:	e113      	b.n	800149c <HAL_ADC_ConfigChannel+0x244>
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2201      	movs	r2, #1
 8001278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	2b09      	cmp	r3, #9
 8001282:	d925      	bls.n	80012d0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	68d9      	ldr	r1, [r3, #12]
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	b29b      	uxth	r3, r3
 8001290:	461a      	mov	r2, r3
 8001292:	4613      	mov	r3, r2
 8001294:	005b      	lsls	r3, r3, #1
 8001296:	4413      	add	r3, r2
 8001298:	3b1e      	subs	r3, #30
 800129a:	2207      	movs	r2, #7
 800129c:	fa02 f303 	lsl.w	r3, r2, r3
 80012a0:	43da      	mvns	r2, r3
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	400a      	ands	r2, r1
 80012a8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	68d9      	ldr	r1, [r3, #12]
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	689a      	ldr	r2, [r3, #8]
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	b29b      	uxth	r3, r3
 80012ba:	4618      	mov	r0, r3
 80012bc:	4603      	mov	r3, r0
 80012be:	005b      	lsls	r3, r3, #1
 80012c0:	4403      	add	r3, r0
 80012c2:	3b1e      	subs	r3, #30
 80012c4:	409a      	lsls	r2, r3
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	430a      	orrs	r2, r1
 80012cc:	60da      	str	r2, [r3, #12]
 80012ce:	e022      	b.n	8001316 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	6919      	ldr	r1, [r3, #16]
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	b29b      	uxth	r3, r3
 80012dc:	461a      	mov	r2, r3
 80012de:	4613      	mov	r3, r2
 80012e0:	005b      	lsls	r3, r3, #1
 80012e2:	4413      	add	r3, r2
 80012e4:	2207      	movs	r2, #7
 80012e6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ea:	43da      	mvns	r2, r3
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	400a      	ands	r2, r1
 80012f2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	6919      	ldr	r1, [r3, #16]
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	689a      	ldr	r2, [r3, #8]
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	b29b      	uxth	r3, r3
 8001304:	4618      	mov	r0, r3
 8001306:	4603      	mov	r3, r0
 8001308:	005b      	lsls	r3, r3, #1
 800130a:	4403      	add	r3, r0
 800130c:	409a      	lsls	r2, r3
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	430a      	orrs	r2, r1
 8001314:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	2b06      	cmp	r3, #6
 800131c:	d824      	bhi.n	8001368 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685a      	ldr	r2, [r3, #4]
 8001328:	4613      	mov	r3, r2
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	4413      	add	r3, r2
 800132e:	3b05      	subs	r3, #5
 8001330:	221f      	movs	r2, #31
 8001332:	fa02 f303 	lsl.w	r3, r2, r3
 8001336:	43da      	mvns	r2, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	400a      	ands	r2, r1
 800133e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	b29b      	uxth	r3, r3
 800134c:	4618      	mov	r0, r3
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	685a      	ldr	r2, [r3, #4]
 8001352:	4613      	mov	r3, r2
 8001354:	009b      	lsls	r3, r3, #2
 8001356:	4413      	add	r3, r2
 8001358:	3b05      	subs	r3, #5
 800135a:	fa00 f203 	lsl.w	r2, r0, r3
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	430a      	orrs	r2, r1
 8001364:	635a      	str	r2, [r3, #52]	; 0x34
 8001366:	e04c      	b.n	8001402 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	2b0c      	cmp	r3, #12
 800136e:	d824      	bhi.n	80013ba <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	685a      	ldr	r2, [r3, #4]
 800137a:	4613      	mov	r3, r2
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	4413      	add	r3, r2
 8001380:	3b23      	subs	r3, #35	; 0x23
 8001382:	221f      	movs	r2, #31
 8001384:	fa02 f303 	lsl.w	r3, r2, r3
 8001388:	43da      	mvns	r2, r3
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	400a      	ands	r2, r1
 8001390:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	b29b      	uxth	r3, r3
 800139e:	4618      	mov	r0, r3
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	685a      	ldr	r2, [r3, #4]
 80013a4:	4613      	mov	r3, r2
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	4413      	add	r3, r2
 80013aa:	3b23      	subs	r3, #35	; 0x23
 80013ac:	fa00 f203 	lsl.w	r2, r0, r3
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	430a      	orrs	r2, r1
 80013b6:	631a      	str	r2, [r3, #48]	; 0x30
 80013b8:	e023      	b.n	8001402 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	685a      	ldr	r2, [r3, #4]
 80013c4:	4613      	mov	r3, r2
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	4413      	add	r3, r2
 80013ca:	3b41      	subs	r3, #65	; 0x41
 80013cc:	221f      	movs	r2, #31
 80013ce:	fa02 f303 	lsl.w	r3, r2, r3
 80013d2:	43da      	mvns	r2, r3
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	400a      	ands	r2, r1
 80013da:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	b29b      	uxth	r3, r3
 80013e8:	4618      	mov	r0, r3
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	685a      	ldr	r2, [r3, #4]
 80013ee:	4613      	mov	r3, r2
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	4413      	add	r3, r2
 80013f4:	3b41      	subs	r3, #65	; 0x41
 80013f6:	fa00 f203 	lsl.w	r2, r0, r3
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	430a      	orrs	r2, r1
 8001400:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001402:	4b29      	ldr	r3, [pc, #164]	; (80014a8 <HAL_ADC_ConfigChannel+0x250>)
 8001404:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a28      	ldr	r2, [pc, #160]	; (80014ac <HAL_ADC_ConfigChannel+0x254>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d10f      	bne.n	8001430 <HAL_ADC_ConfigChannel+0x1d8>
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	2b12      	cmp	r3, #18
 8001416:	d10b      	bne.n	8001430 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a1d      	ldr	r2, [pc, #116]	; (80014ac <HAL_ADC_ConfigChannel+0x254>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d12b      	bne.n	8001492 <HAL_ADC_ConfigChannel+0x23a>
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a1c      	ldr	r2, [pc, #112]	; (80014b0 <HAL_ADC_ConfigChannel+0x258>)
 8001440:	4293      	cmp	r3, r2
 8001442:	d003      	beq.n	800144c <HAL_ADC_ConfigChannel+0x1f4>
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2b11      	cmp	r3, #17
 800144a:	d122      	bne.n	8001492 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a11      	ldr	r2, [pc, #68]	; (80014b0 <HAL_ADC_ConfigChannel+0x258>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d111      	bne.n	8001492 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800146e:	4b11      	ldr	r3, [pc, #68]	; (80014b4 <HAL_ADC_ConfigChannel+0x25c>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a11      	ldr	r2, [pc, #68]	; (80014b8 <HAL_ADC_ConfigChannel+0x260>)
 8001474:	fba2 2303 	umull	r2, r3, r2, r3
 8001478:	0c9a      	lsrs	r2, r3, #18
 800147a:	4613      	mov	r3, r2
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	4413      	add	r3, r2
 8001480:	005b      	lsls	r3, r3, #1
 8001482:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001484:	e002      	b.n	800148c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001486:	68bb      	ldr	r3, [r7, #8]
 8001488:	3b01      	subs	r3, #1
 800148a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d1f9      	bne.n	8001486 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2200      	movs	r2, #0
 8001496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800149a:	2300      	movs	r3, #0
}
 800149c:	4618      	mov	r0, r3
 800149e:	3714      	adds	r7, #20
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr
 80014a8:	40012300 	.word	0x40012300
 80014ac:	40012000 	.word	0x40012000
 80014b0:	10000012 	.word	0x10000012
 80014b4:	20000000 	.word	0x20000000
 80014b8:	431bde83 	.word	0x431bde83

080014bc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80014bc:	b480      	push	{r7}
 80014be:	b085      	sub	sp, #20
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014c4:	4b79      	ldr	r3, [pc, #484]	; (80016ac <ADC_Init+0x1f0>)
 80014c6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	685a      	ldr	r2, [r3, #4]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	431a      	orrs	r2, r3
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	685a      	ldr	r2, [r3, #4]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80014f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	6859      	ldr	r1, [r3, #4]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	691b      	ldr	r3, [r3, #16]
 80014fc:	021a      	lsls	r2, r3, #8
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	430a      	orrs	r2, r1
 8001504:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	685a      	ldr	r2, [r3, #4]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001514:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	6859      	ldr	r1, [r3, #4]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	689a      	ldr	r2, [r3, #8]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	430a      	orrs	r2, r1
 8001526:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	689a      	ldr	r2, [r3, #8]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001536:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	6899      	ldr	r1, [r3, #8]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	68da      	ldr	r2, [r3, #12]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	430a      	orrs	r2, r1
 8001548:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800154e:	4a58      	ldr	r2, [pc, #352]	; (80016b0 <ADC_Init+0x1f4>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d022      	beq.n	800159a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	689a      	ldr	r2, [r3, #8]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001562:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	6899      	ldr	r1, [r3, #8]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	430a      	orrs	r2, r1
 8001574:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	689a      	ldr	r2, [r3, #8]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001584:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	6899      	ldr	r1, [r3, #8]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	430a      	orrs	r2, r1
 8001596:	609a      	str	r2, [r3, #8]
 8001598:	e00f      	b.n	80015ba <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	689a      	ldr	r2, [r3, #8]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80015a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	689a      	ldr	r2, [r3, #8]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80015b8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	689a      	ldr	r2, [r3, #8]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f022 0202 	bic.w	r2, r2, #2
 80015c8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	6899      	ldr	r1, [r3, #8]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	7e1b      	ldrb	r3, [r3, #24]
 80015d4:	005a      	lsls	r2, r3, #1
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	430a      	orrs	r2, r1
 80015dc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d01b      	beq.n	8001620 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	685a      	ldr	r2, [r3, #4]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80015f6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	685a      	ldr	r2, [r3, #4]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001606:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	6859      	ldr	r1, [r3, #4]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001612:	3b01      	subs	r3, #1
 8001614:	035a      	lsls	r2, r3, #13
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	430a      	orrs	r2, r1
 800161c:	605a      	str	r2, [r3, #4]
 800161e:	e007      	b.n	8001630 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	685a      	ldr	r2, [r3, #4]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800162e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800163e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	69db      	ldr	r3, [r3, #28]
 800164a:	3b01      	subs	r3, #1
 800164c:	051a      	lsls	r2, r3, #20
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	430a      	orrs	r2, r1
 8001654:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	689a      	ldr	r2, [r3, #8]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001664:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	6899      	ldr	r1, [r3, #8]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001672:	025a      	lsls	r2, r3, #9
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	430a      	orrs	r2, r1
 800167a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	689a      	ldr	r2, [r3, #8]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800168a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	6899      	ldr	r1, [r3, #8]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	695b      	ldr	r3, [r3, #20]
 8001696:	029a      	lsls	r2, r3, #10
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	430a      	orrs	r2, r1
 800169e:	609a      	str	r2, [r3, #8]
}
 80016a0:	bf00      	nop
 80016a2:	3714      	adds	r7, #20
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr
 80016ac:	40012300 	.word	0x40012300
 80016b0:	0f000001 	.word	0x0f000001

080016b4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b084      	sub	sp, #16
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016c0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d13c      	bne.n	8001748 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d12b      	bne.n	8001740 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d127      	bne.n	8001740 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d006      	beq.n	800170c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001708:	2b00      	cmp	r3, #0
 800170a:	d119      	bne.n	8001740 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	685a      	ldr	r2, [r3, #4]
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f022 0220 	bic.w	r2, r2, #32
 800171a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001720:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001730:	2b00      	cmp	r3, #0
 8001732:	d105      	bne.n	8001740 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001738:	f043 0201 	orr.w	r2, r3, #1
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001740:	68f8      	ldr	r0, [r7, #12]
 8001742:	f7fe ff31 	bl	80005a8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001746:	e00e      	b.n	8001766 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174c:	f003 0310 	and.w	r3, r3, #16
 8001750:	2b00      	cmp	r3, #0
 8001752:	d003      	beq.n	800175c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001754:	68f8      	ldr	r0, [r7, #12]
 8001756:	f7ff fd75 	bl	8001244 <HAL_ADC_ErrorCallback>
}
 800175a:	e004      	b.n	8001766 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	4798      	blx	r3
}
 8001766:	bf00      	nop
 8001768:	3710      	adds	r7, #16
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}

0800176e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800176e:	b580      	push	{r7, lr}
 8001770:	b084      	sub	sp, #16
 8001772:	af00      	add	r7, sp, #0
 8001774:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800177a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800177c:	68f8      	ldr	r0, [r7, #12]
 800177e:	f7ff fd57 	bl	8001230 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001782:	bf00      	nop
 8001784:	3710      	adds	r7, #16
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}

0800178a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800178a:	b580      	push	{r7, lr}
 800178c:	b084      	sub	sp, #16
 800178e:	af00      	add	r7, sp, #0
 8001790:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001796:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	2240      	movs	r2, #64	; 0x40
 800179c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a2:	f043 0204 	orr.w	r2, r3, #4
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80017aa:	68f8      	ldr	r0, [r7, #12]
 80017ac:	f7ff fd4a 	bl	8001244 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80017b0:	bf00      	nop
 80017b2:	3710      	adds	r7, #16
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}

080017b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b085      	sub	sp, #20
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	f003 0307 	and.w	r3, r3, #7
 80017c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017c8:	4b0c      	ldr	r3, [pc, #48]	; (80017fc <__NVIC_SetPriorityGrouping+0x44>)
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ce:	68ba      	ldr	r2, [r7, #8]
 80017d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017d4:	4013      	ands	r3, r2
 80017d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017ea:	4a04      	ldr	r2, [pc, #16]	; (80017fc <__NVIC_SetPriorityGrouping+0x44>)
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	60d3      	str	r3, [r2, #12]
}
 80017f0:	bf00      	nop
 80017f2:	3714      	adds	r7, #20
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr
 80017fc:	e000ed00 	.word	0xe000ed00

08001800 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001804:	4b04      	ldr	r3, [pc, #16]	; (8001818 <__NVIC_GetPriorityGrouping+0x18>)
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	0a1b      	lsrs	r3, r3, #8
 800180a:	f003 0307 	and.w	r3, r3, #7
}
 800180e:	4618      	mov	r0, r3
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr
 8001818:	e000ed00 	.word	0xe000ed00

0800181c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	4603      	mov	r3, r0
 8001824:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182a:	2b00      	cmp	r3, #0
 800182c:	db0b      	blt.n	8001846 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800182e:	79fb      	ldrb	r3, [r7, #7]
 8001830:	f003 021f 	and.w	r2, r3, #31
 8001834:	4907      	ldr	r1, [pc, #28]	; (8001854 <__NVIC_EnableIRQ+0x38>)
 8001836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183a:	095b      	lsrs	r3, r3, #5
 800183c:	2001      	movs	r0, #1
 800183e:	fa00 f202 	lsl.w	r2, r0, r2
 8001842:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001846:	bf00      	nop
 8001848:	370c      	adds	r7, #12
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	e000e100 	.word	0xe000e100

08001858 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	4603      	mov	r3, r0
 8001860:	6039      	str	r1, [r7, #0]
 8001862:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001864:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001868:	2b00      	cmp	r3, #0
 800186a:	db0a      	blt.n	8001882 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	b2da      	uxtb	r2, r3
 8001870:	490c      	ldr	r1, [pc, #48]	; (80018a4 <__NVIC_SetPriority+0x4c>)
 8001872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001876:	0112      	lsls	r2, r2, #4
 8001878:	b2d2      	uxtb	r2, r2
 800187a:	440b      	add	r3, r1
 800187c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001880:	e00a      	b.n	8001898 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	b2da      	uxtb	r2, r3
 8001886:	4908      	ldr	r1, [pc, #32]	; (80018a8 <__NVIC_SetPriority+0x50>)
 8001888:	79fb      	ldrb	r3, [r7, #7]
 800188a:	f003 030f 	and.w	r3, r3, #15
 800188e:	3b04      	subs	r3, #4
 8001890:	0112      	lsls	r2, r2, #4
 8001892:	b2d2      	uxtb	r2, r2
 8001894:	440b      	add	r3, r1
 8001896:	761a      	strb	r2, [r3, #24]
}
 8001898:	bf00      	nop
 800189a:	370c      	adds	r7, #12
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr
 80018a4:	e000e100 	.word	0xe000e100
 80018a8:	e000ed00 	.word	0xe000ed00

080018ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b089      	sub	sp, #36	; 0x24
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	60f8      	str	r0, [r7, #12]
 80018b4:	60b9      	str	r1, [r7, #8]
 80018b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	f003 0307 	and.w	r3, r3, #7
 80018be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	f1c3 0307 	rsb	r3, r3, #7
 80018c6:	2b04      	cmp	r3, #4
 80018c8:	bf28      	it	cs
 80018ca:	2304      	movcs	r3, #4
 80018cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	3304      	adds	r3, #4
 80018d2:	2b06      	cmp	r3, #6
 80018d4:	d902      	bls.n	80018dc <NVIC_EncodePriority+0x30>
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	3b03      	subs	r3, #3
 80018da:	e000      	b.n	80018de <NVIC_EncodePriority+0x32>
 80018dc:	2300      	movs	r3, #0
 80018de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018e0:	f04f 32ff 	mov.w	r2, #4294967295
 80018e4:	69bb      	ldr	r3, [r7, #24]
 80018e6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ea:	43da      	mvns	r2, r3
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	401a      	ands	r2, r3
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018f4:	f04f 31ff 	mov.w	r1, #4294967295
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	fa01 f303 	lsl.w	r3, r1, r3
 80018fe:	43d9      	mvns	r1, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001904:	4313      	orrs	r3, r2
         );
}
 8001906:	4618      	mov	r0, r3
 8001908:	3724      	adds	r7, #36	; 0x24
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
	...

08001914 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	3b01      	subs	r3, #1
 8001920:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001924:	d301      	bcc.n	800192a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001926:	2301      	movs	r3, #1
 8001928:	e00f      	b.n	800194a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800192a:	4a0a      	ldr	r2, [pc, #40]	; (8001954 <SysTick_Config+0x40>)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	3b01      	subs	r3, #1
 8001930:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001932:	210f      	movs	r1, #15
 8001934:	f04f 30ff 	mov.w	r0, #4294967295
 8001938:	f7ff ff8e 	bl	8001858 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800193c:	4b05      	ldr	r3, [pc, #20]	; (8001954 <SysTick_Config+0x40>)
 800193e:	2200      	movs	r2, #0
 8001940:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001942:	4b04      	ldr	r3, [pc, #16]	; (8001954 <SysTick_Config+0x40>)
 8001944:	2207      	movs	r2, #7
 8001946:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001948:	2300      	movs	r3, #0
}
 800194a:	4618      	mov	r0, r3
 800194c:	3708      	adds	r7, #8
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	e000e010 	.word	0xe000e010

08001958 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	f7ff ff29 	bl	80017b8 <__NVIC_SetPriorityGrouping>
}
 8001966:	bf00      	nop
 8001968:	3708      	adds	r7, #8
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}

0800196e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800196e:	b580      	push	{r7, lr}
 8001970:	b086      	sub	sp, #24
 8001972:	af00      	add	r7, sp, #0
 8001974:	4603      	mov	r3, r0
 8001976:	60b9      	str	r1, [r7, #8]
 8001978:	607a      	str	r2, [r7, #4]
 800197a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800197c:	2300      	movs	r3, #0
 800197e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001980:	f7ff ff3e 	bl	8001800 <__NVIC_GetPriorityGrouping>
 8001984:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001986:	687a      	ldr	r2, [r7, #4]
 8001988:	68b9      	ldr	r1, [r7, #8]
 800198a:	6978      	ldr	r0, [r7, #20]
 800198c:	f7ff ff8e 	bl	80018ac <NVIC_EncodePriority>
 8001990:	4602      	mov	r2, r0
 8001992:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001996:	4611      	mov	r1, r2
 8001998:	4618      	mov	r0, r3
 800199a:	f7ff ff5d 	bl	8001858 <__NVIC_SetPriority>
}
 800199e:	bf00      	nop
 80019a0:	3718      	adds	r7, #24
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}

080019a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019a6:	b580      	push	{r7, lr}
 80019a8:	b082      	sub	sp, #8
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	4603      	mov	r3, r0
 80019ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff ff31 	bl	800181c <__NVIC_EnableIRQ>
}
 80019ba:	bf00      	nop
 80019bc:	3708      	adds	r7, #8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}

080019c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019c2:	b580      	push	{r7, lr}
 80019c4:	b082      	sub	sp, #8
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f7ff ffa2 	bl	8001914 <SysTick_Config>
 80019d0:	4603      	mov	r3, r0
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3708      	adds	r7, #8
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
	...

080019dc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b086      	sub	sp, #24
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80019e4:	2300      	movs	r3, #0
 80019e6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80019e8:	f7ff fabe 	bl	8000f68 <HAL_GetTick>
 80019ec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d101      	bne.n	80019f8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	e099      	b.n	8001b2c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2202      	movs	r2, #2
 80019fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2200      	movs	r2, #0
 8001a04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f022 0201 	bic.w	r2, r2, #1
 8001a16:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a18:	e00f      	b.n	8001a3a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a1a:	f7ff faa5 	bl	8000f68 <HAL_GetTick>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	1ad3      	subs	r3, r2, r3
 8001a24:	2b05      	cmp	r3, #5
 8001a26:	d908      	bls.n	8001a3a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2220      	movs	r2, #32
 8001a2c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2203      	movs	r2, #3
 8001a32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e078      	b.n	8001b2c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 0301 	and.w	r3, r3, #1
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d1e8      	bne.n	8001a1a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001a50:	697a      	ldr	r2, [r7, #20]
 8001a52:	4b38      	ldr	r3, [pc, #224]	; (8001b34 <HAL_DMA_Init+0x158>)
 8001a54:	4013      	ands	r3, r2
 8001a56:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	685a      	ldr	r2, [r3, #4]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a66:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	691b      	ldr	r3, [r3, #16]
 8001a6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a72:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	699b      	ldr	r3, [r3, #24]
 8001a78:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a7e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6a1b      	ldr	r3, [r3, #32]
 8001a84:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a86:	697a      	ldr	r2, [r7, #20]
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a90:	2b04      	cmp	r3, #4
 8001a92:	d107      	bne.n	8001aa4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	697a      	ldr	r2, [r7, #20]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	697a      	ldr	r2, [r7, #20]
 8001aaa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	695b      	ldr	r3, [r3, #20]
 8001ab2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	f023 0307 	bic.w	r3, r3, #7
 8001aba:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac0:	697a      	ldr	r2, [r7, #20]
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aca:	2b04      	cmp	r3, #4
 8001acc:	d117      	bne.n	8001afe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ad2:	697a      	ldr	r2, [r7, #20]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d00e      	beq.n	8001afe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f000 fa6f 	bl	8001fc4 <DMA_CheckFifoParam>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d008      	beq.n	8001afe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2240      	movs	r2, #64	; 0x40
 8001af0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2201      	movs	r2, #1
 8001af6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001afa:	2301      	movs	r3, #1
 8001afc:	e016      	b.n	8001b2c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	697a      	ldr	r2, [r7, #20]
 8001b04:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f000 fa26 	bl	8001f58 <DMA_CalcBaseAndBitshift>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b14:	223f      	movs	r2, #63	; 0x3f
 8001b16:	409a      	lsls	r2, r3
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2201      	movs	r2, #1
 8001b26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001b2a:	2300      	movs	r3, #0
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3718      	adds	r7, #24
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	f010803f 	.word	0xf010803f

08001b38 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b086      	sub	sp, #24
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	60f8      	str	r0, [r7, #12]
 8001b40:	60b9      	str	r1, [r7, #8]
 8001b42:	607a      	str	r2, [r7, #4]
 8001b44:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b46:	2300      	movs	r3, #0
 8001b48:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b4e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d101      	bne.n	8001b5e <HAL_DMA_Start_IT+0x26>
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	e040      	b.n	8001be0 <HAL_DMA_Start_IT+0xa8>
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	2201      	movs	r2, #1
 8001b62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d12f      	bne.n	8001bd2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	2202      	movs	r2, #2
 8001b76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	687a      	ldr	r2, [r7, #4]
 8001b84:	68b9      	ldr	r1, [r7, #8]
 8001b86:	68f8      	ldr	r0, [r7, #12]
 8001b88:	f000 f9b8 	bl	8001efc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b90:	223f      	movs	r2, #63	; 0x3f
 8001b92:	409a      	lsls	r2, r3
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f042 0216 	orr.w	r2, r2, #22
 8001ba6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d007      	beq.n	8001bc0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f042 0208 	orr.w	r2, r2, #8
 8001bbe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f042 0201 	orr.w	r2, r2, #1
 8001bce:	601a      	str	r2, [r3, #0]
 8001bd0:	e005      	b.n	8001bde <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001bda:	2302      	movs	r3, #2
 8001bdc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001bde:	7dfb      	ldrb	r3, [r7, #23]
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3718      	adds	r7, #24
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}

08001be8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b086      	sub	sp, #24
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001bf4:	4b8e      	ldr	r3, [pc, #568]	; (8001e30 <HAL_DMA_IRQHandler+0x248>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a8e      	ldr	r2, [pc, #568]	; (8001e34 <HAL_DMA_IRQHandler+0x24c>)
 8001bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8001bfe:	0a9b      	lsrs	r3, r3, #10
 8001c00:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c06:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c12:	2208      	movs	r2, #8
 8001c14:	409a      	lsls	r2, r3
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	4013      	ands	r3, r2
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d01a      	beq.n	8001c54 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 0304 	and.w	r3, r3, #4
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d013      	beq.n	8001c54 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f022 0204 	bic.w	r2, r2, #4
 8001c3a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c40:	2208      	movs	r2, #8
 8001c42:	409a      	lsls	r2, r3
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c4c:	f043 0201 	orr.w	r2, r3, #1
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c58:	2201      	movs	r2, #1
 8001c5a:	409a      	lsls	r2, r3
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	4013      	ands	r3, r2
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d012      	beq.n	8001c8a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	695b      	ldr	r3, [r3, #20]
 8001c6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d00b      	beq.n	8001c8a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c76:	2201      	movs	r2, #1
 8001c78:	409a      	lsls	r2, r3
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c82:	f043 0202 	orr.w	r2, r3, #2
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c8e:	2204      	movs	r2, #4
 8001c90:	409a      	lsls	r2, r3
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	4013      	ands	r3, r2
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d012      	beq.n	8001cc0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 0302 	and.w	r3, r3, #2
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d00b      	beq.n	8001cc0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cac:	2204      	movs	r2, #4
 8001cae:	409a      	lsls	r2, r3
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cb8:	f043 0204 	orr.w	r2, r3, #4
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cc4:	2210      	movs	r2, #16
 8001cc6:	409a      	lsls	r2, r3
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	4013      	ands	r3, r2
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d043      	beq.n	8001d58 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0308 	and.w	r3, r3, #8
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d03c      	beq.n	8001d58 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ce2:	2210      	movs	r2, #16
 8001ce4:	409a      	lsls	r2, r3
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d018      	beq.n	8001d2a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d108      	bne.n	8001d18 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d024      	beq.n	8001d58 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	4798      	blx	r3
 8001d16:	e01f      	b.n	8001d58 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d01b      	beq.n	8001d58 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	4798      	blx	r3
 8001d28:	e016      	b.n	8001d58 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d107      	bne.n	8001d48 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f022 0208 	bic.w	r2, r2, #8
 8001d46:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d003      	beq.n	8001d58 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d5c:	2220      	movs	r2, #32
 8001d5e:	409a      	lsls	r2, r3
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	4013      	ands	r3, r2
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	f000 808f 	beq.w	8001e88 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0310 	and.w	r3, r3, #16
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	f000 8087 	beq.w	8001e88 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d7e:	2220      	movs	r2, #32
 8001d80:	409a      	lsls	r2, r3
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	2b05      	cmp	r3, #5
 8001d90:	d136      	bne.n	8001e00 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f022 0216 	bic.w	r2, r2, #22
 8001da0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	695a      	ldr	r2, [r3, #20]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001db0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d103      	bne.n	8001dc2 <HAL_DMA_IRQHandler+0x1da>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d007      	beq.n	8001dd2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f022 0208 	bic.w	r2, r2, #8
 8001dd0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dd6:	223f      	movs	r2, #63	; 0x3f
 8001dd8:	409a      	lsls	r2, r3
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2201      	movs	r2, #1
 8001de2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2200      	movs	r2, #0
 8001dea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d07e      	beq.n	8001ef4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	4798      	blx	r3
        }
        return;
 8001dfe:	e079      	b.n	8001ef4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d01d      	beq.n	8001e4a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d10d      	bne.n	8001e38 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d031      	beq.n	8001e88 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	4798      	blx	r3
 8001e2c:	e02c      	b.n	8001e88 <HAL_DMA_IRQHandler+0x2a0>
 8001e2e:	bf00      	nop
 8001e30:	20000000 	.word	0x20000000
 8001e34:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d023      	beq.n	8001e88 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	4798      	blx	r3
 8001e48:	e01e      	b.n	8001e88 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d10f      	bne.n	8001e78 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f022 0210 	bic.w	r2, r2, #16
 8001e66:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2200      	movs	r2, #0
 8001e74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d003      	beq.n	8001e88 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d032      	beq.n	8001ef6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e94:	f003 0301 	and.w	r3, r3, #1
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d022      	beq.n	8001ee2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2205      	movs	r2, #5
 8001ea0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f022 0201 	bic.w	r2, r2, #1
 8001eb2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	60bb      	str	r3, [r7, #8]
 8001eba:	697a      	ldr	r2, [r7, #20]
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d307      	bcc.n	8001ed0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 0301 	and.w	r3, r3, #1
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d1f2      	bne.n	8001eb4 <HAL_DMA_IRQHandler+0x2cc>
 8001ece:	e000      	b.n	8001ed2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001ed0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2200      	movs	r2, #0
 8001ede:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d005      	beq.n	8001ef6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	4798      	blx	r3
 8001ef2:	e000      	b.n	8001ef6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001ef4:	bf00      	nop
    }
  }
}
 8001ef6:	3718      	adds	r7, #24
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}

08001efc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b085      	sub	sp, #20
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	60f8      	str	r0, [r7, #12]
 8001f04:	60b9      	str	r1, [r7, #8]
 8001f06:	607a      	str	r2, [r7, #4]
 8001f08:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001f18:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	683a      	ldr	r2, [r7, #0]
 8001f20:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	2b40      	cmp	r3, #64	; 0x40
 8001f28:	d108      	bne.n	8001f3c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	687a      	ldr	r2, [r7, #4]
 8001f30:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	68ba      	ldr	r2, [r7, #8]
 8001f38:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001f3a:	e007      	b.n	8001f4c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	68ba      	ldr	r2, [r7, #8]
 8001f42:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	60da      	str	r2, [r3, #12]
}
 8001f4c:	bf00      	nop
 8001f4e:	3714      	adds	r7, #20
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr

08001f58 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b085      	sub	sp, #20
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	3b10      	subs	r3, #16
 8001f68:	4a14      	ldr	r2, [pc, #80]	; (8001fbc <DMA_CalcBaseAndBitshift+0x64>)
 8001f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f6e:	091b      	lsrs	r3, r3, #4
 8001f70:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001f72:	4a13      	ldr	r2, [pc, #76]	; (8001fc0 <DMA_CalcBaseAndBitshift+0x68>)
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	4413      	add	r3, r2
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2b03      	cmp	r3, #3
 8001f84:	d909      	bls.n	8001f9a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001f8e:	f023 0303 	bic.w	r3, r3, #3
 8001f92:	1d1a      	adds	r2, r3, #4
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	659a      	str	r2, [r3, #88]	; 0x58
 8001f98:	e007      	b.n	8001faa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001fa2:	f023 0303 	bic.w	r3, r3, #3
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3714      	adds	r7, #20
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	aaaaaaab 	.word	0xaaaaaaab
 8001fc0:	08004bcc 	.word	0x08004bcc

08001fc4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b085      	sub	sp, #20
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fd4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	699b      	ldr	r3, [r3, #24]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d11f      	bne.n	800201e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	2b03      	cmp	r3, #3
 8001fe2:	d856      	bhi.n	8002092 <DMA_CheckFifoParam+0xce>
 8001fe4:	a201      	add	r2, pc, #4	; (adr r2, 8001fec <DMA_CheckFifoParam+0x28>)
 8001fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fea:	bf00      	nop
 8001fec:	08001ffd 	.word	0x08001ffd
 8001ff0:	0800200f 	.word	0x0800200f
 8001ff4:	08001ffd 	.word	0x08001ffd
 8001ff8:	08002093 	.word	0x08002093
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002000:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002004:	2b00      	cmp	r3, #0
 8002006:	d046      	beq.n	8002096 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800200c:	e043      	b.n	8002096 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002012:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002016:	d140      	bne.n	800209a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800201c:	e03d      	b.n	800209a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	699b      	ldr	r3, [r3, #24]
 8002022:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002026:	d121      	bne.n	800206c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	2b03      	cmp	r3, #3
 800202c:	d837      	bhi.n	800209e <DMA_CheckFifoParam+0xda>
 800202e:	a201      	add	r2, pc, #4	; (adr r2, 8002034 <DMA_CheckFifoParam+0x70>)
 8002030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002034:	08002045 	.word	0x08002045
 8002038:	0800204b 	.word	0x0800204b
 800203c:	08002045 	.word	0x08002045
 8002040:	0800205d 	.word	0x0800205d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	73fb      	strb	r3, [r7, #15]
      break;
 8002048:	e030      	b.n	80020ac <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800204e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d025      	beq.n	80020a2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800205a:	e022      	b.n	80020a2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002060:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002064:	d11f      	bne.n	80020a6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800206a:	e01c      	b.n	80020a6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	2b02      	cmp	r3, #2
 8002070:	d903      	bls.n	800207a <DMA_CheckFifoParam+0xb6>
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	2b03      	cmp	r3, #3
 8002076:	d003      	beq.n	8002080 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002078:	e018      	b.n	80020ac <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	73fb      	strb	r3, [r7, #15]
      break;
 800207e:	e015      	b.n	80020ac <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002084:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002088:	2b00      	cmp	r3, #0
 800208a:	d00e      	beq.n	80020aa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	73fb      	strb	r3, [r7, #15]
      break;
 8002090:	e00b      	b.n	80020aa <DMA_CheckFifoParam+0xe6>
      break;
 8002092:	bf00      	nop
 8002094:	e00a      	b.n	80020ac <DMA_CheckFifoParam+0xe8>
      break;
 8002096:	bf00      	nop
 8002098:	e008      	b.n	80020ac <DMA_CheckFifoParam+0xe8>
      break;
 800209a:	bf00      	nop
 800209c:	e006      	b.n	80020ac <DMA_CheckFifoParam+0xe8>
      break;
 800209e:	bf00      	nop
 80020a0:	e004      	b.n	80020ac <DMA_CheckFifoParam+0xe8>
      break;
 80020a2:	bf00      	nop
 80020a4:	e002      	b.n	80020ac <DMA_CheckFifoParam+0xe8>
      break;   
 80020a6:	bf00      	nop
 80020a8:	e000      	b.n	80020ac <DMA_CheckFifoParam+0xe8>
      break;
 80020aa:	bf00      	nop
    }
  } 
  
  return status; 
 80020ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3714      	adds	r7, #20
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop

080020bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020bc:	b480      	push	{r7}
 80020be:	b089      	sub	sp, #36	; 0x24
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020c6:	2300      	movs	r3, #0
 80020c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020ca:	2300      	movs	r3, #0
 80020cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020ce:	2300      	movs	r3, #0
 80020d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020d2:	2300      	movs	r3, #0
 80020d4:	61fb      	str	r3, [r7, #28]
 80020d6:	e159      	b.n	800238c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020d8:	2201      	movs	r2, #1
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	fa02 f303 	lsl.w	r3, r2, r3
 80020e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	697a      	ldr	r2, [r7, #20]
 80020e8:	4013      	ands	r3, r2
 80020ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020ec:	693a      	ldr	r2, [r7, #16]
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	f040 8148 	bne.w	8002386 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	f003 0303 	and.w	r3, r3, #3
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d005      	beq.n	800210e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800210a:	2b02      	cmp	r3, #2
 800210c:	d130      	bne.n	8002170 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	005b      	lsls	r3, r3, #1
 8002118:	2203      	movs	r2, #3
 800211a:	fa02 f303 	lsl.w	r3, r2, r3
 800211e:	43db      	mvns	r3, r3
 8002120:	69ba      	ldr	r2, [r7, #24]
 8002122:	4013      	ands	r3, r2
 8002124:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	68da      	ldr	r2, [r3, #12]
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	005b      	lsls	r3, r3, #1
 800212e:	fa02 f303 	lsl.w	r3, r2, r3
 8002132:	69ba      	ldr	r2, [r7, #24]
 8002134:	4313      	orrs	r3, r2
 8002136:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	69ba      	ldr	r2, [r7, #24]
 800213c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002144:	2201      	movs	r2, #1
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	fa02 f303 	lsl.w	r3, r2, r3
 800214c:	43db      	mvns	r3, r3
 800214e:	69ba      	ldr	r2, [r7, #24]
 8002150:	4013      	ands	r3, r2
 8002152:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	091b      	lsrs	r3, r3, #4
 800215a:	f003 0201 	and.w	r2, r3, #1
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	fa02 f303 	lsl.w	r3, r2, r3
 8002164:	69ba      	ldr	r2, [r7, #24]
 8002166:	4313      	orrs	r3, r2
 8002168:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	69ba      	ldr	r2, [r7, #24]
 800216e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f003 0303 	and.w	r3, r3, #3
 8002178:	2b03      	cmp	r3, #3
 800217a:	d017      	beq.n	80021ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	005b      	lsls	r3, r3, #1
 8002186:	2203      	movs	r2, #3
 8002188:	fa02 f303 	lsl.w	r3, r2, r3
 800218c:	43db      	mvns	r3, r3
 800218e:	69ba      	ldr	r2, [r7, #24]
 8002190:	4013      	ands	r3, r2
 8002192:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	689a      	ldr	r2, [r3, #8]
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	005b      	lsls	r3, r3, #1
 800219c:	fa02 f303 	lsl.w	r3, r2, r3
 80021a0:	69ba      	ldr	r2, [r7, #24]
 80021a2:	4313      	orrs	r3, r2
 80021a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	69ba      	ldr	r2, [r7, #24]
 80021aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f003 0303 	and.w	r3, r3, #3
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d123      	bne.n	8002200 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	08da      	lsrs	r2, r3, #3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	3208      	adds	r2, #8
 80021c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	f003 0307 	and.w	r3, r3, #7
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	220f      	movs	r2, #15
 80021d0:	fa02 f303 	lsl.w	r3, r2, r3
 80021d4:	43db      	mvns	r3, r3
 80021d6:	69ba      	ldr	r2, [r7, #24]
 80021d8:	4013      	ands	r3, r2
 80021da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	691a      	ldr	r2, [r3, #16]
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	f003 0307 	and.w	r3, r3, #7
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ec:	69ba      	ldr	r2, [r7, #24]
 80021ee:	4313      	orrs	r3, r2
 80021f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	08da      	lsrs	r2, r3, #3
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	3208      	adds	r2, #8
 80021fa:	69b9      	ldr	r1, [r7, #24]
 80021fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	005b      	lsls	r3, r3, #1
 800220a:	2203      	movs	r2, #3
 800220c:	fa02 f303 	lsl.w	r3, r2, r3
 8002210:	43db      	mvns	r3, r3
 8002212:	69ba      	ldr	r2, [r7, #24]
 8002214:	4013      	ands	r3, r2
 8002216:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f003 0203 	and.w	r2, r3, #3
 8002220:	69fb      	ldr	r3, [r7, #28]
 8002222:	005b      	lsls	r3, r3, #1
 8002224:	fa02 f303 	lsl.w	r3, r2, r3
 8002228:	69ba      	ldr	r2, [r7, #24]
 800222a:	4313      	orrs	r3, r2
 800222c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	69ba      	ldr	r2, [r7, #24]
 8002232:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800223c:	2b00      	cmp	r3, #0
 800223e:	f000 80a2 	beq.w	8002386 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002242:	2300      	movs	r3, #0
 8002244:	60fb      	str	r3, [r7, #12]
 8002246:	4b57      	ldr	r3, [pc, #348]	; (80023a4 <HAL_GPIO_Init+0x2e8>)
 8002248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800224a:	4a56      	ldr	r2, [pc, #344]	; (80023a4 <HAL_GPIO_Init+0x2e8>)
 800224c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002250:	6453      	str	r3, [r2, #68]	; 0x44
 8002252:	4b54      	ldr	r3, [pc, #336]	; (80023a4 <HAL_GPIO_Init+0x2e8>)
 8002254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002256:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800225a:	60fb      	str	r3, [r7, #12]
 800225c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800225e:	4a52      	ldr	r2, [pc, #328]	; (80023a8 <HAL_GPIO_Init+0x2ec>)
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	089b      	lsrs	r3, r3, #2
 8002264:	3302      	adds	r3, #2
 8002266:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800226a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	f003 0303 	and.w	r3, r3, #3
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	220f      	movs	r2, #15
 8002276:	fa02 f303 	lsl.w	r3, r2, r3
 800227a:	43db      	mvns	r3, r3
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	4013      	ands	r3, r2
 8002280:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4a49      	ldr	r2, [pc, #292]	; (80023ac <HAL_GPIO_Init+0x2f0>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d019      	beq.n	80022be <HAL_GPIO_Init+0x202>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4a48      	ldr	r2, [pc, #288]	; (80023b0 <HAL_GPIO_Init+0x2f4>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d013      	beq.n	80022ba <HAL_GPIO_Init+0x1fe>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4a47      	ldr	r2, [pc, #284]	; (80023b4 <HAL_GPIO_Init+0x2f8>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d00d      	beq.n	80022b6 <HAL_GPIO_Init+0x1fa>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4a46      	ldr	r2, [pc, #280]	; (80023b8 <HAL_GPIO_Init+0x2fc>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d007      	beq.n	80022b2 <HAL_GPIO_Init+0x1f6>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4a45      	ldr	r2, [pc, #276]	; (80023bc <HAL_GPIO_Init+0x300>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d101      	bne.n	80022ae <HAL_GPIO_Init+0x1f2>
 80022aa:	2304      	movs	r3, #4
 80022ac:	e008      	b.n	80022c0 <HAL_GPIO_Init+0x204>
 80022ae:	2307      	movs	r3, #7
 80022b0:	e006      	b.n	80022c0 <HAL_GPIO_Init+0x204>
 80022b2:	2303      	movs	r3, #3
 80022b4:	e004      	b.n	80022c0 <HAL_GPIO_Init+0x204>
 80022b6:	2302      	movs	r3, #2
 80022b8:	e002      	b.n	80022c0 <HAL_GPIO_Init+0x204>
 80022ba:	2301      	movs	r3, #1
 80022bc:	e000      	b.n	80022c0 <HAL_GPIO_Init+0x204>
 80022be:	2300      	movs	r3, #0
 80022c0:	69fa      	ldr	r2, [r7, #28]
 80022c2:	f002 0203 	and.w	r2, r2, #3
 80022c6:	0092      	lsls	r2, r2, #2
 80022c8:	4093      	lsls	r3, r2
 80022ca:	69ba      	ldr	r2, [r7, #24]
 80022cc:	4313      	orrs	r3, r2
 80022ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022d0:	4935      	ldr	r1, [pc, #212]	; (80023a8 <HAL_GPIO_Init+0x2ec>)
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	089b      	lsrs	r3, r3, #2
 80022d6:	3302      	adds	r3, #2
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022de:	4b38      	ldr	r3, [pc, #224]	; (80023c0 <HAL_GPIO_Init+0x304>)
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	43db      	mvns	r3, r3
 80022e8:	69ba      	ldr	r2, [r7, #24]
 80022ea:	4013      	ands	r3, r2
 80022ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d003      	beq.n	8002302 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80022fa:	69ba      	ldr	r2, [r7, #24]
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	4313      	orrs	r3, r2
 8002300:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002302:	4a2f      	ldr	r2, [pc, #188]	; (80023c0 <HAL_GPIO_Init+0x304>)
 8002304:	69bb      	ldr	r3, [r7, #24]
 8002306:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002308:	4b2d      	ldr	r3, [pc, #180]	; (80023c0 <HAL_GPIO_Init+0x304>)
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	43db      	mvns	r3, r3
 8002312:	69ba      	ldr	r2, [r7, #24]
 8002314:	4013      	ands	r3, r2
 8002316:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002320:	2b00      	cmp	r3, #0
 8002322:	d003      	beq.n	800232c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002324:	69ba      	ldr	r2, [r7, #24]
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	4313      	orrs	r3, r2
 800232a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800232c:	4a24      	ldr	r2, [pc, #144]	; (80023c0 <HAL_GPIO_Init+0x304>)
 800232e:	69bb      	ldr	r3, [r7, #24]
 8002330:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002332:	4b23      	ldr	r3, [pc, #140]	; (80023c0 <HAL_GPIO_Init+0x304>)
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	43db      	mvns	r3, r3
 800233c:	69ba      	ldr	r2, [r7, #24]
 800233e:	4013      	ands	r3, r2
 8002340:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d003      	beq.n	8002356 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800234e:	69ba      	ldr	r2, [r7, #24]
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	4313      	orrs	r3, r2
 8002354:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002356:	4a1a      	ldr	r2, [pc, #104]	; (80023c0 <HAL_GPIO_Init+0x304>)
 8002358:	69bb      	ldr	r3, [r7, #24]
 800235a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800235c:	4b18      	ldr	r3, [pc, #96]	; (80023c0 <HAL_GPIO_Init+0x304>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	43db      	mvns	r3, r3
 8002366:	69ba      	ldr	r2, [r7, #24]
 8002368:	4013      	ands	r3, r2
 800236a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d003      	beq.n	8002380 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002378:	69ba      	ldr	r2, [r7, #24]
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	4313      	orrs	r3, r2
 800237e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002380:	4a0f      	ldr	r2, [pc, #60]	; (80023c0 <HAL_GPIO_Init+0x304>)
 8002382:	69bb      	ldr	r3, [r7, #24]
 8002384:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	3301      	adds	r3, #1
 800238a:	61fb      	str	r3, [r7, #28]
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	2b0f      	cmp	r3, #15
 8002390:	f67f aea2 	bls.w	80020d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002394:	bf00      	nop
 8002396:	bf00      	nop
 8002398:	3724      	adds	r7, #36	; 0x24
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr
 80023a2:	bf00      	nop
 80023a4:	40023800 	.word	0x40023800
 80023a8:	40013800 	.word	0x40013800
 80023ac:	40020000 	.word	0x40020000
 80023b0:	40020400 	.word	0x40020400
 80023b4:	40020800 	.word	0x40020800
 80023b8:	40020c00 	.word	0x40020c00
 80023bc:	40021000 	.word	0x40021000
 80023c0:	40013c00 	.word	0x40013c00

080023c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b085      	sub	sp, #20
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	460b      	mov	r3, r1
 80023ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	691a      	ldr	r2, [r3, #16]
 80023d4:	887b      	ldrh	r3, [r7, #2]
 80023d6:	4013      	ands	r3, r2
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d002      	beq.n	80023e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80023dc:	2301      	movs	r3, #1
 80023de:	73fb      	strb	r3, [r7, #15]
 80023e0:	e001      	b.n	80023e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80023e2:	2300      	movs	r3, #0
 80023e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80023e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3714      	adds	r7, #20
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	460b      	mov	r3, r1
 80023fe:	807b      	strh	r3, [r7, #2]
 8002400:	4613      	mov	r3, r2
 8002402:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002404:	787b      	ldrb	r3, [r7, #1]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d003      	beq.n	8002412 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800240a:	887a      	ldrh	r2, [r7, #2]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002410:	e003      	b.n	800241a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002412:	887b      	ldrh	r3, [r7, #2]
 8002414:	041a      	lsls	r2, r3, #16
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	619a      	str	r2, [r3, #24]
}
 800241a:	bf00      	nop
 800241c:	370c      	adds	r7, #12
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr
	...

08002428 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b086      	sub	sp, #24
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d101      	bne.n	800243a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e267      	b.n	800290a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0301 	and.w	r3, r3, #1
 8002442:	2b00      	cmp	r3, #0
 8002444:	d075      	beq.n	8002532 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002446:	4b88      	ldr	r3, [pc, #544]	; (8002668 <HAL_RCC_OscConfig+0x240>)
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	f003 030c 	and.w	r3, r3, #12
 800244e:	2b04      	cmp	r3, #4
 8002450:	d00c      	beq.n	800246c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002452:	4b85      	ldr	r3, [pc, #532]	; (8002668 <HAL_RCC_OscConfig+0x240>)
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800245a:	2b08      	cmp	r3, #8
 800245c:	d112      	bne.n	8002484 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800245e:	4b82      	ldr	r3, [pc, #520]	; (8002668 <HAL_RCC_OscConfig+0x240>)
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002466:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800246a:	d10b      	bne.n	8002484 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800246c:	4b7e      	ldr	r3, [pc, #504]	; (8002668 <HAL_RCC_OscConfig+0x240>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002474:	2b00      	cmp	r3, #0
 8002476:	d05b      	beq.n	8002530 <HAL_RCC_OscConfig+0x108>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d157      	bne.n	8002530 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e242      	b.n	800290a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800248c:	d106      	bne.n	800249c <HAL_RCC_OscConfig+0x74>
 800248e:	4b76      	ldr	r3, [pc, #472]	; (8002668 <HAL_RCC_OscConfig+0x240>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a75      	ldr	r2, [pc, #468]	; (8002668 <HAL_RCC_OscConfig+0x240>)
 8002494:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002498:	6013      	str	r3, [r2, #0]
 800249a:	e01d      	b.n	80024d8 <HAL_RCC_OscConfig+0xb0>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024a4:	d10c      	bne.n	80024c0 <HAL_RCC_OscConfig+0x98>
 80024a6:	4b70      	ldr	r3, [pc, #448]	; (8002668 <HAL_RCC_OscConfig+0x240>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a6f      	ldr	r2, [pc, #444]	; (8002668 <HAL_RCC_OscConfig+0x240>)
 80024ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024b0:	6013      	str	r3, [r2, #0]
 80024b2:	4b6d      	ldr	r3, [pc, #436]	; (8002668 <HAL_RCC_OscConfig+0x240>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a6c      	ldr	r2, [pc, #432]	; (8002668 <HAL_RCC_OscConfig+0x240>)
 80024b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024bc:	6013      	str	r3, [r2, #0]
 80024be:	e00b      	b.n	80024d8 <HAL_RCC_OscConfig+0xb0>
 80024c0:	4b69      	ldr	r3, [pc, #420]	; (8002668 <HAL_RCC_OscConfig+0x240>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a68      	ldr	r2, [pc, #416]	; (8002668 <HAL_RCC_OscConfig+0x240>)
 80024c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024ca:	6013      	str	r3, [r2, #0]
 80024cc:	4b66      	ldr	r3, [pc, #408]	; (8002668 <HAL_RCC_OscConfig+0x240>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a65      	ldr	r2, [pc, #404]	; (8002668 <HAL_RCC_OscConfig+0x240>)
 80024d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d013      	beq.n	8002508 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024e0:	f7fe fd42 	bl	8000f68 <HAL_GetTick>
 80024e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024e6:	e008      	b.n	80024fa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024e8:	f7fe fd3e 	bl	8000f68 <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	2b64      	cmp	r3, #100	; 0x64
 80024f4:	d901      	bls.n	80024fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e207      	b.n	800290a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024fa:	4b5b      	ldr	r3, [pc, #364]	; (8002668 <HAL_RCC_OscConfig+0x240>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d0f0      	beq.n	80024e8 <HAL_RCC_OscConfig+0xc0>
 8002506:	e014      	b.n	8002532 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002508:	f7fe fd2e 	bl	8000f68 <HAL_GetTick>
 800250c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800250e:	e008      	b.n	8002522 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002510:	f7fe fd2a 	bl	8000f68 <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	2b64      	cmp	r3, #100	; 0x64
 800251c:	d901      	bls.n	8002522 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	e1f3      	b.n	800290a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002522:	4b51      	ldr	r3, [pc, #324]	; (8002668 <HAL_RCC_OscConfig+0x240>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d1f0      	bne.n	8002510 <HAL_RCC_OscConfig+0xe8>
 800252e:	e000      	b.n	8002532 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002530:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0302 	and.w	r3, r3, #2
 800253a:	2b00      	cmp	r3, #0
 800253c:	d063      	beq.n	8002606 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800253e:	4b4a      	ldr	r3, [pc, #296]	; (8002668 <HAL_RCC_OscConfig+0x240>)
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	f003 030c 	and.w	r3, r3, #12
 8002546:	2b00      	cmp	r3, #0
 8002548:	d00b      	beq.n	8002562 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800254a:	4b47      	ldr	r3, [pc, #284]	; (8002668 <HAL_RCC_OscConfig+0x240>)
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002552:	2b08      	cmp	r3, #8
 8002554:	d11c      	bne.n	8002590 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002556:	4b44      	ldr	r3, [pc, #272]	; (8002668 <HAL_RCC_OscConfig+0x240>)
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d116      	bne.n	8002590 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002562:	4b41      	ldr	r3, [pc, #260]	; (8002668 <HAL_RCC_OscConfig+0x240>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0302 	and.w	r3, r3, #2
 800256a:	2b00      	cmp	r3, #0
 800256c:	d005      	beq.n	800257a <HAL_RCC_OscConfig+0x152>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	68db      	ldr	r3, [r3, #12]
 8002572:	2b01      	cmp	r3, #1
 8002574:	d001      	beq.n	800257a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e1c7      	b.n	800290a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800257a:	4b3b      	ldr	r3, [pc, #236]	; (8002668 <HAL_RCC_OscConfig+0x240>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	691b      	ldr	r3, [r3, #16]
 8002586:	00db      	lsls	r3, r3, #3
 8002588:	4937      	ldr	r1, [pc, #220]	; (8002668 <HAL_RCC_OscConfig+0x240>)
 800258a:	4313      	orrs	r3, r2
 800258c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800258e:	e03a      	b.n	8002606 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d020      	beq.n	80025da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002598:	4b34      	ldr	r3, [pc, #208]	; (800266c <HAL_RCC_OscConfig+0x244>)
 800259a:	2201      	movs	r2, #1
 800259c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800259e:	f7fe fce3 	bl	8000f68 <HAL_GetTick>
 80025a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025a4:	e008      	b.n	80025b8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025a6:	f7fe fcdf 	bl	8000f68 <HAL_GetTick>
 80025aa:	4602      	mov	r2, r0
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	1ad3      	subs	r3, r2, r3
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	d901      	bls.n	80025b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80025b4:	2303      	movs	r3, #3
 80025b6:	e1a8      	b.n	800290a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025b8:	4b2b      	ldr	r3, [pc, #172]	; (8002668 <HAL_RCC_OscConfig+0x240>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0302 	and.w	r3, r3, #2
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d0f0      	beq.n	80025a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025c4:	4b28      	ldr	r3, [pc, #160]	; (8002668 <HAL_RCC_OscConfig+0x240>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	691b      	ldr	r3, [r3, #16]
 80025d0:	00db      	lsls	r3, r3, #3
 80025d2:	4925      	ldr	r1, [pc, #148]	; (8002668 <HAL_RCC_OscConfig+0x240>)
 80025d4:	4313      	orrs	r3, r2
 80025d6:	600b      	str	r3, [r1, #0]
 80025d8:	e015      	b.n	8002606 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025da:	4b24      	ldr	r3, [pc, #144]	; (800266c <HAL_RCC_OscConfig+0x244>)
 80025dc:	2200      	movs	r2, #0
 80025de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025e0:	f7fe fcc2 	bl	8000f68 <HAL_GetTick>
 80025e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025e6:	e008      	b.n	80025fa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025e8:	f7fe fcbe 	bl	8000f68 <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d901      	bls.n	80025fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	e187      	b.n	800290a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025fa:	4b1b      	ldr	r3, [pc, #108]	; (8002668 <HAL_RCC_OscConfig+0x240>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0302 	and.w	r3, r3, #2
 8002602:	2b00      	cmp	r3, #0
 8002604:	d1f0      	bne.n	80025e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0308 	and.w	r3, r3, #8
 800260e:	2b00      	cmp	r3, #0
 8002610:	d036      	beq.n	8002680 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	695b      	ldr	r3, [r3, #20]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d016      	beq.n	8002648 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800261a:	4b15      	ldr	r3, [pc, #84]	; (8002670 <HAL_RCC_OscConfig+0x248>)
 800261c:	2201      	movs	r2, #1
 800261e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002620:	f7fe fca2 	bl	8000f68 <HAL_GetTick>
 8002624:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002626:	e008      	b.n	800263a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002628:	f7fe fc9e 	bl	8000f68 <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	2b02      	cmp	r3, #2
 8002634:	d901      	bls.n	800263a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e167      	b.n	800290a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800263a:	4b0b      	ldr	r3, [pc, #44]	; (8002668 <HAL_RCC_OscConfig+0x240>)
 800263c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800263e:	f003 0302 	and.w	r3, r3, #2
 8002642:	2b00      	cmp	r3, #0
 8002644:	d0f0      	beq.n	8002628 <HAL_RCC_OscConfig+0x200>
 8002646:	e01b      	b.n	8002680 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002648:	4b09      	ldr	r3, [pc, #36]	; (8002670 <HAL_RCC_OscConfig+0x248>)
 800264a:	2200      	movs	r2, #0
 800264c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800264e:	f7fe fc8b 	bl	8000f68 <HAL_GetTick>
 8002652:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002654:	e00e      	b.n	8002674 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002656:	f7fe fc87 	bl	8000f68 <HAL_GetTick>
 800265a:	4602      	mov	r2, r0
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	2b02      	cmp	r3, #2
 8002662:	d907      	bls.n	8002674 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002664:	2303      	movs	r3, #3
 8002666:	e150      	b.n	800290a <HAL_RCC_OscConfig+0x4e2>
 8002668:	40023800 	.word	0x40023800
 800266c:	42470000 	.word	0x42470000
 8002670:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002674:	4b88      	ldr	r3, [pc, #544]	; (8002898 <HAL_RCC_OscConfig+0x470>)
 8002676:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002678:	f003 0302 	and.w	r3, r3, #2
 800267c:	2b00      	cmp	r3, #0
 800267e:	d1ea      	bne.n	8002656 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0304 	and.w	r3, r3, #4
 8002688:	2b00      	cmp	r3, #0
 800268a:	f000 8097 	beq.w	80027bc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800268e:	2300      	movs	r3, #0
 8002690:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002692:	4b81      	ldr	r3, [pc, #516]	; (8002898 <HAL_RCC_OscConfig+0x470>)
 8002694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002696:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d10f      	bne.n	80026be <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800269e:	2300      	movs	r3, #0
 80026a0:	60bb      	str	r3, [r7, #8]
 80026a2:	4b7d      	ldr	r3, [pc, #500]	; (8002898 <HAL_RCC_OscConfig+0x470>)
 80026a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a6:	4a7c      	ldr	r2, [pc, #496]	; (8002898 <HAL_RCC_OscConfig+0x470>)
 80026a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026ac:	6413      	str	r3, [r2, #64]	; 0x40
 80026ae:	4b7a      	ldr	r3, [pc, #488]	; (8002898 <HAL_RCC_OscConfig+0x470>)
 80026b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026b6:	60bb      	str	r3, [r7, #8]
 80026b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026ba:	2301      	movs	r3, #1
 80026bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026be:	4b77      	ldr	r3, [pc, #476]	; (800289c <HAL_RCC_OscConfig+0x474>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d118      	bne.n	80026fc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026ca:	4b74      	ldr	r3, [pc, #464]	; (800289c <HAL_RCC_OscConfig+0x474>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a73      	ldr	r2, [pc, #460]	; (800289c <HAL_RCC_OscConfig+0x474>)
 80026d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026d6:	f7fe fc47 	bl	8000f68 <HAL_GetTick>
 80026da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026dc:	e008      	b.n	80026f0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026de:	f7fe fc43 	bl	8000f68 <HAL_GetTick>
 80026e2:	4602      	mov	r2, r0
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d901      	bls.n	80026f0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80026ec:	2303      	movs	r3, #3
 80026ee:	e10c      	b.n	800290a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026f0:	4b6a      	ldr	r3, [pc, #424]	; (800289c <HAL_RCC_OscConfig+0x474>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d0f0      	beq.n	80026de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	2b01      	cmp	r3, #1
 8002702:	d106      	bne.n	8002712 <HAL_RCC_OscConfig+0x2ea>
 8002704:	4b64      	ldr	r3, [pc, #400]	; (8002898 <HAL_RCC_OscConfig+0x470>)
 8002706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002708:	4a63      	ldr	r2, [pc, #396]	; (8002898 <HAL_RCC_OscConfig+0x470>)
 800270a:	f043 0301 	orr.w	r3, r3, #1
 800270e:	6713      	str	r3, [r2, #112]	; 0x70
 8002710:	e01c      	b.n	800274c <HAL_RCC_OscConfig+0x324>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	2b05      	cmp	r3, #5
 8002718:	d10c      	bne.n	8002734 <HAL_RCC_OscConfig+0x30c>
 800271a:	4b5f      	ldr	r3, [pc, #380]	; (8002898 <HAL_RCC_OscConfig+0x470>)
 800271c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800271e:	4a5e      	ldr	r2, [pc, #376]	; (8002898 <HAL_RCC_OscConfig+0x470>)
 8002720:	f043 0304 	orr.w	r3, r3, #4
 8002724:	6713      	str	r3, [r2, #112]	; 0x70
 8002726:	4b5c      	ldr	r3, [pc, #368]	; (8002898 <HAL_RCC_OscConfig+0x470>)
 8002728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800272a:	4a5b      	ldr	r2, [pc, #364]	; (8002898 <HAL_RCC_OscConfig+0x470>)
 800272c:	f043 0301 	orr.w	r3, r3, #1
 8002730:	6713      	str	r3, [r2, #112]	; 0x70
 8002732:	e00b      	b.n	800274c <HAL_RCC_OscConfig+0x324>
 8002734:	4b58      	ldr	r3, [pc, #352]	; (8002898 <HAL_RCC_OscConfig+0x470>)
 8002736:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002738:	4a57      	ldr	r2, [pc, #348]	; (8002898 <HAL_RCC_OscConfig+0x470>)
 800273a:	f023 0301 	bic.w	r3, r3, #1
 800273e:	6713      	str	r3, [r2, #112]	; 0x70
 8002740:	4b55      	ldr	r3, [pc, #340]	; (8002898 <HAL_RCC_OscConfig+0x470>)
 8002742:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002744:	4a54      	ldr	r2, [pc, #336]	; (8002898 <HAL_RCC_OscConfig+0x470>)
 8002746:	f023 0304 	bic.w	r3, r3, #4
 800274a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d015      	beq.n	8002780 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002754:	f7fe fc08 	bl	8000f68 <HAL_GetTick>
 8002758:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800275a:	e00a      	b.n	8002772 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800275c:	f7fe fc04 	bl	8000f68 <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	f241 3288 	movw	r2, #5000	; 0x1388
 800276a:	4293      	cmp	r3, r2
 800276c:	d901      	bls.n	8002772 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e0cb      	b.n	800290a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002772:	4b49      	ldr	r3, [pc, #292]	; (8002898 <HAL_RCC_OscConfig+0x470>)
 8002774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002776:	f003 0302 	and.w	r3, r3, #2
 800277a:	2b00      	cmp	r3, #0
 800277c:	d0ee      	beq.n	800275c <HAL_RCC_OscConfig+0x334>
 800277e:	e014      	b.n	80027aa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002780:	f7fe fbf2 	bl	8000f68 <HAL_GetTick>
 8002784:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002786:	e00a      	b.n	800279e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002788:	f7fe fbee 	bl	8000f68 <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	f241 3288 	movw	r2, #5000	; 0x1388
 8002796:	4293      	cmp	r3, r2
 8002798:	d901      	bls.n	800279e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e0b5      	b.n	800290a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800279e:	4b3e      	ldr	r3, [pc, #248]	; (8002898 <HAL_RCC_OscConfig+0x470>)
 80027a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027a2:	f003 0302 	and.w	r3, r3, #2
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d1ee      	bne.n	8002788 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027aa:	7dfb      	ldrb	r3, [r7, #23]
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d105      	bne.n	80027bc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027b0:	4b39      	ldr	r3, [pc, #228]	; (8002898 <HAL_RCC_OscConfig+0x470>)
 80027b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b4:	4a38      	ldr	r2, [pc, #224]	; (8002898 <HAL_RCC_OscConfig+0x470>)
 80027b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027ba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	699b      	ldr	r3, [r3, #24]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	f000 80a1 	beq.w	8002908 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027c6:	4b34      	ldr	r3, [pc, #208]	; (8002898 <HAL_RCC_OscConfig+0x470>)
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	f003 030c 	and.w	r3, r3, #12
 80027ce:	2b08      	cmp	r3, #8
 80027d0:	d05c      	beq.n	800288c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	699b      	ldr	r3, [r3, #24]
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	d141      	bne.n	800285e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027da:	4b31      	ldr	r3, [pc, #196]	; (80028a0 <HAL_RCC_OscConfig+0x478>)
 80027dc:	2200      	movs	r2, #0
 80027de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e0:	f7fe fbc2 	bl	8000f68 <HAL_GetTick>
 80027e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027e6:	e008      	b.n	80027fa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027e8:	f7fe fbbe 	bl	8000f68 <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d901      	bls.n	80027fa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e087      	b.n	800290a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027fa:	4b27      	ldr	r3, [pc, #156]	; (8002898 <HAL_RCC_OscConfig+0x470>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d1f0      	bne.n	80027e8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	69da      	ldr	r2, [r3, #28]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6a1b      	ldr	r3, [r3, #32]
 800280e:	431a      	orrs	r2, r3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002814:	019b      	lsls	r3, r3, #6
 8002816:	431a      	orrs	r2, r3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800281c:	085b      	lsrs	r3, r3, #1
 800281e:	3b01      	subs	r3, #1
 8002820:	041b      	lsls	r3, r3, #16
 8002822:	431a      	orrs	r2, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002828:	061b      	lsls	r3, r3, #24
 800282a:	491b      	ldr	r1, [pc, #108]	; (8002898 <HAL_RCC_OscConfig+0x470>)
 800282c:	4313      	orrs	r3, r2
 800282e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002830:	4b1b      	ldr	r3, [pc, #108]	; (80028a0 <HAL_RCC_OscConfig+0x478>)
 8002832:	2201      	movs	r2, #1
 8002834:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002836:	f7fe fb97 	bl	8000f68 <HAL_GetTick>
 800283a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800283c:	e008      	b.n	8002850 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800283e:	f7fe fb93 	bl	8000f68 <HAL_GetTick>
 8002842:	4602      	mov	r2, r0
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	1ad3      	subs	r3, r2, r3
 8002848:	2b02      	cmp	r3, #2
 800284a:	d901      	bls.n	8002850 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800284c:	2303      	movs	r3, #3
 800284e:	e05c      	b.n	800290a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002850:	4b11      	ldr	r3, [pc, #68]	; (8002898 <HAL_RCC_OscConfig+0x470>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002858:	2b00      	cmp	r3, #0
 800285a:	d0f0      	beq.n	800283e <HAL_RCC_OscConfig+0x416>
 800285c:	e054      	b.n	8002908 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800285e:	4b10      	ldr	r3, [pc, #64]	; (80028a0 <HAL_RCC_OscConfig+0x478>)
 8002860:	2200      	movs	r2, #0
 8002862:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002864:	f7fe fb80 	bl	8000f68 <HAL_GetTick>
 8002868:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800286a:	e008      	b.n	800287e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800286c:	f7fe fb7c 	bl	8000f68 <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	2b02      	cmp	r3, #2
 8002878:	d901      	bls.n	800287e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e045      	b.n	800290a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800287e:	4b06      	ldr	r3, [pc, #24]	; (8002898 <HAL_RCC_OscConfig+0x470>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d1f0      	bne.n	800286c <HAL_RCC_OscConfig+0x444>
 800288a:	e03d      	b.n	8002908 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	699b      	ldr	r3, [r3, #24]
 8002890:	2b01      	cmp	r3, #1
 8002892:	d107      	bne.n	80028a4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e038      	b.n	800290a <HAL_RCC_OscConfig+0x4e2>
 8002898:	40023800 	.word	0x40023800
 800289c:	40007000 	.word	0x40007000
 80028a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80028a4:	4b1b      	ldr	r3, [pc, #108]	; (8002914 <HAL_RCC_OscConfig+0x4ec>)
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	699b      	ldr	r3, [r3, #24]
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d028      	beq.n	8002904 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028bc:	429a      	cmp	r2, r3
 80028be:	d121      	bne.n	8002904 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d11a      	bne.n	8002904 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028ce:	68fa      	ldr	r2, [r7, #12]
 80028d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80028d4:	4013      	ands	r3, r2
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80028da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028dc:	4293      	cmp	r3, r2
 80028de:	d111      	bne.n	8002904 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ea:	085b      	lsrs	r3, r3, #1
 80028ec:	3b01      	subs	r3, #1
 80028ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d107      	bne.n	8002904 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002900:	429a      	cmp	r2, r3
 8002902:	d001      	beq.n	8002908 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	e000      	b.n	800290a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002908:	2300      	movs	r3, #0
}
 800290a:	4618      	mov	r0, r3
 800290c:	3718      	adds	r7, #24
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	40023800 	.word	0x40023800

08002918 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b084      	sub	sp, #16
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d101      	bne.n	800292c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e0cc      	b.n	8002ac6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800292c:	4b68      	ldr	r3, [pc, #416]	; (8002ad0 <HAL_RCC_ClockConfig+0x1b8>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0307 	and.w	r3, r3, #7
 8002934:	683a      	ldr	r2, [r7, #0]
 8002936:	429a      	cmp	r2, r3
 8002938:	d90c      	bls.n	8002954 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800293a:	4b65      	ldr	r3, [pc, #404]	; (8002ad0 <HAL_RCC_ClockConfig+0x1b8>)
 800293c:	683a      	ldr	r2, [r7, #0]
 800293e:	b2d2      	uxtb	r2, r2
 8002940:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002942:	4b63      	ldr	r3, [pc, #396]	; (8002ad0 <HAL_RCC_ClockConfig+0x1b8>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0307 	and.w	r3, r3, #7
 800294a:	683a      	ldr	r2, [r7, #0]
 800294c:	429a      	cmp	r2, r3
 800294e:	d001      	beq.n	8002954 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e0b8      	b.n	8002ac6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 0302 	and.w	r3, r3, #2
 800295c:	2b00      	cmp	r3, #0
 800295e:	d020      	beq.n	80029a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 0304 	and.w	r3, r3, #4
 8002968:	2b00      	cmp	r3, #0
 800296a:	d005      	beq.n	8002978 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800296c:	4b59      	ldr	r3, [pc, #356]	; (8002ad4 <HAL_RCC_ClockConfig+0x1bc>)
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	4a58      	ldr	r2, [pc, #352]	; (8002ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8002972:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002976:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 0308 	and.w	r3, r3, #8
 8002980:	2b00      	cmp	r3, #0
 8002982:	d005      	beq.n	8002990 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002984:	4b53      	ldr	r3, [pc, #332]	; (8002ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	4a52      	ldr	r2, [pc, #328]	; (8002ad4 <HAL_RCC_ClockConfig+0x1bc>)
 800298a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800298e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002990:	4b50      	ldr	r3, [pc, #320]	; (8002ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	494d      	ldr	r1, [pc, #308]	; (8002ad4 <HAL_RCC_ClockConfig+0x1bc>)
 800299e:	4313      	orrs	r3, r2
 80029a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0301 	and.w	r3, r3, #1
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d044      	beq.n	8002a38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d107      	bne.n	80029c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029b6:	4b47      	ldr	r3, [pc, #284]	; (8002ad4 <HAL_RCC_ClockConfig+0x1bc>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d119      	bne.n	80029f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e07f      	b.n	8002ac6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d003      	beq.n	80029d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029d2:	2b03      	cmp	r3, #3
 80029d4:	d107      	bne.n	80029e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029d6:	4b3f      	ldr	r3, [pc, #252]	; (8002ad4 <HAL_RCC_ClockConfig+0x1bc>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d109      	bne.n	80029f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e06f      	b.n	8002ac6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029e6:	4b3b      	ldr	r3, [pc, #236]	; (8002ad4 <HAL_RCC_ClockConfig+0x1bc>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0302 	and.w	r3, r3, #2
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d101      	bne.n	80029f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e067      	b.n	8002ac6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029f6:	4b37      	ldr	r3, [pc, #220]	; (8002ad4 <HAL_RCC_ClockConfig+0x1bc>)
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	f023 0203 	bic.w	r2, r3, #3
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	4934      	ldr	r1, [pc, #208]	; (8002ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a04:	4313      	orrs	r3, r2
 8002a06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a08:	f7fe faae 	bl	8000f68 <HAL_GetTick>
 8002a0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a0e:	e00a      	b.n	8002a26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a10:	f7fe faaa 	bl	8000f68 <HAL_GetTick>
 8002a14:	4602      	mov	r2, r0
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d901      	bls.n	8002a26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e04f      	b.n	8002ac6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a26:	4b2b      	ldr	r3, [pc, #172]	; (8002ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	f003 020c 	and.w	r2, r3, #12
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d1eb      	bne.n	8002a10 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a38:	4b25      	ldr	r3, [pc, #148]	; (8002ad0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 0307 	and.w	r3, r3, #7
 8002a40:	683a      	ldr	r2, [r7, #0]
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d20c      	bcs.n	8002a60 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a46:	4b22      	ldr	r3, [pc, #136]	; (8002ad0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a48:	683a      	ldr	r2, [r7, #0]
 8002a4a:	b2d2      	uxtb	r2, r2
 8002a4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a4e:	4b20      	ldr	r3, [pc, #128]	; (8002ad0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0307 	and.w	r3, r3, #7
 8002a56:	683a      	ldr	r2, [r7, #0]
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d001      	beq.n	8002a60 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e032      	b.n	8002ac6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0304 	and.w	r3, r3, #4
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d008      	beq.n	8002a7e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a6c:	4b19      	ldr	r3, [pc, #100]	; (8002ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	4916      	ldr	r1, [pc, #88]	; (8002ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0308 	and.w	r3, r3, #8
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d009      	beq.n	8002a9e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a8a:	4b12      	ldr	r3, [pc, #72]	; (8002ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	691b      	ldr	r3, [r3, #16]
 8002a96:	00db      	lsls	r3, r3, #3
 8002a98:	490e      	ldr	r1, [pc, #56]	; (8002ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a9e:	f000 f821 	bl	8002ae4 <HAL_RCC_GetSysClockFreq>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	4b0b      	ldr	r3, [pc, #44]	; (8002ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	091b      	lsrs	r3, r3, #4
 8002aaa:	f003 030f 	and.w	r3, r3, #15
 8002aae:	490a      	ldr	r1, [pc, #40]	; (8002ad8 <HAL_RCC_ClockConfig+0x1c0>)
 8002ab0:	5ccb      	ldrb	r3, [r1, r3]
 8002ab2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ab6:	4a09      	ldr	r2, [pc, #36]	; (8002adc <HAL_RCC_ClockConfig+0x1c4>)
 8002ab8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002aba:	4b09      	ldr	r3, [pc, #36]	; (8002ae0 <HAL_RCC_ClockConfig+0x1c8>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f7fe fa0e 	bl	8000ee0 <HAL_InitTick>

  return HAL_OK;
 8002ac4:	2300      	movs	r3, #0
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3710      	adds	r7, #16
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	40023c00 	.word	0x40023c00
 8002ad4:	40023800 	.word	0x40023800
 8002ad8:	08004bb4 	.word	0x08004bb4
 8002adc:	20000000 	.word	0x20000000
 8002ae0:	20000004 	.word	0x20000004

08002ae4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ae4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ae8:	b094      	sub	sp, #80	; 0x50
 8002aea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002aec:	2300      	movs	r3, #0
 8002aee:	647b      	str	r3, [r7, #68]	; 0x44
 8002af0:	2300      	movs	r3, #0
 8002af2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002af4:	2300      	movs	r3, #0
 8002af6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002af8:	2300      	movs	r3, #0
 8002afa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002afc:	4b79      	ldr	r3, [pc, #484]	; (8002ce4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	f003 030c 	and.w	r3, r3, #12
 8002b04:	2b08      	cmp	r3, #8
 8002b06:	d00d      	beq.n	8002b24 <HAL_RCC_GetSysClockFreq+0x40>
 8002b08:	2b08      	cmp	r3, #8
 8002b0a:	f200 80e1 	bhi.w	8002cd0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d002      	beq.n	8002b18 <HAL_RCC_GetSysClockFreq+0x34>
 8002b12:	2b04      	cmp	r3, #4
 8002b14:	d003      	beq.n	8002b1e <HAL_RCC_GetSysClockFreq+0x3a>
 8002b16:	e0db      	b.n	8002cd0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b18:	4b73      	ldr	r3, [pc, #460]	; (8002ce8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002b1a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002b1c:	e0db      	b.n	8002cd6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b1e:	4b73      	ldr	r3, [pc, #460]	; (8002cec <HAL_RCC_GetSysClockFreq+0x208>)
 8002b20:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b22:	e0d8      	b.n	8002cd6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b24:	4b6f      	ldr	r3, [pc, #444]	; (8002ce4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b2c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b2e:	4b6d      	ldr	r3, [pc, #436]	; (8002ce4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d063      	beq.n	8002c02 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b3a:	4b6a      	ldr	r3, [pc, #424]	; (8002ce4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	099b      	lsrs	r3, r3, #6
 8002b40:	2200      	movs	r2, #0
 8002b42:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b44:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b4c:	633b      	str	r3, [r7, #48]	; 0x30
 8002b4e:	2300      	movs	r3, #0
 8002b50:	637b      	str	r3, [r7, #52]	; 0x34
 8002b52:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002b56:	4622      	mov	r2, r4
 8002b58:	462b      	mov	r3, r5
 8002b5a:	f04f 0000 	mov.w	r0, #0
 8002b5e:	f04f 0100 	mov.w	r1, #0
 8002b62:	0159      	lsls	r1, r3, #5
 8002b64:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b68:	0150      	lsls	r0, r2, #5
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	460b      	mov	r3, r1
 8002b6e:	4621      	mov	r1, r4
 8002b70:	1a51      	subs	r1, r2, r1
 8002b72:	6139      	str	r1, [r7, #16]
 8002b74:	4629      	mov	r1, r5
 8002b76:	eb63 0301 	sbc.w	r3, r3, r1
 8002b7a:	617b      	str	r3, [r7, #20]
 8002b7c:	f04f 0200 	mov.w	r2, #0
 8002b80:	f04f 0300 	mov.w	r3, #0
 8002b84:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002b88:	4659      	mov	r1, fp
 8002b8a:	018b      	lsls	r3, r1, #6
 8002b8c:	4651      	mov	r1, sl
 8002b8e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b92:	4651      	mov	r1, sl
 8002b94:	018a      	lsls	r2, r1, #6
 8002b96:	4651      	mov	r1, sl
 8002b98:	ebb2 0801 	subs.w	r8, r2, r1
 8002b9c:	4659      	mov	r1, fp
 8002b9e:	eb63 0901 	sbc.w	r9, r3, r1
 8002ba2:	f04f 0200 	mov.w	r2, #0
 8002ba6:	f04f 0300 	mov.w	r3, #0
 8002baa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002bae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002bb2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002bb6:	4690      	mov	r8, r2
 8002bb8:	4699      	mov	r9, r3
 8002bba:	4623      	mov	r3, r4
 8002bbc:	eb18 0303 	adds.w	r3, r8, r3
 8002bc0:	60bb      	str	r3, [r7, #8]
 8002bc2:	462b      	mov	r3, r5
 8002bc4:	eb49 0303 	adc.w	r3, r9, r3
 8002bc8:	60fb      	str	r3, [r7, #12]
 8002bca:	f04f 0200 	mov.w	r2, #0
 8002bce:	f04f 0300 	mov.w	r3, #0
 8002bd2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002bd6:	4629      	mov	r1, r5
 8002bd8:	024b      	lsls	r3, r1, #9
 8002bda:	4621      	mov	r1, r4
 8002bdc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002be0:	4621      	mov	r1, r4
 8002be2:	024a      	lsls	r2, r1, #9
 8002be4:	4610      	mov	r0, r2
 8002be6:	4619      	mov	r1, r3
 8002be8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bea:	2200      	movs	r2, #0
 8002bec:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bee:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002bf0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002bf4:	f7fd fb44 	bl	8000280 <__aeabi_uldivmod>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	460b      	mov	r3, r1
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c00:	e058      	b.n	8002cb4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c02:	4b38      	ldr	r3, [pc, #224]	; (8002ce4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	099b      	lsrs	r3, r3, #6
 8002c08:	2200      	movs	r2, #0
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	4611      	mov	r1, r2
 8002c0e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002c12:	623b      	str	r3, [r7, #32]
 8002c14:	2300      	movs	r3, #0
 8002c16:	627b      	str	r3, [r7, #36]	; 0x24
 8002c18:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002c1c:	4642      	mov	r2, r8
 8002c1e:	464b      	mov	r3, r9
 8002c20:	f04f 0000 	mov.w	r0, #0
 8002c24:	f04f 0100 	mov.w	r1, #0
 8002c28:	0159      	lsls	r1, r3, #5
 8002c2a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c2e:	0150      	lsls	r0, r2, #5
 8002c30:	4602      	mov	r2, r0
 8002c32:	460b      	mov	r3, r1
 8002c34:	4641      	mov	r1, r8
 8002c36:	ebb2 0a01 	subs.w	sl, r2, r1
 8002c3a:	4649      	mov	r1, r9
 8002c3c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c40:	f04f 0200 	mov.w	r2, #0
 8002c44:	f04f 0300 	mov.w	r3, #0
 8002c48:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002c4c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002c50:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002c54:	ebb2 040a 	subs.w	r4, r2, sl
 8002c58:	eb63 050b 	sbc.w	r5, r3, fp
 8002c5c:	f04f 0200 	mov.w	r2, #0
 8002c60:	f04f 0300 	mov.w	r3, #0
 8002c64:	00eb      	lsls	r3, r5, #3
 8002c66:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c6a:	00e2      	lsls	r2, r4, #3
 8002c6c:	4614      	mov	r4, r2
 8002c6e:	461d      	mov	r5, r3
 8002c70:	4643      	mov	r3, r8
 8002c72:	18e3      	adds	r3, r4, r3
 8002c74:	603b      	str	r3, [r7, #0]
 8002c76:	464b      	mov	r3, r9
 8002c78:	eb45 0303 	adc.w	r3, r5, r3
 8002c7c:	607b      	str	r3, [r7, #4]
 8002c7e:	f04f 0200 	mov.w	r2, #0
 8002c82:	f04f 0300 	mov.w	r3, #0
 8002c86:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c8a:	4629      	mov	r1, r5
 8002c8c:	028b      	lsls	r3, r1, #10
 8002c8e:	4621      	mov	r1, r4
 8002c90:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c94:	4621      	mov	r1, r4
 8002c96:	028a      	lsls	r2, r1, #10
 8002c98:	4610      	mov	r0, r2
 8002c9a:	4619      	mov	r1, r3
 8002c9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	61bb      	str	r3, [r7, #24]
 8002ca2:	61fa      	str	r2, [r7, #28]
 8002ca4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ca8:	f7fd faea 	bl	8000280 <__aeabi_uldivmod>
 8002cac:	4602      	mov	r2, r0
 8002cae:	460b      	mov	r3, r1
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002cb4:	4b0b      	ldr	r3, [pc, #44]	; (8002ce4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	0c1b      	lsrs	r3, r3, #16
 8002cba:	f003 0303 	and.w	r3, r3, #3
 8002cbe:	3301      	adds	r3, #1
 8002cc0:	005b      	lsls	r3, r3, #1
 8002cc2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002cc4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002cc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ccc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002cce:	e002      	b.n	8002cd6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002cd0:	4b05      	ldr	r3, [pc, #20]	; (8002ce8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002cd2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002cd4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3750      	adds	r7, #80	; 0x50
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ce2:	bf00      	nop
 8002ce4:	40023800 	.word	0x40023800
 8002ce8:	00f42400 	.word	0x00f42400
 8002cec:	007a1200 	.word	0x007a1200

08002cf0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cf4:	4b03      	ldr	r3, [pc, #12]	; (8002d04 <HAL_RCC_GetHCLKFreq+0x14>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop
 8002d04:	20000000 	.word	0x20000000

08002d08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002d0c:	f7ff fff0 	bl	8002cf0 <HAL_RCC_GetHCLKFreq>
 8002d10:	4602      	mov	r2, r0
 8002d12:	4b05      	ldr	r3, [pc, #20]	; (8002d28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	0a9b      	lsrs	r3, r3, #10
 8002d18:	f003 0307 	and.w	r3, r3, #7
 8002d1c:	4903      	ldr	r1, [pc, #12]	; (8002d2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d1e:	5ccb      	ldrb	r3, [r1, r3]
 8002d20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	40023800 	.word	0x40023800
 8002d2c:	08004bc4 	.word	0x08004bc4

08002d30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002d34:	f7ff ffdc 	bl	8002cf0 <HAL_RCC_GetHCLKFreq>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	4b05      	ldr	r3, [pc, #20]	; (8002d50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	0b5b      	lsrs	r3, r3, #13
 8002d40:	f003 0307 	and.w	r3, r3, #7
 8002d44:	4903      	ldr	r1, [pc, #12]	; (8002d54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d46:	5ccb      	ldrb	r3, [r1, r3]
 8002d48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	40023800 	.word	0x40023800
 8002d54:	08004bc4 	.word	0x08004bc4

08002d58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b082      	sub	sp, #8
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d101      	bne.n	8002d6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e041      	b.n	8002dee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d106      	bne.n	8002d84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f7fd ff0e 	bl	8000ba0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2202      	movs	r2, #2
 8002d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	3304      	adds	r3, #4
 8002d94:	4619      	mov	r1, r3
 8002d96:	4610      	mov	r0, r2
 8002d98:	f000 f950 	bl	800303c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2201      	movs	r2, #1
 8002da8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2201      	movs	r2, #1
 8002db0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2201      	movs	r2, #1
 8002db8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2201      	movs	r2, #1
 8002de0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2201      	movs	r2, #1
 8002de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002dec:	2300      	movs	r3, #0
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3708      	adds	r7, #8
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
	...

08002df8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b085      	sub	sp, #20
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d001      	beq.n	8002e10 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e03c      	b.n	8002e8a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2202      	movs	r2, #2
 8002e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a1e      	ldr	r2, [pc, #120]	; (8002e98 <HAL_TIM_Base_Start+0xa0>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d018      	beq.n	8002e54 <HAL_TIM_Base_Start+0x5c>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e2a:	d013      	beq.n	8002e54 <HAL_TIM_Base_Start+0x5c>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a1a      	ldr	r2, [pc, #104]	; (8002e9c <HAL_TIM_Base_Start+0xa4>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d00e      	beq.n	8002e54 <HAL_TIM_Base_Start+0x5c>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a19      	ldr	r2, [pc, #100]	; (8002ea0 <HAL_TIM_Base_Start+0xa8>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d009      	beq.n	8002e54 <HAL_TIM_Base_Start+0x5c>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a17      	ldr	r2, [pc, #92]	; (8002ea4 <HAL_TIM_Base_Start+0xac>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d004      	beq.n	8002e54 <HAL_TIM_Base_Start+0x5c>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a16      	ldr	r2, [pc, #88]	; (8002ea8 <HAL_TIM_Base_Start+0xb0>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d111      	bne.n	8002e78 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	f003 0307 	and.w	r3, r3, #7
 8002e5e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2b06      	cmp	r3, #6
 8002e64:	d010      	beq.n	8002e88 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f042 0201 	orr.w	r2, r2, #1
 8002e74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e76:	e007      	b.n	8002e88 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f042 0201 	orr.w	r2, r2, #1
 8002e86:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e88:	2300      	movs	r3, #0
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3714      	adds	r7, #20
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr
 8002e96:	bf00      	nop
 8002e98:	40010000 	.word	0x40010000
 8002e9c:	40000400 	.word	0x40000400
 8002ea0:	40000800 	.word	0x40000800
 8002ea4:	40000c00 	.word	0x40000c00
 8002ea8:	40014000 	.word	0x40014000

08002eac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d101      	bne.n	8002ec8 <HAL_TIM_ConfigClockSource+0x1c>
 8002ec4:	2302      	movs	r3, #2
 8002ec6:	e0b4      	b.n	8003032 <HAL_TIM_ConfigClockSource+0x186>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2202      	movs	r2, #2
 8002ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002ee6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002eee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	68ba      	ldr	r2, [r7, #8]
 8002ef6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f00:	d03e      	beq.n	8002f80 <HAL_TIM_ConfigClockSource+0xd4>
 8002f02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f06:	f200 8087 	bhi.w	8003018 <HAL_TIM_ConfigClockSource+0x16c>
 8002f0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f0e:	f000 8086 	beq.w	800301e <HAL_TIM_ConfigClockSource+0x172>
 8002f12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f16:	d87f      	bhi.n	8003018 <HAL_TIM_ConfigClockSource+0x16c>
 8002f18:	2b70      	cmp	r3, #112	; 0x70
 8002f1a:	d01a      	beq.n	8002f52 <HAL_TIM_ConfigClockSource+0xa6>
 8002f1c:	2b70      	cmp	r3, #112	; 0x70
 8002f1e:	d87b      	bhi.n	8003018 <HAL_TIM_ConfigClockSource+0x16c>
 8002f20:	2b60      	cmp	r3, #96	; 0x60
 8002f22:	d050      	beq.n	8002fc6 <HAL_TIM_ConfigClockSource+0x11a>
 8002f24:	2b60      	cmp	r3, #96	; 0x60
 8002f26:	d877      	bhi.n	8003018 <HAL_TIM_ConfigClockSource+0x16c>
 8002f28:	2b50      	cmp	r3, #80	; 0x50
 8002f2a:	d03c      	beq.n	8002fa6 <HAL_TIM_ConfigClockSource+0xfa>
 8002f2c:	2b50      	cmp	r3, #80	; 0x50
 8002f2e:	d873      	bhi.n	8003018 <HAL_TIM_ConfigClockSource+0x16c>
 8002f30:	2b40      	cmp	r3, #64	; 0x40
 8002f32:	d058      	beq.n	8002fe6 <HAL_TIM_ConfigClockSource+0x13a>
 8002f34:	2b40      	cmp	r3, #64	; 0x40
 8002f36:	d86f      	bhi.n	8003018 <HAL_TIM_ConfigClockSource+0x16c>
 8002f38:	2b30      	cmp	r3, #48	; 0x30
 8002f3a:	d064      	beq.n	8003006 <HAL_TIM_ConfigClockSource+0x15a>
 8002f3c:	2b30      	cmp	r3, #48	; 0x30
 8002f3e:	d86b      	bhi.n	8003018 <HAL_TIM_ConfigClockSource+0x16c>
 8002f40:	2b20      	cmp	r3, #32
 8002f42:	d060      	beq.n	8003006 <HAL_TIM_ConfigClockSource+0x15a>
 8002f44:	2b20      	cmp	r3, #32
 8002f46:	d867      	bhi.n	8003018 <HAL_TIM_ConfigClockSource+0x16c>
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d05c      	beq.n	8003006 <HAL_TIM_ConfigClockSource+0x15a>
 8002f4c:	2b10      	cmp	r3, #16
 8002f4e:	d05a      	beq.n	8003006 <HAL_TIM_ConfigClockSource+0x15a>
 8002f50:	e062      	b.n	8003018 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6818      	ldr	r0, [r3, #0]
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	6899      	ldr	r1, [r3, #8]
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	685a      	ldr	r2, [r3, #4]
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	68db      	ldr	r3, [r3, #12]
 8002f62:	f000 f965 	bl	8003230 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002f74:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	68ba      	ldr	r2, [r7, #8]
 8002f7c:	609a      	str	r2, [r3, #8]
      break;
 8002f7e:	e04f      	b.n	8003020 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6818      	ldr	r0, [r3, #0]
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	6899      	ldr	r1, [r3, #8]
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	685a      	ldr	r2, [r3, #4]
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	f000 f94e 	bl	8003230 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	689a      	ldr	r2, [r3, #8]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002fa2:	609a      	str	r2, [r3, #8]
      break;
 8002fa4:	e03c      	b.n	8003020 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6818      	ldr	r0, [r3, #0]
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	6859      	ldr	r1, [r3, #4]
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	68db      	ldr	r3, [r3, #12]
 8002fb2:	461a      	mov	r2, r3
 8002fb4:	f000 f8c2 	bl	800313c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	2150      	movs	r1, #80	; 0x50
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f000 f91b 	bl	80031fa <TIM_ITRx_SetConfig>
      break;
 8002fc4:	e02c      	b.n	8003020 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6818      	ldr	r0, [r3, #0]
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	6859      	ldr	r1, [r3, #4]
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	68db      	ldr	r3, [r3, #12]
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	f000 f8e1 	bl	800319a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	2160      	movs	r1, #96	; 0x60
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f000 f90b 	bl	80031fa <TIM_ITRx_SetConfig>
      break;
 8002fe4:	e01c      	b.n	8003020 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6818      	ldr	r0, [r3, #0]
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	6859      	ldr	r1, [r3, #4]
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	68db      	ldr	r3, [r3, #12]
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	f000 f8a2 	bl	800313c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	2140      	movs	r1, #64	; 0x40
 8002ffe:	4618      	mov	r0, r3
 8003000:	f000 f8fb 	bl	80031fa <TIM_ITRx_SetConfig>
      break;
 8003004:	e00c      	b.n	8003020 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4619      	mov	r1, r3
 8003010:	4610      	mov	r0, r2
 8003012:	f000 f8f2 	bl	80031fa <TIM_ITRx_SetConfig>
      break;
 8003016:	e003      	b.n	8003020 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	73fb      	strb	r3, [r7, #15]
      break;
 800301c:	e000      	b.n	8003020 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800301e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2201      	movs	r2, #1
 8003024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2200      	movs	r2, #0
 800302c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003030:	7bfb      	ldrb	r3, [r7, #15]
}
 8003032:	4618      	mov	r0, r3
 8003034:	3710      	adds	r7, #16
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
	...

0800303c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800303c:	b480      	push	{r7}
 800303e:	b085      	sub	sp, #20
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	4a34      	ldr	r2, [pc, #208]	; (8003120 <TIM_Base_SetConfig+0xe4>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d00f      	beq.n	8003074 <TIM_Base_SetConfig+0x38>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800305a:	d00b      	beq.n	8003074 <TIM_Base_SetConfig+0x38>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	4a31      	ldr	r2, [pc, #196]	; (8003124 <TIM_Base_SetConfig+0xe8>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d007      	beq.n	8003074 <TIM_Base_SetConfig+0x38>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	4a30      	ldr	r2, [pc, #192]	; (8003128 <TIM_Base_SetConfig+0xec>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d003      	beq.n	8003074 <TIM_Base_SetConfig+0x38>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	4a2f      	ldr	r2, [pc, #188]	; (800312c <TIM_Base_SetConfig+0xf0>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d108      	bne.n	8003086 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800307a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	68fa      	ldr	r2, [r7, #12]
 8003082:	4313      	orrs	r3, r2
 8003084:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	4a25      	ldr	r2, [pc, #148]	; (8003120 <TIM_Base_SetConfig+0xe4>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d01b      	beq.n	80030c6 <TIM_Base_SetConfig+0x8a>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003094:	d017      	beq.n	80030c6 <TIM_Base_SetConfig+0x8a>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	4a22      	ldr	r2, [pc, #136]	; (8003124 <TIM_Base_SetConfig+0xe8>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d013      	beq.n	80030c6 <TIM_Base_SetConfig+0x8a>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	4a21      	ldr	r2, [pc, #132]	; (8003128 <TIM_Base_SetConfig+0xec>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d00f      	beq.n	80030c6 <TIM_Base_SetConfig+0x8a>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4a20      	ldr	r2, [pc, #128]	; (800312c <TIM_Base_SetConfig+0xf0>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d00b      	beq.n	80030c6 <TIM_Base_SetConfig+0x8a>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	4a1f      	ldr	r2, [pc, #124]	; (8003130 <TIM_Base_SetConfig+0xf4>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d007      	beq.n	80030c6 <TIM_Base_SetConfig+0x8a>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a1e      	ldr	r2, [pc, #120]	; (8003134 <TIM_Base_SetConfig+0xf8>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d003      	beq.n	80030c6 <TIM_Base_SetConfig+0x8a>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a1d      	ldr	r2, [pc, #116]	; (8003138 <TIM_Base_SetConfig+0xfc>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d108      	bne.n	80030d8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	68fa      	ldr	r2, [r7, #12]
 80030d4:	4313      	orrs	r3, r2
 80030d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	695b      	ldr	r3, [r3, #20]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	68fa      	ldr	r2, [r7, #12]
 80030ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	689a      	ldr	r2, [r3, #8]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	4a08      	ldr	r2, [pc, #32]	; (8003120 <TIM_Base_SetConfig+0xe4>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d103      	bne.n	800310c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	691a      	ldr	r2, [r3, #16]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2201      	movs	r2, #1
 8003110:	615a      	str	r2, [r3, #20]
}
 8003112:	bf00      	nop
 8003114:	3714      	adds	r7, #20
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr
 800311e:	bf00      	nop
 8003120:	40010000 	.word	0x40010000
 8003124:	40000400 	.word	0x40000400
 8003128:	40000800 	.word	0x40000800
 800312c:	40000c00 	.word	0x40000c00
 8003130:	40014000 	.word	0x40014000
 8003134:	40014400 	.word	0x40014400
 8003138:	40014800 	.word	0x40014800

0800313c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800313c:	b480      	push	{r7}
 800313e:	b087      	sub	sp, #28
 8003140:	af00      	add	r7, sp, #0
 8003142:	60f8      	str	r0, [r7, #12]
 8003144:	60b9      	str	r1, [r7, #8]
 8003146:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	6a1b      	ldr	r3, [r3, #32]
 800314c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	6a1b      	ldr	r3, [r3, #32]
 8003152:	f023 0201 	bic.w	r2, r3, #1
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	699b      	ldr	r3, [r3, #24]
 800315e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003166:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	011b      	lsls	r3, r3, #4
 800316c:	693a      	ldr	r2, [r7, #16]
 800316e:	4313      	orrs	r3, r2
 8003170:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	f023 030a 	bic.w	r3, r3, #10
 8003178:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800317a:	697a      	ldr	r2, [r7, #20]
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	4313      	orrs	r3, r2
 8003180:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	693a      	ldr	r2, [r7, #16]
 8003186:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	697a      	ldr	r2, [r7, #20]
 800318c:	621a      	str	r2, [r3, #32]
}
 800318e:	bf00      	nop
 8003190:	371c      	adds	r7, #28
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr

0800319a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800319a:	b480      	push	{r7}
 800319c:	b087      	sub	sp, #28
 800319e:	af00      	add	r7, sp, #0
 80031a0:	60f8      	str	r0, [r7, #12]
 80031a2:	60b9      	str	r1, [r7, #8]
 80031a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	6a1b      	ldr	r3, [r3, #32]
 80031aa:	f023 0210 	bic.w	r2, r3, #16
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	699b      	ldr	r3, [r3, #24]
 80031b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	6a1b      	ldr	r3, [r3, #32]
 80031bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80031c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	031b      	lsls	r3, r3, #12
 80031ca:	697a      	ldr	r2, [r7, #20]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80031d6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	011b      	lsls	r3, r3, #4
 80031dc:	693a      	ldr	r2, [r7, #16]
 80031de:	4313      	orrs	r3, r2
 80031e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	697a      	ldr	r2, [r7, #20]
 80031e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	693a      	ldr	r2, [r7, #16]
 80031ec:	621a      	str	r2, [r3, #32]
}
 80031ee:	bf00      	nop
 80031f0:	371c      	adds	r7, #28
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr

080031fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80031fa:	b480      	push	{r7}
 80031fc:	b085      	sub	sp, #20
 80031fe:	af00      	add	r7, sp, #0
 8003200:	6078      	str	r0, [r7, #4]
 8003202:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003210:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003212:	683a      	ldr	r2, [r7, #0]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	4313      	orrs	r3, r2
 8003218:	f043 0307 	orr.w	r3, r3, #7
 800321c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	68fa      	ldr	r2, [r7, #12]
 8003222:	609a      	str	r2, [r3, #8]
}
 8003224:	bf00      	nop
 8003226:	3714      	adds	r7, #20
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr

08003230 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003230:	b480      	push	{r7}
 8003232:	b087      	sub	sp, #28
 8003234:	af00      	add	r7, sp, #0
 8003236:	60f8      	str	r0, [r7, #12]
 8003238:	60b9      	str	r1, [r7, #8]
 800323a:	607a      	str	r2, [r7, #4]
 800323c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800324a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	021a      	lsls	r2, r3, #8
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	431a      	orrs	r2, r3
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	4313      	orrs	r3, r2
 8003258:	697a      	ldr	r2, [r7, #20]
 800325a:	4313      	orrs	r3, r2
 800325c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	697a      	ldr	r2, [r7, #20]
 8003262:	609a      	str	r2, [r3, #8]
}
 8003264:	bf00      	nop
 8003266:	371c      	adds	r7, #28
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr

08003270 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003270:	b480      	push	{r7}
 8003272:	b085      	sub	sp, #20
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
 8003278:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003280:	2b01      	cmp	r3, #1
 8003282:	d101      	bne.n	8003288 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003284:	2302      	movs	r3, #2
 8003286:	e050      	b.n	800332a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2201      	movs	r2, #1
 800328c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2202      	movs	r2, #2
 8003294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	68fa      	ldr	r2, [r7, #12]
 80032b6:	4313      	orrs	r3, r2
 80032b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	68fa      	ldr	r2, [r7, #12]
 80032c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a1c      	ldr	r2, [pc, #112]	; (8003338 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d018      	beq.n	80032fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032d4:	d013      	beq.n	80032fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a18      	ldr	r2, [pc, #96]	; (800333c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d00e      	beq.n	80032fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a16      	ldr	r2, [pc, #88]	; (8003340 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d009      	beq.n	80032fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a15      	ldr	r2, [pc, #84]	; (8003344 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d004      	beq.n	80032fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a13      	ldr	r2, [pc, #76]	; (8003348 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d10c      	bne.n	8003318 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003304:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	68ba      	ldr	r2, [r7, #8]
 800330c:	4313      	orrs	r3, r2
 800330e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	68ba      	ldr	r2, [r7, #8]
 8003316:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2201      	movs	r2, #1
 800331c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003328:	2300      	movs	r3, #0
}
 800332a:	4618      	mov	r0, r3
 800332c:	3714      	adds	r7, #20
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr
 8003336:	bf00      	nop
 8003338:	40010000 	.word	0x40010000
 800333c:	40000400 	.word	0x40000400
 8003340:	40000800 	.word	0x40000800
 8003344:	40000c00 	.word	0x40000c00
 8003348:	40014000 	.word	0x40014000

0800334c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b082      	sub	sp, #8
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d101      	bne.n	800335e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e03f      	b.n	80033de <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003364:	b2db      	uxtb	r3, r3
 8003366:	2b00      	cmp	r3, #0
 8003368:	d106      	bne.n	8003378 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2200      	movs	r2, #0
 800336e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f7fd fc36 	bl	8000be4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2224      	movs	r2, #36	; 0x24
 800337c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	68da      	ldr	r2, [r3, #12]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800338e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f000 f929 	bl	80035e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	691a      	ldr	r2, [r3, #16]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80033a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	695a      	ldr	r2, [r3, #20]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80033b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	68da      	ldr	r2, [r3, #12]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80033c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2200      	movs	r2, #0
 80033ca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2220      	movs	r2, #32
 80033d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2220      	movs	r2, #32
 80033d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80033dc:	2300      	movs	r3, #0
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3708      	adds	r7, #8
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}

080033e6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033e6:	b580      	push	{r7, lr}
 80033e8:	b08a      	sub	sp, #40	; 0x28
 80033ea:	af02      	add	r7, sp, #8
 80033ec:	60f8      	str	r0, [r7, #12]
 80033ee:	60b9      	str	r1, [r7, #8]
 80033f0:	603b      	str	r3, [r7, #0]
 80033f2:	4613      	mov	r3, r2
 80033f4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80033f6:	2300      	movs	r3, #0
 80033f8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003400:	b2db      	uxtb	r3, r3
 8003402:	2b20      	cmp	r3, #32
 8003404:	d17c      	bne.n	8003500 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d002      	beq.n	8003412 <HAL_UART_Transmit+0x2c>
 800340c:	88fb      	ldrh	r3, [r7, #6]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d101      	bne.n	8003416 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e075      	b.n	8003502 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800341c:	2b01      	cmp	r3, #1
 800341e:	d101      	bne.n	8003424 <HAL_UART_Transmit+0x3e>
 8003420:	2302      	movs	r3, #2
 8003422:	e06e      	b.n	8003502 <HAL_UART_Transmit+0x11c>
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2201      	movs	r2, #1
 8003428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2200      	movs	r2, #0
 8003430:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2221      	movs	r2, #33	; 0x21
 8003436:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800343a:	f7fd fd95 	bl	8000f68 <HAL_GetTick>
 800343e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	88fa      	ldrh	r2, [r7, #6]
 8003444:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	88fa      	ldrh	r2, [r7, #6]
 800344a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003454:	d108      	bne.n	8003468 <HAL_UART_Transmit+0x82>
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	691b      	ldr	r3, [r3, #16]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d104      	bne.n	8003468 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800345e:	2300      	movs	r3, #0
 8003460:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	61bb      	str	r3, [r7, #24]
 8003466:	e003      	b.n	8003470 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800346c:	2300      	movs	r3, #0
 800346e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2200      	movs	r2, #0
 8003474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003478:	e02a      	b.n	80034d0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	9300      	str	r3, [sp, #0]
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	2200      	movs	r2, #0
 8003482:	2180      	movs	r1, #128	; 0x80
 8003484:	68f8      	ldr	r0, [r7, #12]
 8003486:	f000 f840 	bl	800350a <UART_WaitOnFlagUntilTimeout>
 800348a:	4603      	mov	r3, r0
 800348c:	2b00      	cmp	r3, #0
 800348e:	d001      	beq.n	8003494 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003490:	2303      	movs	r3, #3
 8003492:	e036      	b.n	8003502 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003494:	69fb      	ldr	r3, [r7, #28]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d10b      	bne.n	80034b2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800349a:	69bb      	ldr	r3, [r7, #24]
 800349c:	881b      	ldrh	r3, [r3, #0]
 800349e:	461a      	mov	r2, r3
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034a8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80034aa:	69bb      	ldr	r3, [r7, #24]
 80034ac:	3302      	adds	r3, #2
 80034ae:	61bb      	str	r3, [r7, #24]
 80034b0:	e007      	b.n	80034c2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	781a      	ldrb	r2, [r3, #0]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	3301      	adds	r3, #1
 80034c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80034c6:	b29b      	uxth	r3, r3
 80034c8:	3b01      	subs	r3, #1
 80034ca:	b29a      	uxth	r2, r3
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d1cf      	bne.n	800347a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	9300      	str	r3, [sp, #0]
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	2200      	movs	r2, #0
 80034e2:	2140      	movs	r1, #64	; 0x40
 80034e4:	68f8      	ldr	r0, [r7, #12]
 80034e6:	f000 f810 	bl	800350a <UART_WaitOnFlagUntilTimeout>
 80034ea:	4603      	mov	r3, r0
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d001      	beq.n	80034f4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80034f0:	2303      	movs	r3, #3
 80034f2:	e006      	b.n	8003502 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2220      	movs	r2, #32
 80034f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80034fc:	2300      	movs	r3, #0
 80034fe:	e000      	b.n	8003502 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003500:	2302      	movs	r3, #2
  }
}
 8003502:	4618      	mov	r0, r3
 8003504:	3720      	adds	r7, #32
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}

0800350a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800350a:	b580      	push	{r7, lr}
 800350c:	b090      	sub	sp, #64	; 0x40
 800350e:	af00      	add	r7, sp, #0
 8003510:	60f8      	str	r0, [r7, #12]
 8003512:	60b9      	str	r1, [r7, #8]
 8003514:	603b      	str	r3, [r7, #0]
 8003516:	4613      	mov	r3, r2
 8003518:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800351a:	e050      	b.n	80035be <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800351c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800351e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003522:	d04c      	beq.n	80035be <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003524:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003526:	2b00      	cmp	r3, #0
 8003528:	d007      	beq.n	800353a <UART_WaitOnFlagUntilTimeout+0x30>
 800352a:	f7fd fd1d 	bl	8000f68 <HAL_GetTick>
 800352e:	4602      	mov	r2, r0
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	1ad3      	subs	r3, r2, r3
 8003534:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003536:	429a      	cmp	r2, r3
 8003538:	d241      	bcs.n	80035be <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	330c      	adds	r3, #12
 8003540:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003544:	e853 3f00 	ldrex	r3, [r3]
 8003548:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800354a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003550:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	330c      	adds	r3, #12
 8003558:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800355a:	637a      	str	r2, [r7, #52]	; 0x34
 800355c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800355e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003560:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003562:	e841 2300 	strex	r3, r2, [r1]
 8003566:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800356a:	2b00      	cmp	r3, #0
 800356c:	d1e5      	bne.n	800353a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	3314      	adds	r3, #20
 8003574:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	e853 3f00 	ldrex	r3, [r3]
 800357c:	613b      	str	r3, [r7, #16]
   return(result);
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	f023 0301 	bic.w	r3, r3, #1
 8003584:	63bb      	str	r3, [r7, #56]	; 0x38
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	3314      	adds	r3, #20
 800358c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800358e:	623a      	str	r2, [r7, #32]
 8003590:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003592:	69f9      	ldr	r1, [r7, #28]
 8003594:	6a3a      	ldr	r2, [r7, #32]
 8003596:	e841 2300 	strex	r3, r2, [r1]
 800359a:	61bb      	str	r3, [r7, #24]
   return(result);
 800359c:	69bb      	ldr	r3, [r7, #24]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d1e5      	bne.n	800356e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2220      	movs	r2, #32
 80035a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2220      	movs	r2, #32
 80035ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2200      	movs	r2, #0
 80035b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	e00f      	b.n	80035de <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	4013      	ands	r3, r2
 80035c8:	68ba      	ldr	r2, [r7, #8]
 80035ca:	429a      	cmp	r2, r3
 80035cc:	bf0c      	ite	eq
 80035ce:	2301      	moveq	r3, #1
 80035d0:	2300      	movne	r3, #0
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	461a      	mov	r2, r3
 80035d6:	79fb      	ldrb	r3, [r7, #7]
 80035d8:	429a      	cmp	r2, r3
 80035da:	d09f      	beq.n	800351c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80035dc:	2300      	movs	r3, #0
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3740      	adds	r7, #64	; 0x40
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
	...

080035e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035ec:	b0c0      	sub	sp, #256	; 0x100
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	691b      	ldr	r3, [r3, #16]
 80035fc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003600:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003604:	68d9      	ldr	r1, [r3, #12]
 8003606:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	ea40 0301 	orr.w	r3, r0, r1
 8003610:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003612:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003616:	689a      	ldr	r2, [r3, #8]
 8003618:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800361c:	691b      	ldr	r3, [r3, #16]
 800361e:	431a      	orrs	r2, r3
 8003620:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003624:	695b      	ldr	r3, [r3, #20]
 8003626:	431a      	orrs	r2, r3
 8003628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800362c:	69db      	ldr	r3, [r3, #28]
 800362e:	4313      	orrs	r3, r2
 8003630:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003640:	f021 010c 	bic.w	r1, r1, #12
 8003644:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800364e:	430b      	orrs	r3, r1
 8003650:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003652:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	695b      	ldr	r3, [r3, #20]
 800365a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800365e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003662:	6999      	ldr	r1, [r3, #24]
 8003664:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	ea40 0301 	orr.w	r3, r0, r1
 800366e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	4b8f      	ldr	r3, [pc, #572]	; (80038b4 <UART_SetConfig+0x2cc>)
 8003678:	429a      	cmp	r2, r3
 800367a:	d005      	beq.n	8003688 <UART_SetConfig+0xa0>
 800367c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	4b8d      	ldr	r3, [pc, #564]	; (80038b8 <UART_SetConfig+0x2d0>)
 8003684:	429a      	cmp	r2, r3
 8003686:	d104      	bne.n	8003692 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003688:	f7ff fb52 	bl	8002d30 <HAL_RCC_GetPCLK2Freq>
 800368c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003690:	e003      	b.n	800369a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003692:	f7ff fb39 	bl	8002d08 <HAL_RCC_GetPCLK1Freq>
 8003696:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800369a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800369e:	69db      	ldr	r3, [r3, #28]
 80036a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036a4:	f040 810c 	bne.w	80038c0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80036a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036ac:	2200      	movs	r2, #0
 80036ae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80036b2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80036b6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80036ba:	4622      	mov	r2, r4
 80036bc:	462b      	mov	r3, r5
 80036be:	1891      	adds	r1, r2, r2
 80036c0:	65b9      	str	r1, [r7, #88]	; 0x58
 80036c2:	415b      	adcs	r3, r3
 80036c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80036c6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80036ca:	4621      	mov	r1, r4
 80036cc:	eb12 0801 	adds.w	r8, r2, r1
 80036d0:	4629      	mov	r1, r5
 80036d2:	eb43 0901 	adc.w	r9, r3, r1
 80036d6:	f04f 0200 	mov.w	r2, #0
 80036da:	f04f 0300 	mov.w	r3, #0
 80036de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80036e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80036e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80036ea:	4690      	mov	r8, r2
 80036ec:	4699      	mov	r9, r3
 80036ee:	4623      	mov	r3, r4
 80036f0:	eb18 0303 	adds.w	r3, r8, r3
 80036f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80036f8:	462b      	mov	r3, r5
 80036fa:	eb49 0303 	adc.w	r3, r9, r3
 80036fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003702:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800370e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003712:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003716:	460b      	mov	r3, r1
 8003718:	18db      	adds	r3, r3, r3
 800371a:	653b      	str	r3, [r7, #80]	; 0x50
 800371c:	4613      	mov	r3, r2
 800371e:	eb42 0303 	adc.w	r3, r2, r3
 8003722:	657b      	str	r3, [r7, #84]	; 0x54
 8003724:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003728:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800372c:	f7fc fda8 	bl	8000280 <__aeabi_uldivmod>
 8003730:	4602      	mov	r2, r0
 8003732:	460b      	mov	r3, r1
 8003734:	4b61      	ldr	r3, [pc, #388]	; (80038bc <UART_SetConfig+0x2d4>)
 8003736:	fba3 2302 	umull	r2, r3, r3, r2
 800373a:	095b      	lsrs	r3, r3, #5
 800373c:	011c      	lsls	r4, r3, #4
 800373e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003742:	2200      	movs	r2, #0
 8003744:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003748:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800374c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003750:	4642      	mov	r2, r8
 8003752:	464b      	mov	r3, r9
 8003754:	1891      	adds	r1, r2, r2
 8003756:	64b9      	str	r1, [r7, #72]	; 0x48
 8003758:	415b      	adcs	r3, r3
 800375a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800375c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003760:	4641      	mov	r1, r8
 8003762:	eb12 0a01 	adds.w	sl, r2, r1
 8003766:	4649      	mov	r1, r9
 8003768:	eb43 0b01 	adc.w	fp, r3, r1
 800376c:	f04f 0200 	mov.w	r2, #0
 8003770:	f04f 0300 	mov.w	r3, #0
 8003774:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003778:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800377c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003780:	4692      	mov	sl, r2
 8003782:	469b      	mov	fp, r3
 8003784:	4643      	mov	r3, r8
 8003786:	eb1a 0303 	adds.w	r3, sl, r3
 800378a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800378e:	464b      	mov	r3, r9
 8003790:	eb4b 0303 	adc.w	r3, fp, r3
 8003794:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80037a4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80037a8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80037ac:	460b      	mov	r3, r1
 80037ae:	18db      	adds	r3, r3, r3
 80037b0:	643b      	str	r3, [r7, #64]	; 0x40
 80037b2:	4613      	mov	r3, r2
 80037b4:	eb42 0303 	adc.w	r3, r2, r3
 80037b8:	647b      	str	r3, [r7, #68]	; 0x44
 80037ba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80037be:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80037c2:	f7fc fd5d 	bl	8000280 <__aeabi_uldivmod>
 80037c6:	4602      	mov	r2, r0
 80037c8:	460b      	mov	r3, r1
 80037ca:	4611      	mov	r1, r2
 80037cc:	4b3b      	ldr	r3, [pc, #236]	; (80038bc <UART_SetConfig+0x2d4>)
 80037ce:	fba3 2301 	umull	r2, r3, r3, r1
 80037d2:	095b      	lsrs	r3, r3, #5
 80037d4:	2264      	movs	r2, #100	; 0x64
 80037d6:	fb02 f303 	mul.w	r3, r2, r3
 80037da:	1acb      	subs	r3, r1, r3
 80037dc:	00db      	lsls	r3, r3, #3
 80037de:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80037e2:	4b36      	ldr	r3, [pc, #216]	; (80038bc <UART_SetConfig+0x2d4>)
 80037e4:	fba3 2302 	umull	r2, r3, r3, r2
 80037e8:	095b      	lsrs	r3, r3, #5
 80037ea:	005b      	lsls	r3, r3, #1
 80037ec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80037f0:	441c      	add	r4, r3
 80037f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037f6:	2200      	movs	r2, #0
 80037f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80037fc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003800:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003804:	4642      	mov	r2, r8
 8003806:	464b      	mov	r3, r9
 8003808:	1891      	adds	r1, r2, r2
 800380a:	63b9      	str	r1, [r7, #56]	; 0x38
 800380c:	415b      	adcs	r3, r3
 800380e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003810:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003814:	4641      	mov	r1, r8
 8003816:	1851      	adds	r1, r2, r1
 8003818:	6339      	str	r1, [r7, #48]	; 0x30
 800381a:	4649      	mov	r1, r9
 800381c:	414b      	adcs	r3, r1
 800381e:	637b      	str	r3, [r7, #52]	; 0x34
 8003820:	f04f 0200 	mov.w	r2, #0
 8003824:	f04f 0300 	mov.w	r3, #0
 8003828:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800382c:	4659      	mov	r1, fp
 800382e:	00cb      	lsls	r3, r1, #3
 8003830:	4651      	mov	r1, sl
 8003832:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003836:	4651      	mov	r1, sl
 8003838:	00ca      	lsls	r2, r1, #3
 800383a:	4610      	mov	r0, r2
 800383c:	4619      	mov	r1, r3
 800383e:	4603      	mov	r3, r0
 8003840:	4642      	mov	r2, r8
 8003842:	189b      	adds	r3, r3, r2
 8003844:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003848:	464b      	mov	r3, r9
 800384a:	460a      	mov	r2, r1
 800384c:	eb42 0303 	adc.w	r3, r2, r3
 8003850:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	2200      	movs	r2, #0
 800385c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003860:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003864:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003868:	460b      	mov	r3, r1
 800386a:	18db      	adds	r3, r3, r3
 800386c:	62bb      	str	r3, [r7, #40]	; 0x28
 800386e:	4613      	mov	r3, r2
 8003870:	eb42 0303 	adc.w	r3, r2, r3
 8003874:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003876:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800387a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800387e:	f7fc fcff 	bl	8000280 <__aeabi_uldivmod>
 8003882:	4602      	mov	r2, r0
 8003884:	460b      	mov	r3, r1
 8003886:	4b0d      	ldr	r3, [pc, #52]	; (80038bc <UART_SetConfig+0x2d4>)
 8003888:	fba3 1302 	umull	r1, r3, r3, r2
 800388c:	095b      	lsrs	r3, r3, #5
 800388e:	2164      	movs	r1, #100	; 0x64
 8003890:	fb01 f303 	mul.w	r3, r1, r3
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	00db      	lsls	r3, r3, #3
 8003898:	3332      	adds	r3, #50	; 0x32
 800389a:	4a08      	ldr	r2, [pc, #32]	; (80038bc <UART_SetConfig+0x2d4>)
 800389c:	fba2 2303 	umull	r2, r3, r2, r3
 80038a0:	095b      	lsrs	r3, r3, #5
 80038a2:	f003 0207 	and.w	r2, r3, #7
 80038a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4422      	add	r2, r4
 80038ae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80038b0:	e105      	b.n	8003abe <UART_SetConfig+0x4d6>
 80038b2:	bf00      	nop
 80038b4:	40011000 	.word	0x40011000
 80038b8:	40011400 	.word	0x40011400
 80038bc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80038c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038c4:	2200      	movs	r2, #0
 80038c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80038ca:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80038ce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80038d2:	4642      	mov	r2, r8
 80038d4:	464b      	mov	r3, r9
 80038d6:	1891      	adds	r1, r2, r2
 80038d8:	6239      	str	r1, [r7, #32]
 80038da:	415b      	adcs	r3, r3
 80038dc:	627b      	str	r3, [r7, #36]	; 0x24
 80038de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80038e2:	4641      	mov	r1, r8
 80038e4:	1854      	adds	r4, r2, r1
 80038e6:	4649      	mov	r1, r9
 80038e8:	eb43 0501 	adc.w	r5, r3, r1
 80038ec:	f04f 0200 	mov.w	r2, #0
 80038f0:	f04f 0300 	mov.w	r3, #0
 80038f4:	00eb      	lsls	r3, r5, #3
 80038f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80038fa:	00e2      	lsls	r2, r4, #3
 80038fc:	4614      	mov	r4, r2
 80038fe:	461d      	mov	r5, r3
 8003900:	4643      	mov	r3, r8
 8003902:	18e3      	adds	r3, r4, r3
 8003904:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003908:	464b      	mov	r3, r9
 800390a:	eb45 0303 	adc.w	r3, r5, r3
 800390e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003912:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	2200      	movs	r2, #0
 800391a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800391e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003922:	f04f 0200 	mov.w	r2, #0
 8003926:	f04f 0300 	mov.w	r3, #0
 800392a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800392e:	4629      	mov	r1, r5
 8003930:	008b      	lsls	r3, r1, #2
 8003932:	4621      	mov	r1, r4
 8003934:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003938:	4621      	mov	r1, r4
 800393a:	008a      	lsls	r2, r1, #2
 800393c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003940:	f7fc fc9e 	bl	8000280 <__aeabi_uldivmod>
 8003944:	4602      	mov	r2, r0
 8003946:	460b      	mov	r3, r1
 8003948:	4b60      	ldr	r3, [pc, #384]	; (8003acc <UART_SetConfig+0x4e4>)
 800394a:	fba3 2302 	umull	r2, r3, r3, r2
 800394e:	095b      	lsrs	r3, r3, #5
 8003950:	011c      	lsls	r4, r3, #4
 8003952:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003956:	2200      	movs	r2, #0
 8003958:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800395c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003960:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003964:	4642      	mov	r2, r8
 8003966:	464b      	mov	r3, r9
 8003968:	1891      	adds	r1, r2, r2
 800396a:	61b9      	str	r1, [r7, #24]
 800396c:	415b      	adcs	r3, r3
 800396e:	61fb      	str	r3, [r7, #28]
 8003970:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003974:	4641      	mov	r1, r8
 8003976:	1851      	adds	r1, r2, r1
 8003978:	6139      	str	r1, [r7, #16]
 800397a:	4649      	mov	r1, r9
 800397c:	414b      	adcs	r3, r1
 800397e:	617b      	str	r3, [r7, #20]
 8003980:	f04f 0200 	mov.w	r2, #0
 8003984:	f04f 0300 	mov.w	r3, #0
 8003988:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800398c:	4659      	mov	r1, fp
 800398e:	00cb      	lsls	r3, r1, #3
 8003990:	4651      	mov	r1, sl
 8003992:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003996:	4651      	mov	r1, sl
 8003998:	00ca      	lsls	r2, r1, #3
 800399a:	4610      	mov	r0, r2
 800399c:	4619      	mov	r1, r3
 800399e:	4603      	mov	r3, r0
 80039a0:	4642      	mov	r2, r8
 80039a2:	189b      	adds	r3, r3, r2
 80039a4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80039a8:	464b      	mov	r3, r9
 80039aa:	460a      	mov	r2, r1
 80039ac:	eb42 0303 	adc.w	r3, r2, r3
 80039b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80039b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	2200      	movs	r2, #0
 80039bc:	67bb      	str	r3, [r7, #120]	; 0x78
 80039be:	67fa      	str	r2, [r7, #124]	; 0x7c
 80039c0:	f04f 0200 	mov.w	r2, #0
 80039c4:	f04f 0300 	mov.w	r3, #0
 80039c8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80039cc:	4649      	mov	r1, r9
 80039ce:	008b      	lsls	r3, r1, #2
 80039d0:	4641      	mov	r1, r8
 80039d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80039d6:	4641      	mov	r1, r8
 80039d8:	008a      	lsls	r2, r1, #2
 80039da:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80039de:	f7fc fc4f 	bl	8000280 <__aeabi_uldivmod>
 80039e2:	4602      	mov	r2, r0
 80039e4:	460b      	mov	r3, r1
 80039e6:	4b39      	ldr	r3, [pc, #228]	; (8003acc <UART_SetConfig+0x4e4>)
 80039e8:	fba3 1302 	umull	r1, r3, r3, r2
 80039ec:	095b      	lsrs	r3, r3, #5
 80039ee:	2164      	movs	r1, #100	; 0x64
 80039f0:	fb01 f303 	mul.w	r3, r1, r3
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	011b      	lsls	r3, r3, #4
 80039f8:	3332      	adds	r3, #50	; 0x32
 80039fa:	4a34      	ldr	r2, [pc, #208]	; (8003acc <UART_SetConfig+0x4e4>)
 80039fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003a00:	095b      	lsrs	r3, r3, #5
 8003a02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a06:	441c      	add	r4, r3
 8003a08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	673b      	str	r3, [r7, #112]	; 0x70
 8003a10:	677a      	str	r2, [r7, #116]	; 0x74
 8003a12:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003a16:	4642      	mov	r2, r8
 8003a18:	464b      	mov	r3, r9
 8003a1a:	1891      	adds	r1, r2, r2
 8003a1c:	60b9      	str	r1, [r7, #8]
 8003a1e:	415b      	adcs	r3, r3
 8003a20:	60fb      	str	r3, [r7, #12]
 8003a22:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a26:	4641      	mov	r1, r8
 8003a28:	1851      	adds	r1, r2, r1
 8003a2a:	6039      	str	r1, [r7, #0]
 8003a2c:	4649      	mov	r1, r9
 8003a2e:	414b      	adcs	r3, r1
 8003a30:	607b      	str	r3, [r7, #4]
 8003a32:	f04f 0200 	mov.w	r2, #0
 8003a36:	f04f 0300 	mov.w	r3, #0
 8003a3a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003a3e:	4659      	mov	r1, fp
 8003a40:	00cb      	lsls	r3, r1, #3
 8003a42:	4651      	mov	r1, sl
 8003a44:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a48:	4651      	mov	r1, sl
 8003a4a:	00ca      	lsls	r2, r1, #3
 8003a4c:	4610      	mov	r0, r2
 8003a4e:	4619      	mov	r1, r3
 8003a50:	4603      	mov	r3, r0
 8003a52:	4642      	mov	r2, r8
 8003a54:	189b      	adds	r3, r3, r2
 8003a56:	66bb      	str	r3, [r7, #104]	; 0x68
 8003a58:	464b      	mov	r3, r9
 8003a5a:	460a      	mov	r2, r1
 8003a5c:	eb42 0303 	adc.w	r3, r2, r3
 8003a60:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003a62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	663b      	str	r3, [r7, #96]	; 0x60
 8003a6c:	667a      	str	r2, [r7, #100]	; 0x64
 8003a6e:	f04f 0200 	mov.w	r2, #0
 8003a72:	f04f 0300 	mov.w	r3, #0
 8003a76:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003a7a:	4649      	mov	r1, r9
 8003a7c:	008b      	lsls	r3, r1, #2
 8003a7e:	4641      	mov	r1, r8
 8003a80:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a84:	4641      	mov	r1, r8
 8003a86:	008a      	lsls	r2, r1, #2
 8003a88:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003a8c:	f7fc fbf8 	bl	8000280 <__aeabi_uldivmod>
 8003a90:	4602      	mov	r2, r0
 8003a92:	460b      	mov	r3, r1
 8003a94:	4b0d      	ldr	r3, [pc, #52]	; (8003acc <UART_SetConfig+0x4e4>)
 8003a96:	fba3 1302 	umull	r1, r3, r3, r2
 8003a9a:	095b      	lsrs	r3, r3, #5
 8003a9c:	2164      	movs	r1, #100	; 0x64
 8003a9e:	fb01 f303 	mul.w	r3, r1, r3
 8003aa2:	1ad3      	subs	r3, r2, r3
 8003aa4:	011b      	lsls	r3, r3, #4
 8003aa6:	3332      	adds	r3, #50	; 0x32
 8003aa8:	4a08      	ldr	r2, [pc, #32]	; (8003acc <UART_SetConfig+0x4e4>)
 8003aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8003aae:	095b      	lsrs	r3, r3, #5
 8003ab0:	f003 020f 	and.w	r2, r3, #15
 8003ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4422      	add	r2, r4
 8003abc:	609a      	str	r2, [r3, #8]
}
 8003abe:	bf00      	nop
 8003ac0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003aca:	bf00      	nop
 8003acc:	51eb851f 	.word	0x51eb851f

08003ad0 <__errno>:
 8003ad0:	4b01      	ldr	r3, [pc, #4]	; (8003ad8 <__errno+0x8>)
 8003ad2:	6818      	ldr	r0, [r3, #0]
 8003ad4:	4770      	bx	lr
 8003ad6:	bf00      	nop
 8003ad8:	2000000c 	.word	0x2000000c

08003adc <__libc_init_array>:
 8003adc:	b570      	push	{r4, r5, r6, lr}
 8003ade:	4d0d      	ldr	r5, [pc, #52]	; (8003b14 <__libc_init_array+0x38>)
 8003ae0:	4c0d      	ldr	r4, [pc, #52]	; (8003b18 <__libc_init_array+0x3c>)
 8003ae2:	1b64      	subs	r4, r4, r5
 8003ae4:	10a4      	asrs	r4, r4, #2
 8003ae6:	2600      	movs	r6, #0
 8003ae8:	42a6      	cmp	r6, r4
 8003aea:	d109      	bne.n	8003b00 <__libc_init_array+0x24>
 8003aec:	4d0b      	ldr	r5, [pc, #44]	; (8003b1c <__libc_init_array+0x40>)
 8003aee:	4c0c      	ldr	r4, [pc, #48]	; (8003b20 <__libc_init_array+0x44>)
 8003af0:	f001 f824 	bl	8004b3c <_init>
 8003af4:	1b64      	subs	r4, r4, r5
 8003af6:	10a4      	asrs	r4, r4, #2
 8003af8:	2600      	movs	r6, #0
 8003afa:	42a6      	cmp	r6, r4
 8003afc:	d105      	bne.n	8003b0a <__libc_init_array+0x2e>
 8003afe:	bd70      	pop	{r4, r5, r6, pc}
 8003b00:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b04:	4798      	blx	r3
 8003b06:	3601      	adds	r6, #1
 8003b08:	e7ee      	b.n	8003ae8 <__libc_init_array+0xc>
 8003b0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b0e:	4798      	blx	r3
 8003b10:	3601      	adds	r6, #1
 8003b12:	e7f2      	b.n	8003afa <__libc_init_array+0x1e>
 8003b14:	08004c74 	.word	0x08004c74
 8003b18:	08004c74 	.word	0x08004c74
 8003b1c:	08004c74 	.word	0x08004c74
 8003b20:	08004c78 	.word	0x08004c78

08003b24 <memset>:
 8003b24:	4402      	add	r2, r0
 8003b26:	4603      	mov	r3, r0
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d100      	bne.n	8003b2e <memset+0xa>
 8003b2c:	4770      	bx	lr
 8003b2e:	f803 1b01 	strb.w	r1, [r3], #1
 8003b32:	e7f9      	b.n	8003b28 <memset+0x4>

08003b34 <iprintf>:
 8003b34:	b40f      	push	{r0, r1, r2, r3}
 8003b36:	4b0a      	ldr	r3, [pc, #40]	; (8003b60 <iprintf+0x2c>)
 8003b38:	b513      	push	{r0, r1, r4, lr}
 8003b3a:	681c      	ldr	r4, [r3, #0]
 8003b3c:	b124      	cbz	r4, 8003b48 <iprintf+0x14>
 8003b3e:	69a3      	ldr	r3, [r4, #24]
 8003b40:	b913      	cbnz	r3, 8003b48 <iprintf+0x14>
 8003b42:	4620      	mov	r0, r4
 8003b44:	f000 fa5e 	bl	8004004 <__sinit>
 8003b48:	ab05      	add	r3, sp, #20
 8003b4a:	9a04      	ldr	r2, [sp, #16]
 8003b4c:	68a1      	ldr	r1, [r4, #8]
 8003b4e:	9301      	str	r3, [sp, #4]
 8003b50:	4620      	mov	r0, r4
 8003b52:	f000 fc67 	bl	8004424 <_vfiprintf_r>
 8003b56:	b002      	add	sp, #8
 8003b58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b5c:	b004      	add	sp, #16
 8003b5e:	4770      	bx	lr
 8003b60:	2000000c 	.word	0x2000000c

08003b64 <_puts_r>:
 8003b64:	b570      	push	{r4, r5, r6, lr}
 8003b66:	460e      	mov	r6, r1
 8003b68:	4605      	mov	r5, r0
 8003b6a:	b118      	cbz	r0, 8003b74 <_puts_r+0x10>
 8003b6c:	6983      	ldr	r3, [r0, #24]
 8003b6e:	b90b      	cbnz	r3, 8003b74 <_puts_r+0x10>
 8003b70:	f000 fa48 	bl	8004004 <__sinit>
 8003b74:	69ab      	ldr	r3, [r5, #24]
 8003b76:	68ac      	ldr	r4, [r5, #8]
 8003b78:	b913      	cbnz	r3, 8003b80 <_puts_r+0x1c>
 8003b7a:	4628      	mov	r0, r5
 8003b7c:	f000 fa42 	bl	8004004 <__sinit>
 8003b80:	4b2c      	ldr	r3, [pc, #176]	; (8003c34 <_puts_r+0xd0>)
 8003b82:	429c      	cmp	r4, r3
 8003b84:	d120      	bne.n	8003bc8 <_puts_r+0x64>
 8003b86:	686c      	ldr	r4, [r5, #4]
 8003b88:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003b8a:	07db      	lsls	r3, r3, #31
 8003b8c:	d405      	bmi.n	8003b9a <_puts_r+0x36>
 8003b8e:	89a3      	ldrh	r3, [r4, #12]
 8003b90:	0598      	lsls	r0, r3, #22
 8003b92:	d402      	bmi.n	8003b9a <_puts_r+0x36>
 8003b94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003b96:	f000 fad3 	bl	8004140 <__retarget_lock_acquire_recursive>
 8003b9a:	89a3      	ldrh	r3, [r4, #12]
 8003b9c:	0719      	lsls	r1, r3, #28
 8003b9e:	d51d      	bpl.n	8003bdc <_puts_r+0x78>
 8003ba0:	6923      	ldr	r3, [r4, #16]
 8003ba2:	b1db      	cbz	r3, 8003bdc <_puts_r+0x78>
 8003ba4:	3e01      	subs	r6, #1
 8003ba6:	68a3      	ldr	r3, [r4, #8]
 8003ba8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003bac:	3b01      	subs	r3, #1
 8003bae:	60a3      	str	r3, [r4, #8]
 8003bb0:	bb39      	cbnz	r1, 8003c02 <_puts_r+0x9e>
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	da38      	bge.n	8003c28 <_puts_r+0xc4>
 8003bb6:	4622      	mov	r2, r4
 8003bb8:	210a      	movs	r1, #10
 8003bba:	4628      	mov	r0, r5
 8003bbc:	f000 f848 	bl	8003c50 <__swbuf_r>
 8003bc0:	3001      	adds	r0, #1
 8003bc2:	d011      	beq.n	8003be8 <_puts_r+0x84>
 8003bc4:	250a      	movs	r5, #10
 8003bc6:	e011      	b.n	8003bec <_puts_r+0x88>
 8003bc8:	4b1b      	ldr	r3, [pc, #108]	; (8003c38 <_puts_r+0xd4>)
 8003bca:	429c      	cmp	r4, r3
 8003bcc:	d101      	bne.n	8003bd2 <_puts_r+0x6e>
 8003bce:	68ac      	ldr	r4, [r5, #8]
 8003bd0:	e7da      	b.n	8003b88 <_puts_r+0x24>
 8003bd2:	4b1a      	ldr	r3, [pc, #104]	; (8003c3c <_puts_r+0xd8>)
 8003bd4:	429c      	cmp	r4, r3
 8003bd6:	bf08      	it	eq
 8003bd8:	68ec      	ldreq	r4, [r5, #12]
 8003bda:	e7d5      	b.n	8003b88 <_puts_r+0x24>
 8003bdc:	4621      	mov	r1, r4
 8003bde:	4628      	mov	r0, r5
 8003be0:	f000 f888 	bl	8003cf4 <__swsetup_r>
 8003be4:	2800      	cmp	r0, #0
 8003be6:	d0dd      	beq.n	8003ba4 <_puts_r+0x40>
 8003be8:	f04f 35ff 	mov.w	r5, #4294967295
 8003bec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003bee:	07da      	lsls	r2, r3, #31
 8003bf0:	d405      	bmi.n	8003bfe <_puts_r+0x9a>
 8003bf2:	89a3      	ldrh	r3, [r4, #12]
 8003bf4:	059b      	lsls	r3, r3, #22
 8003bf6:	d402      	bmi.n	8003bfe <_puts_r+0x9a>
 8003bf8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003bfa:	f000 faa2 	bl	8004142 <__retarget_lock_release_recursive>
 8003bfe:	4628      	mov	r0, r5
 8003c00:	bd70      	pop	{r4, r5, r6, pc}
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	da04      	bge.n	8003c10 <_puts_r+0xac>
 8003c06:	69a2      	ldr	r2, [r4, #24]
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	dc06      	bgt.n	8003c1a <_puts_r+0xb6>
 8003c0c:	290a      	cmp	r1, #10
 8003c0e:	d004      	beq.n	8003c1a <_puts_r+0xb6>
 8003c10:	6823      	ldr	r3, [r4, #0]
 8003c12:	1c5a      	adds	r2, r3, #1
 8003c14:	6022      	str	r2, [r4, #0]
 8003c16:	7019      	strb	r1, [r3, #0]
 8003c18:	e7c5      	b.n	8003ba6 <_puts_r+0x42>
 8003c1a:	4622      	mov	r2, r4
 8003c1c:	4628      	mov	r0, r5
 8003c1e:	f000 f817 	bl	8003c50 <__swbuf_r>
 8003c22:	3001      	adds	r0, #1
 8003c24:	d1bf      	bne.n	8003ba6 <_puts_r+0x42>
 8003c26:	e7df      	b.n	8003be8 <_puts_r+0x84>
 8003c28:	6823      	ldr	r3, [r4, #0]
 8003c2a:	250a      	movs	r5, #10
 8003c2c:	1c5a      	adds	r2, r3, #1
 8003c2e:	6022      	str	r2, [r4, #0]
 8003c30:	701d      	strb	r5, [r3, #0]
 8003c32:	e7db      	b.n	8003bec <_puts_r+0x88>
 8003c34:	08004bf8 	.word	0x08004bf8
 8003c38:	08004c18 	.word	0x08004c18
 8003c3c:	08004bd8 	.word	0x08004bd8

08003c40 <puts>:
 8003c40:	4b02      	ldr	r3, [pc, #8]	; (8003c4c <puts+0xc>)
 8003c42:	4601      	mov	r1, r0
 8003c44:	6818      	ldr	r0, [r3, #0]
 8003c46:	f7ff bf8d 	b.w	8003b64 <_puts_r>
 8003c4a:	bf00      	nop
 8003c4c:	2000000c 	.word	0x2000000c

08003c50 <__swbuf_r>:
 8003c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c52:	460e      	mov	r6, r1
 8003c54:	4614      	mov	r4, r2
 8003c56:	4605      	mov	r5, r0
 8003c58:	b118      	cbz	r0, 8003c62 <__swbuf_r+0x12>
 8003c5a:	6983      	ldr	r3, [r0, #24]
 8003c5c:	b90b      	cbnz	r3, 8003c62 <__swbuf_r+0x12>
 8003c5e:	f000 f9d1 	bl	8004004 <__sinit>
 8003c62:	4b21      	ldr	r3, [pc, #132]	; (8003ce8 <__swbuf_r+0x98>)
 8003c64:	429c      	cmp	r4, r3
 8003c66:	d12b      	bne.n	8003cc0 <__swbuf_r+0x70>
 8003c68:	686c      	ldr	r4, [r5, #4]
 8003c6a:	69a3      	ldr	r3, [r4, #24]
 8003c6c:	60a3      	str	r3, [r4, #8]
 8003c6e:	89a3      	ldrh	r3, [r4, #12]
 8003c70:	071a      	lsls	r2, r3, #28
 8003c72:	d52f      	bpl.n	8003cd4 <__swbuf_r+0x84>
 8003c74:	6923      	ldr	r3, [r4, #16]
 8003c76:	b36b      	cbz	r3, 8003cd4 <__swbuf_r+0x84>
 8003c78:	6923      	ldr	r3, [r4, #16]
 8003c7a:	6820      	ldr	r0, [r4, #0]
 8003c7c:	1ac0      	subs	r0, r0, r3
 8003c7e:	6963      	ldr	r3, [r4, #20]
 8003c80:	b2f6      	uxtb	r6, r6
 8003c82:	4283      	cmp	r3, r0
 8003c84:	4637      	mov	r7, r6
 8003c86:	dc04      	bgt.n	8003c92 <__swbuf_r+0x42>
 8003c88:	4621      	mov	r1, r4
 8003c8a:	4628      	mov	r0, r5
 8003c8c:	f000 f926 	bl	8003edc <_fflush_r>
 8003c90:	bb30      	cbnz	r0, 8003ce0 <__swbuf_r+0x90>
 8003c92:	68a3      	ldr	r3, [r4, #8]
 8003c94:	3b01      	subs	r3, #1
 8003c96:	60a3      	str	r3, [r4, #8]
 8003c98:	6823      	ldr	r3, [r4, #0]
 8003c9a:	1c5a      	adds	r2, r3, #1
 8003c9c:	6022      	str	r2, [r4, #0]
 8003c9e:	701e      	strb	r6, [r3, #0]
 8003ca0:	6963      	ldr	r3, [r4, #20]
 8003ca2:	3001      	adds	r0, #1
 8003ca4:	4283      	cmp	r3, r0
 8003ca6:	d004      	beq.n	8003cb2 <__swbuf_r+0x62>
 8003ca8:	89a3      	ldrh	r3, [r4, #12]
 8003caa:	07db      	lsls	r3, r3, #31
 8003cac:	d506      	bpl.n	8003cbc <__swbuf_r+0x6c>
 8003cae:	2e0a      	cmp	r6, #10
 8003cb0:	d104      	bne.n	8003cbc <__swbuf_r+0x6c>
 8003cb2:	4621      	mov	r1, r4
 8003cb4:	4628      	mov	r0, r5
 8003cb6:	f000 f911 	bl	8003edc <_fflush_r>
 8003cba:	b988      	cbnz	r0, 8003ce0 <__swbuf_r+0x90>
 8003cbc:	4638      	mov	r0, r7
 8003cbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003cc0:	4b0a      	ldr	r3, [pc, #40]	; (8003cec <__swbuf_r+0x9c>)
 8003cc2:	429c      	cmp	r4, r3
 8003cc4:	d101      	bne.n	8003cca <__swbuf_r+0x7a>
 8003cc6:	68ac      	ldr	r4, [r5, #8]
 8003cc8:	e7cf      	b.n	8003c6a <__swbuf_r+0x1a>
 8003cca:	4b09      	ldr	r3, [pc, #36]	; (8003cf0 <__swbuf_r+0xa0>)
 8003ccc:	429c      	cmp	r4, r3
 8003cce:	bf08      	it	eq
 8003cd0:	68ec      	ldreq	r4, [r5, #12]
 8003cd2:	e7ca      	b.n	8003c6a <__swbuf_r+0x1a>
 8003cd4:	4621      	mov	r1, r4
 8003cd6:	4628      	mov	r0, r5
 8003cd8:	f000 f80c 	bl	8003cf4 <__swsetup_r>
 8003cdc:	2800      	cmp	r0, #0
 8003cde:	d0cb      	beq.n	8003c78 <__swbuf_r+0x28>
 8003ce0:	f04f 37ff 	mov.w	r7, #4294967295
 8003ce4:	e7ea      	b.n	8003cbc <__swbuf_r+0x6c>
 8003ce6:	bf00      	nop
 8003ce8:	08004bf8 	.word	0x08004bf8
 8003cec:	08004c18 	.word	0x08004c18
 8003cf0:	08004bd8 	.word	0x08004bd8

08003cf4 <__swsetup_r>:
 8003cf4:	4b32      	ldr	r3, [pc, #200]	; (8003dc0 <__swsetup_r+0xcc>)
 8003cf6:	b570      	push	{r4, r5, r6, lr}
 8003cf8:	681d      	ldr	r5, [r3, #0]
 8003cfa:	4606      	mov	r6, r0
 8003cfc:	460c      	mov	r4, r1
 8003cfe:	b125      	cbz	r5, 8003d0a <__swsetup_r+0x16>
 8003d00:	69ab      	ldr	r3, [r5, #24]
 8003d02:	b913      	cbnz	r3, 8003d0a <__swsetup_r+0x16>
 8003d04:	4628      	mov	r0, r5
 8003d06:	f000 f97d 	bl	8004004 <__sinit>
 8003d0a:	4b2e      	ldr	r3, [pc, #184]	; (8003dc4 <__swsetup_r+0xd0>)
 8003d0c:	429c      	cmp	r4, r3
 8003d0e:	d10f      	bne.n	8003d30 <__swsetup_r+0x3c>
 8003d10:	686c      	ldr	r4, [r5, #4]
 8003d12:	89a3      	ldrh	r3, [r4, #12]
 8003d14:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003d18:	0719      	lsls	r1, r3, #28
 8003d1a:	d42c      	bmi.n	8003d76 <__swsetup_r+0x82>
 8003d1c:	06dd      	lsls	r5, r3, #27
 8003d1e:	d411      	bmi.n	8003d44 <__swsetup_r+0x50>
 8003d20:	2309      	movs	r3, #9
 8003d22:	6033      	str	r3, [r6, #0]
 8003d24:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003d28:	81a3      	strh	r3, [r4, #12]
 8003d2a:	f04f 30ff 	mov.w	r0, #4294967295
 8003d2e:	e03e      	b.n	8003dae <__swsetup_r+0xba>
 8003d30:	4b25      	ldr	r3, [pc, #148]	; (8003dc8 <__swsetup_r+0xd4>)
 8003d32:	429c      	cmp	r4, r3
 8003d34:	d101      	bne.n	8003d3a <__swsetup_r+0x46>
 8003d36:	68ac      	ldr	r4, [r5, #8]
 8003d38:	e7eb      	b.n	8003d12 <__swsetup_r+0x1e>
 8003d3a:	4b24      	ldr	r3, [pc, #144]	; (8003dcc <__swsetup_r+0xd8>)
 8003d3c:	429c      	cmp	r4, r3
 8003d3e:	bf08      	it	eq
 8003d40:	68ec      	ldreq	r4, [r5, #12]
 8003d42:	e7e6      	b.n	8003d12 <__swsetup_r+0x1e>
 8003d44:	0758      	lsls	r0, r3, #29
 8003d46:	d512      	bpl.n	8003d6e <__swsetup_r+0x7a>
 8003d48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003d4a:	b141      	cbz	r1, 8003d5e <__swsetup_r+0x6a>
 8003d4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003d50:	4299      	cmp	r1, r3
 8003d52:	d002      	beq.n	8003d5a <__swsetup_r+0x66>
 8003d54:	4630      	mov	r0, r6
 8003d56:	f000 fa5b 	bl	8004210 <_free_r>
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	6363      	str	r3, [r4, #52]	; 0x34
 8003d5e:	89a3      	ldrh	r3, [r4, #12]
 8003d60:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003d64:	81a3      	strh	r3, [r4, #12]
 8003d66:	2300      	movs	r3, #0
 8003d68:	6063      	str	r3, [r4, #4]
 8003d6a:	6923      	ldr	r3, [r4, #16]
 8003d6c:	6023      	str	r3, [r4, #0]
 8003d6e:	89a3      	ldrh	r3, [r4, #12]
 8003d70:	f043 0308 	orr.w	r3, r3, #8
 8003d74:	81a3      	strh	r3, [r4, #12]
 8003d76:	6923      	ldr	r3, [r4, #16]
 8003d78:	b94b      	cbnz	r3, 8003d8e <__swsetup_r+0x9a>
 8003d7a:	89a3      	ldrh	r3, [r4, #12]
 8003d7c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003d80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d84:	d003      	beq.n	8003d8e <__swsetup_r+0x9a>
 8003d86:	4621      	mov	r1, r4
 8003d88:	4630      	mov	r0, r6
 8003d8a:	f000 fa01 	bl	8004190 <__smakebuf_r>
 8003d8e:	89a0      	ldrh	r0, [r4, #12]
 8003d90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003d94:	f010 0301 	ands.w	r3, r0, #1
 8003d98:	d00a      	beq.n	8003db0 <__swsetup_r+0xbc>
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	60a3      	str	r3, [r4, #8]
 8003d9e:	6963      	ldr	r3, [r4, #20]
 8003da0:	425b      	negs	r3, r3
 8003da2:	61a3      	str	r3, [r4, #24]
 8003da4:	6923      	ldr	r3, [r4, #16]
 8003da6:	b943      	cbnz	r3, 8003dba <__swsetup_r+0xc6>
 8003da8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003dac:	d1ba      	bne.n	8003d24 <__swsetup_r+0x30>
 8003dae:	bd70      	pop	{r4, r5, r6, pc}
 8003db0:	0781      	lsls	r1, r0, #30
 8003db2:	bf58      	it	pl
 8003db4:	6963      	ldrpl	r3, [r4, #20]
 8003db6:	60a3      	str	r3, [r4, #8]
 8003db8:	e7f4      	b.n	8003da4 <__swsetup_r+0xb0>
 8003dba:	2000      	movs	r0, #0
 8003dbc:	e7f7      	b.n	8003dae <__swsetup_r+0xba>
 8003dbe:	bf00      	nop
 8003dc0:	2000000c 	.word	0x2000000c
 8003dc4:	08004bf8 	.word	0x08004bf8
 8003dc8:	08004c18 	.word	0x08004c18
 8003dcc:	08004bd8 	.word	0x08004bd8

08003dd0 <__sflush_r>:
 8003dd0:	898a      	ldrh	r2, [r1, #12]
 8003dd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003dd6:	4605      	mov	r5, r0
 8003dd8:	0710      	lsls	r0, r2, #28
 8003dda:	460c      	mov	r4, r1
 8003ddc:	d458      	bmi.n	8003e90 <__sflush_r+0xc0>
 8003dde:	684b      	ldr	r3, [r1, #4]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	dc05      	bgt.n	8003df0 <__sflush_r+0x20>
 8003de4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	dc02      	bgt.n	8003df0 <__sflush_r+0x20>
 8003dea:	2000      	movs	r0, #0
 8003dec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003df0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003df2:	2e00      	cmp	r6, #0
 8003df4:	d0f9      	beq.n	8003dea <__sflush_r+0x1a>
 8003df6:	2300      	movs	r3, #0
 8003df8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003dfc:	682f      	ldr	r7, [r5, #0]
 8003dfe:	602b      	str	r3, [r5, #0]
 8003e00:	d032      	beq.n	8003e68 <__sflush_r+0x98>
 8003e02:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003e04:	89a3      	ldrh	r3, [r4, #12]
 8003e06:	075a      	lsls	r2, r3, #29
 8003e08:	d505      	bpl.n	8003e16 <__sflush_r+0x46>
 8003e0a:	6863      	ldr	r3, [r4, #4]
 8003e0c:	1ac0      	subs	r0, r0, r3
 8003e0e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003e10:	b10b      	cbz	r3, 8003e16 <__sflush_r+0x46>
 8003e12:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003e14:	1ac0      	subs	r0, r0, r3
 8003e16:	2300      	movs	r3, #0
 8003e18:	4602      	mov	r2, r0
 8003e1a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003e1c:	6a21      	ldr	r1, [r4, #32]
 8003e1e:	4628      	mov	r0, r5
 8003e20:	47b0      	blx	r6
 8003e22:	1c43      	adds	r3, r0, #1
 8003e24:	89a3      	ldrh	r3, [r4, #12]
 8003e26:	d106      	bne.n	8003e36 <__sflush_r+0x66>
 8003e28:	6829      	ldr	r1, [r5, #0]
 8003e2a:	291d      	cmp	r1, #29
 8003e2c:	d82c      	bhi.n	8003e88 <__sflush_r+0xb8>
 8003e2e:	4a2a      	ldr	r2, [pc, #168]	; (8003ed8 <__sflush_r+0x108>)
 8003e30:	40ca      	lsrs	r2, r1
 8003e32:	07d6      	lsls	r6, r2, #31
 8003e34:	d528      	bpl.n	8003e88 <__sflush_r+0xb8>
 8003e36:	2200      	movs	r2, #0
 8003e38:	6062      	str	r2, [r4, #4]
 8003e3a:	04d9      	lsls	r1, r3, #19
 8003e3c:	6922      	ldr	r2, [r4, #16]
 8003e3e:	6022      	str	r2, [r4, #0]
 8003e40:	d504      	bpl.n	8003e4c <__sflush_r+0x7c>
 8003e42:	1c42      	adds	r2, r0, #1
 8003e44:	d101      	bne.n	8003e4a <__sflush_r+0x7a>
 8003e46:	682b      	ldr	r3, [r5, #0]
 8003e48:	b903      	cbnz	r3, 8003e4c <__sflush_r+0x7c>
 8003e4a:	6560      	str	r0, [r4, #84]	; 0x54
 8003e4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003e4e:	602f      	str	r7, [r5, #0]
 8003e50:	2900      	cmp	r1, #0
 8003e52:	d0ca      	beq.n	8003dea <__sflush_r+0x1a>
 8003e54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003e58:	4299      	cmp	r1, r3
 8003e5a:	d002      	beq.n	8003e62 <__sflush_r+0x92>
 8003e5c:	4628      	mov	r0, r5
 8003e5e:	f000 f9d7 	bl	8004210 <_free_r>
 8003e62:	2000      	movs	r0, #0
 8003e64:	6360      	str	r0, [r4, #52]	; 0x34
 8003e66:	e7c1      	b.n	8003dec <__sflush_r+0x1c>
 8003e68:	6a21      	ldr	r1, [r4, #32]
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	4628      	mov	r0, r5
 8003e6e:	47b0      	blx	r6
 8003e70:	1c41      	adds	r1, r0, #1
 8003e72:	d1c7      	bne.n	8003e04 <__sflush_r+0x34>
 8003e74:	682b      	ldr	r3, [r5, #0]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d0c4      	beq.n	8003e04 <__sflush_r+0x34>
 8003e7a:	2b1d      	cmp	r3, #29
 8003e7c:	d001      	beq.n	8003e82 <__sflush_r+0xb2>
 8003e7e:	2b16      	cmp	r3, #22
 8003e80:	d101      	bne.n	8003e86 <__sflush_r+0xb6>
 8003e82:	602f      	str	r7, [r5, #0]
 8003e84:	e7b1      	b.n	8003dea <__sflush_r+0x1a>
 8003e86:	89a3      	ldrh	r3, [r4, #12]
 8003e88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e8c:	81a3      	strh	r3, [r4, #12]
 8003e8e:	e7ad      	b.n	8003dec <__sflush_r+0x1c>
 8003e90:	690f      	ldr	r7, [r1, #16]
 8003e92:	2f00      	cmp	r7, #0
 8003e94:	d0a9      	beq.n	8003dea <__sflush_r+0x1a>
 8003e96:	0793      	lsls	r3, r2, #30
 8003e98:	680e      	ldr	r6, [r1, #0]
 8003e9a:	bf08      	it	eq
 8003e9c:	694b      	ldreq	r3, [r1, #20]
 8003e9e:	600f      	str	r7, [r1, #0]
 8003ea0:	bf18      	it	ne
 8003ea2:	2300      	movne	r3, #0
 8003ea4:	eba6 0807 	sub.w	r8, r6, r7
 8003ea8:	608b      	str	r3, [r1, #8]
 8003eaa:	f1b8 0f00 	cmp.w	r8, #0
 8003eae:	dd9c      	ble.n	8003dea <__sflush_r+0x1a>
 8003eb0:	6a21      	ldr	r1, [r4, #32]
 8003eb2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003eb4:	4643      	mov	r3, r8
 8003eb6:	463a      	mov	r2, r7
 8003eb8:	4628      	mov	r0, r5
 8003eba:	47b0      	blx	r6
 8003ebc:	2800      	cmp	r0, #0
 8003ebe:	dc06      	bgt.n	8003ece <__sflush_r+0xfe>
 8003ec0:	89a3      	ldrh	r3, [r4, #12]
 8003ec2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ec6:	81a3      	strh	r3, [r4, #12]
 8003ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8003ecc:	e78e      	b.n	8003dec <__sflush_r+0x1c>
 8003ece:	4407      	add	r7, r0
 8003ed0:	eba8 0800 	sub.w	r8, r8, r0
 8003ed4:	e7e9      	b.n	8003eaa <__sflush_r+0xda>
 8003ed6:	bf00      	nop
 8003ed8:	20400001 	.word	0x20400001

08003edc <_fflush_r>:
 8003edc:	b538      	push	{r3, r4, r5, lr}
 8003ede:	690b      	ldr	r3, [r1, #16]
 8003ee0:	4605      	mov	r5, r0
 8003ee2:	460c      	mov	r4, r1
 8003ee4:	b913      	cbnz	r3, 8003eec <_fflush_r+0x10>
 8003ee6:	2500      	movs	r5, #0
 8003ee8:	4628      	mov	r0, r5
 8003eea:	bd38      	pop	{r3, r4, r5, pc}
 8003eec:	b118      	cbz	r0, 8003ef6 <_fflush_r+0x1a>
 8003eee:	6983      	ldr	r3, [r0, #24]
 8003ef0:	b90b      	cbnz	r3, 8003ef6 <_fflush_r+0x1a>
 8003ef2:	f000 f887 	bl	8004004 <__sinit>
 8003ef6:	4b14      	ldr	r3, [pc, #80]	; (8003f48 <_fflush_r+0x6c>)
 8003ef8:	429c      	cmp	r4, r3
 8003efa:	d11b      	bne.n	8003f34 <_fflush_r+0x58>
 8003efc:	686c      	ldr	r4, [r5, #4]
 8003efe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d0ef      	beq.n	8003ee6 <_fflush_r+0xa>
 8003f06:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003f08:	07d0      	lsls	r0, r2, #31
 8003f0a:	d404      	bmi.n	8003f16 <_fflush_r+0x3a>
 8003f0c:	0599      	lsls	r1, r3, #22
 8003f0e:	d402      	bmi.n	8003f16 <_fflush_r+0x3a>
 8003f10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003f12:	f000 f915 	bl	8004140 <__retarget_lock_acquire_recursive>
 8003f16:	4628      	mov	r0, r5
 8003f18:	4621      	mov	r1, r4
 8003f1a:	f7ff ff59 	bl	8003dd0 <__sflush_r>
 8003f1e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003f20:	07da      	lsls	r2, r3, #31
 8003f22:	4605      	mov	r5, r0
 8003f24:	d4e0      	bmi.n	8003ee8 <_fflush_r+0xc>
 8003f26:	89a3      	ldrh	r3, [r4, #12]
 8003f28:	059b      	lsls	r3, r3, #22
 8003f2a:	d4dd      	bmi.n	8003ee8 <_fflush_r+0xc>
 8003f2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003f2e:	f000 f908 	bl	8004142 <__retarget_lock_release_recursive>
 8003f32:	e7d9      	b.n	8003ee8 <_fflush_r+0xc>
 8003f34:	4b05      	ldr	r3, [pc, #20]	; (8003f4c <_fflush_r+0x70>)
 8003f36:	429c      	cmp	r4, r3
 8003f38:	d101      	bne.n	8003f3e <_fflush_r+0x62>
 8003f3a:	68ac      	ldr	r4, [r5, #8]
 8003f3c:	e7df      	b.n	8003efe <_fflush_r+0x22>
 8003f3e:	4b04      	ldr	r3, [pc, #16]	; (8003f50 <_fflush_r+0x74>)
 8003f40:	429c      	cmp	r4, r3
 8003f42:	bf08      	it	eq
 8003f44:	68ec      	ldreq	r4, [r5, #12]
 8003f46:	e7da      	b.n	8003efe <_fflush_r+0x22>
 8003f48:	08004bf8 	.word	0x08004bf8
 8003f4c:	08004c18 	.word	0x08004c18
 8003f50:	08004bd8 	.word	0x08004bd8

08003f54 <std>:
 8003f54:	2300      	movs	r3, #0
 8003f56:	b510      	push	{r4, lr}
 8003f58:	4604      	mov	r4, r0
 8003f5a:	e9c0 3300 	strd	r3, r3, [r0]
 8003f5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003f62:	6083      	str	r3, [r0, #8]
 8003f64:	8181      	strh	r1, [r0, #12]
 8003f66:	6643      	str	r3, [r0, #100]	; 0x64
 8003f68:	81c2      	strh	r2, [r0, #14]
 8003f6a:	6183      	str	r3, [r0, #24]
 8003f6c:	4619      	mov	r1, r3
 8003f6e:	2208      	movs	r2, #8
 8003f70:	305c      	adds	r0, #92	; 0x5c
 8003f72:	f7ff fdd7 	bl	8003b24 <memset>
 8003f76:	4b05      	ldr	r3, [pc, #20]	; (8003f8c <std+0x38>)
 8003f78:	6263      	str	r3, [r4, #36]	; 0x24
 8003f7a:	4b05      	ldr	r3, [pc, #20]	; (8003f90 <std+0x3c>)
 8003f7c:	62a3      	str	r3, [r4, #40]	; 0x28
 8003f7e:	4b05      	ldr	r3, [pc, #20]	; (8003f94 <std+0x40>)
 8003f80:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003f82:	4b05      	ldr	r3, [pc, #20]	; (8003f98 <std+0x44>)
 8003f84:	6224      	str	r4, [r4, #32]
 8003f86:	6323      	str	r3, [r4, #48]	; 0x30
 8003f88:	bd10      	pop	{r4, pc}
 8003f8a:	bf00      	nop
 8003f8c:	080049cd 	.word	0x080049cd
 8003f90:	080049ef 	.word	0x080049ef
 8003f94:	08004a27 	.word	0x08004a27
 8003f98:	08004a4b 	.word	0x08004a4b

08003f9c <_cleanup_r>:
 8003f9c:	4901      	ldr	r1, [pc, #4]	; (8003fa4 <_cleanup_r+0x8>)
 8003f9e:	f000 b8af 	b.w	8004100 <_fwalk_reent>
 8003fa2:	bf00      	nop
 8003fa4:	08003edd 	.word	0x08003edd

08003fa8 <__sfmoreglue>:
 8003fa8:	b570      	push	{r4, r5, r6, lr}
 8003faa:	2268      	movs	r2, #104	; 0x68
 8003fac:	1e4d      	subs	r5, r1, #1
 8003fae:	4355      	muls	r5, r2
 8003fb0:	460e      	mov	r6, r1
 8003fb2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003fb6:	f000 f997 	bl	80042e8 <_malloc_r>
 8003fba:	4604      	mov	r4, r0
 8003fbc:	b140      	cbz	r0, 8003fd0 <__sfmoreglue+0x28>
 8003fbe:	2100      	movs	r1, #0
 8003fc0:	e9c0 1600 	strd	r1, r6, [r0]
 8003fc4:	300c      	adds	r0, #12
 8003fc6:	60a0      	str	r0, [r4, #8]
 8003fc8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003fcc:	f7ff fdaa 	bl	8003b24 <memset>
 8003fd0:	4620      	mov	r0, r4
 8003fd2:	bd70      	pop	{r4, r5, r6, pc}

08003fd4 <__sfp_lock_acquire>:
 8003fd4:	4801      	ldr	r0, [pc, #4]	; (8003fdc <__sfp_lock_acquire+0x8>)
 8003fd6:	f000 b8b3 	b.w	8004140 <__retarget_lock_acquire_recursive>
 8003fda:	bf00      	nop
 8003fdc:	200001cd 	.word	0x200001cd

08003fe0 <__sfp_lock_release>:
 8003fe0:	4801      	ldr	r0, [pc, #4]	; (8003fe8 <__sfp_lock_release+0x8>)
 8003fe2:	f000 b8ae 	b.w	8004142 <__retarget_lock_release_recursive>
 8003fe6:	bf00      	nop
 8003fe8:	200001cd 	.word	0x200001cd

08003fec <__sinit_lock_acquire>:
 8003fec:	4801      	ldr	r0, [pc, #4]	; (8003ff4 <__sinit_lock_acquire+0x8>)
 8003fee:	f000 b8a7 	b.w	8004140 <__retarget_lock_acquire_recursive>
 8003ff2:	bf00      	nop
 8003ff4:	200001ce 	.word	0x200001ce

08003ff8 <__sinit_lock_release>:
 8003ff8:	4801      	ldr	r0, [pc, #4]	; (8004000 <__sinit_lock_release+0x8>)
 8003ffa:	f000 b8a2 	b.w	8004142 <__retarget_lock_release_recursive>
 8003ffe:	bf00      	nop
 8004000:	200001ce 	.word	0x200001ce

08004004 <__sinit>:
 8004004:	b510      	push	{r4, lr}
 8004006:	4604      	mov	r4, r0
 8004008:	f7ff fff0 	bl	8003fec <__sinit_lock_acquire>
 800400c:	69a3      	ldr	r3, [r4, #24]
 800400e:	b11b      	cbz	r3, 8004018 <__sinit+0x14>
 8004010:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004014:	f7ff bff0 	b.w	8003ff8 <__sinit_lock_release>
 8004018:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800401c:	6523      	str	r3, [r4, #80]	; 0x50
 800401e:	4b13      	ldr	r3, [pc, #76]	; (800406c <__sinit+0x68>)
 8004020:	4a13      	ldr	r2, [pc, #76]	; (8004070 <__sinit+0x6c>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	62a2      	str	r2, [r4, #40]	; 0x28
 8004026:	42a3      	cmp	r3, r4
 8004028:	bf04      	itt	eq
 800402a:	2301      	moveq	r3, #1
 800402c:	61a3      	streq	r3, [r4, #24]
 800402e:	4620      	mov	r0, r4
 8004030:	f000 f820 	bl	8004074 <__sfp>
 8004034:	6060      	str	r0, [r4, #4]
 8004036:	4620      	mov	r0, r4
 8004038:	f000 f81c 	bl	8004074 <__sfp>
 800403c:	60a0      	str	r0, [r4, #8]
 800403e:	4620      	mov	r0, r4
 8004040:	f000 f818 	bl	8004074 <__sfp>
 8004044:	2200      	movs	r2, #0
 8004046:	60e0      	str	r0, [r4, #12]
 8004048:	2104      	movs	r1, #4
 800404a:	6860      	ldr	r0, [r4, #4]
 800404c:	f7ff ff82 	bl	8003f54 <std>
 8004050:	68a0      	ldr	r0, [r4, #8]
 8004052:	2201      	movs	r2, #1
 8004054:	2109      	movs	r1, #9
 8004056:	f7ff ff7d 	bl	8003f54 <std>
 800405a:	68e0      	ldr	r0, [r4, #12]
 800405c:	2202      	movs	r2, #2
 800405e:	2112      	movs	r1, #18
 8004060:	f7ff ff78 	bl	8003f54 <std>
 8004064:	2301      	movs	r3, #1
 8004066:	61a3      	str	r3, [r4, #24]
 8004068:	e7d2      	b.n	8004010 <__sinit+0xc>
 800406a:	bf00      	nop
 800406c:	08004bd4 	.word	0x08004bd4
 8004070:	08003f9d 	.word	0x08003f9d

08004074 <__sfp>:
 8004074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004076:	4607      	mov	r7, r0
 8004078:	f7ff ffac 	bl	8003fd4 <__sfp_lock_acquire>
 800407c:	4b1e      	ldr	r3, [pc, #120]	; (80040f8 <__sfp+0x84>)
 800407e:	681e      	ldr	r6, [r3, #0]
 8004080:	69b3      	ldr	r3, [r6, #24]
 8004082:	b913      	cbnz	r3, 800408a <__sfp+0x16>
 8004084:	4630      	mov	r0, r6
 8004086:	f7ff ffbd 	bl	8004004 <__sinit>
 800408a:	3648      	adds	r6, #72	; 0x48
 800408c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004090:	3b01      	subs	r3, #1
 8004092:	d503      	bpl.n	800409c <__sfp+0x28>
 8004094:	6833      	ldr	r3, [r6, #0]
 8004096:	b30b      	cbz	r3, 80040dc <__sfp+0x68>
 8004098:	6836      	ldr	r6, [r6, #0]
 800409a:	e7f7      	b.n	800408c <__sfp+0x18>
 800409c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80040a0:	b9d5      	cbnz	r5, 80040d8 <__sfp+0x64>
 80040a2:	4b16      	ldr	r3, [pc, #88]	; (80040fc <__sfp+0x88>)
 80040a4:	60e3      	str	r3, [r4, #12]
 80040a6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80040aa:	6665      	str	r5, [r4, #100]	; 0x64
 80040ac:	f000 f847 	bl	800413e <__retarget_lock_init_recursive>
 80040b0:	f7ff ff96 	bl	8003fe0 <__sfp_lock_release>
 80040b4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80040b8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80040bc:	6025      	str	r5, [r4, #0]
 80040be:	61a5      	str	r5, [r4, #24]
 80040c0:	2208      	movs	r2, #8
 80040c2:	4629      	mov	r1, r5
 80040c4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80040c8:	f7ff fd2c 	bl	8003b24 <memset>
 80040cc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80040d0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80040d4:	4620      	mov	r0, r4
 80040d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80040d8:	3468      	adds	r4, #104	; 0x68
 80040da:	e7d9      	b.n	8004090 <__sfp+0x1c>
 80040dc:	2104      	movs	r1, #4
 80040de:	4638      	mov	r0, r7
 80040e0:	f7ff ff62 	bl	8003fa8 <__sfmoreglue>
 80040e4:	4604      	mov	r4, r0
 80040e6:	6030      	str	r0, [r6, #0]
 80040e8:	2800      	cmp	r0, #0
 80040ea:	d1d5      	bne.n	8004098 <__sfp+0x24>
 80040ec:	f7ff ff78 	bl	8003fe0 <__sfp_lock_release>
 80040f0:	230c      	movs	r3, #12
 80040f2:	603b      	str	r3, [r7, #0]
 80040f4:	e7ee      	b.n	80040d4 <__sfp+0x60>
 80040f6:	bf00      	nop
 80040f8:	08004bd4 	.word	0x08004bd4
 80040fc:	ffff0001 	.word	0xffff0001

08004100 <_fwalk_reent>:
 8004100:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004104:	4606      	mov	r6, r0
 8004106:	4688      	mov	r8, r1
 8004108:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800410c:	2700      	movs	r7, #0
 800410e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004112:	f1b9 0901 	subs.w	r9, r9, #1
 8004116:	d505      	bpl.n	8004124 <_fwalk_reent+0x24>
 8004118:	6824      	ldr	r4, [r4, #0]
 800411a:	2c00      	cmp	r4, #0
 800411c:	d1f7      	bne.n	800410e <_fwalk_reent+0xe>
 800411e:	4638      	mov	r0, r7
 8004120:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004124:	89ab      	ldrh	r3, [r5, #12]
 8004126:	2b01      	cmp	r3, #1
 8004128:	d907      	bls.n	800413a <_fwalk_reent+0x3a>
 800412a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800412e:	3301      	adds	r3, #1
 8004130:	d003      	beq.n	800413a <_fwalk_reent+0x3a>
 8004132:	4629      	mov	r1, r5
 8004134:	4630      	mov	r0, r6
 8004136:	47c0      	blx	r8
 8004138:	4307      	orrs	r7, r0
 800413a:	3568      	adds	r5, #104	; 0x68
 800413c:	e7e9      	b.n	8004112 <_fwalk_reent+0x12>

0800413e <__retarget_lock_init_recursive>:
 800413e:	4770      	bx	lr

08004140 <__retarget_lock_acquire_recursive>:
 8004140:	4770      	bx	lr

08004142 <__retarget_lock_release_recursive>:
 8004142:	4770      	bx	lr

08004144 <__swhatbuf_r>:
 8004144:	b570      	push	{r4, r5, r6, lr}
 8004146:	460e      	mov	r6, r1
 8004148:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800414c:	2900      	cmp	r1, #0
 800414e:	b096      	sub	sp, #88	; 0x58
 8004150:	4614      	mov	r4, r2
 8004152:	461d      	mov	r5, r3
 8004154:	da08      	bge.n	8004168 <__swhatbuf_r+0x24>
 8004156:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800415a:	2200      	movs	r2, #0
 800415c:	602a      	str	r2, [r5, #0]
 800415e:	061a      	lsls	r2, r3, #24
 8004160:	d410      	bmi.n	8004184 <__swhatbuf_r+0x40>
 8004162:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004166:	e00e      	b.n	8004186 <__swhatbuf_r+0x42>
 8004168:	466a      	mov	r2, sp
 800416a:	f000 fc95 	bl	8004a98 <_fstat_r>
 800416e:	2800      	cmp	r0, #0
 8004170:	dbf1      	blt.n	8004156 <__swhatbuf_r+0x12>
 8004172:	9a01      	ldr	r2, [sp, #4]
 8004174:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004178:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800417c:	425a      	negs	r2, r3
 800417e:	415a      	adcs	r2, r3
 8004180:	602a      	str	r2, [r5, #0]
 8004182:	e7ee      	b.n	8004162 <__swhatbuf_r+0x1e>
 8004184:	2340      	movs	r3, #64	; 0x40
 8004186:	2000      	movs	r0, #0
 8004188:	6023      	str	r3, [r4, #0]
 800418a:	b016      	add	sp, #88	; 0x58
 800418c:	bd70      	pop	{r4, r5, r6, pc}
	...

08004190 <__smakebuf_r>:
 8004190:	898b      	ldrh	r3, [r1, #12]
 8004192:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004194:	079d      	lsls	r5, r3, #30
 8004196:	4606      	mov	r6, r0
 8004198:	460c      	mov	r4, r1
 800419a:	d507      	bpl.n	80041ac <__smakebuf_r+0x1c>
 800419c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80041a0:	6023      	str	r3, [r4, #0]
 80041a2:	6123      	str	r3, [r4, #16]
 80041a4:	2301      	movs	r3, #1
 80041a6:	6163      	str	r3, [r4, #20]
 80041a8:	b002      	add	sp, #8
 80041aa:	bd70      	pop	{r4, r5, r6, pc}
 80041ac:	ab01      	add	r3, sp, #4
 80041ae:	466a      	mov	r2, sp
 80041b0:	f7ff ffc8 	bl	8004144 <__swhatbuf_r>
 80041b4:	9900      	ldr	r1, [sp, #0]
 80041b6:	4605      	mov	r5, r0
 80041b8:	4630      	mov	r0, r6
 80041ba:	f000 f895 	bl	80042e8 <_malloc_r>
 80041be:	b948      	cbnz	r0, 80041d4 <__smakebuf_r+0x44>
 80041c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80041c4:	059a      	lsls	r2, r3, #22
 80041c6:	d4ef      	bmi.n	80041a8 <__smakebuf_r+0x18>
 80041c8:	f023 0303 	bic.w	r3, r3, #3
 80041cc:	f043 0302 	orr.w	r3, r3, #2
 80041d0:	81a3      	strh	r3, [r4, #12]
 80041d2:	e7e3      	b.n	800419c <__smakebuf_r+0xc>
 80041d4:	4b0d      	ldr	r3, [pc, #52]	; (800420c <__smakebuf_r+0x7c>)
 80041d6:	62b3      	str	r3, [r6, #40]	; 0x28
 80041d8:	89a3      	ldrh	r3, [r4, #12]
 80041da:	6020      	str	r0, [r4, #0]
 80041dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041e0:	81a3      	strh	r3, [r4, #12]
 80041e2:	9b00      	ldr	r3, [sp, #0]
 80041e4:	6163      	str	r3, [r4, #20]
 80041e6:	9b01      	ldr	r3, [sp, #4]
 80041e8:	6120      	str	r0, [r4, #16]
 80041ea:	b15b      	cbz	r3, 8004204 <__smakebuf_r+0x74>
 80041ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80041f0:	4630      	mov	r0, r6
 80041f2:	f000 fc63 	bl	8004abc <_isatty_r>
 80041f6:	b128      	cbz	r0, 8004204 <__smakebuf_r+0x74>
 80041f8:	89a3      	ldrh	r3, [r4, #12]
 80041fa:	f023 0303 	bic.w	r3, r3, #3
 80041fe:	f043 0301 	orr.w	r3, r3, #1
 8004202:	81a3      	strh	r3, [r4, #12]
 8004204:	89a0      	ldrh	r0, [r4, #12]
 8004206:	4305      	orrs	r5, r0
 8004208:	81a5      	strh	r5, [r4, #12]
 800420a:	e7cd      	b.n	80041a8 <__smakebuf_r+0x18>
 800420c:	08003f9d 	.word	0x08003f9d

08004210 <_free_r>:
 8004210:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004212:	2900      	cmp	r1, #0
 8004214:	d044      	beq.n	80042a0 <_free_r+0x90>
 8004216:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800421a:	9001      	str	r0, [sp, #4]
 800421c:	2b00      	cmp	r3, #0
 800421e:	f1a1 0404 	sub.w	r4, r1, #4
 8004222:	bfb8      	it	lt
 8004224:	18e4      	addlt	r4, r4, r3
 8004226:	f000 fc6b 	bl	8004b00 <__malloc_lock>
 800422a:	4a1e      	ldr	r2, [pc, #120]	; (80042a4 <_free_r+0x94>)
 800422c:	9801      	ldr	r0, [sp, #4]
 800422e:	6813      	ldr	r3, [r2, #0]
 8004230:	b933      	cbnz	r3, 8004240 <_free_r+0x30>
 8004232:	6063      	str	r3, [r4, #4]
 8004234:	6014      	str	r4, [r2, #0]
 8004236:	b003      	add	sp, #12
 8004238:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800423c:	f000 bc66 	b.w	8004b0c <__malloc_unlock>
 8004240:	42a3      	cmp	r3, r4
 8004242:	d908      	bls.n	8004256 <_free_r+0x46>
 8004244:	6825      	ldr	r5, [r4, #0]
 8004246:	1961      	adds	r1, r4, r5
 8004248:	428b      	cmp	r3, r1
 800424a:	bf01      	itttt	eq
 800424c:	6819      	ldreq	r1, [r3, #0]
 800424e:	685b      	ldreq	r3, [r3, #4]
 8004250:	1949      	addeq	r1, r1, r5
 8004252:	6021      	streq	r1, [r4, #0]
 8004254:	e7ed      	b.n	8004232 <_free_r+0x22>
 8004256:	461a      	mov	r2, r3
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	b10b      	cbz	r3, 8004260 <_free_r+0x50>
 800425c:	42a3      	cmp	r3, r4
 800425e:	d9fa      	bls.n	8004256 <_free_r+0x46>
 8004260:	6811      	ldr	r1, [r2, #0]
 8004262:	1855      	adds	r5, r2, r1
 8004264:	42a5      	cmp	r5, r4
 8004266:	d10b      	bne.n	8004280 <_free_r+0x70>
 8004268:	6824      	ldr	r4, [r4, #0]
 800426a:	4421      	add	r1, r4
 800426c:	1854      	adds	r4, r2, r1
 800426e:	42a3      	cmp	r3, r4
 8004270:	6011      	str	r1, [r2, #0]
 8004272:	d1e0      	bne.n	8004236 <_free_r+0x26>
 8004274:	681c      	ldr	r4, [r3, #0]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	6053      	str	r3, [r2, #4]
 800427a:	4421      	add	r1, r4
 800427c:	6011      	str	r1, [r2, #0]
 800427e:	e7da      	b.n	8004236 <_free_r+0x26>
 8004280:	d902      	bls.n	8004288 <_free_r+0x78>
 8004282:	230c      	movs	r3, #12
 8004284:	6003      	str	r3, [r0, #0]
 8004286:	e7d6      	b.n	8004236 <_free_r+0x26>
 8004288:	6825      	ldr	r5, [r4, #0]
 800428a:	1961      	adds	r1, r4, r5
 800428c:	428b      	cmp	r3, r1
 800428e:	bf04      	itt	eq
 8004290:	6819      	ldreq	r1, [r3, #0]
 8004292:	685b      	ldreq	r3, [r3, #4]
 8004294:	6063      	str	r3, [r4, #4]
 8004296:	bf04      	itt	eq
 8004298:	1949      	addeq	r1, r1, r5
 800429a:	6021      	streq	r1, [r4, #0]
 800429c:	6054      	str	r4, [r2, #4]
 800429e:	e7ca      	b.n	8004236 <_free_r+0x26>
 80042a0:	b003      	add	sp, #12
 80042a2:	bd30      	pop	{r4, r5, pc}
 80042a4:	200001d0 	.word	0x200001d0

080042a8 <sbrk_aligned>:
 80042a8:	b570      	push	{r4, r5, r6, lr}
 80042aa:	4e0e      	ldr	r6, [pc, #56]	; (80042e4 <sbrk_aligned+0x3c>)
 80042ac:	460c      	mov	r4, r1
 80042ae:	6831      	ldr	r1, [r6, #0]
 80042b0:	4605      	mov	r5, r0
 80042b2:	b911      	cbnz	r1, 80042ba <sbrk_aligned+0x12>
 80042b4:	f000 fb7a 	bl	80049ac <_sbrk_r>
 80042b8:	6030      	str	r0, [r6, #0]
 80042ba:	4621      	mov	r1, r4
 80042bc:	4628      	mov	r0, r5
 80042be:	f000 fb75 	bl	80049ac <_sbrk_r>
 80042c2:	1c43      	adds	r3, r0, #1
 80042c4:	d00a      	beq.n	80042dc <sbrk_aligned+0x34>
 80042c6:	1cc4      	adds	r4, r0, #3
 80042c8:	f024 0403 	bic.w	r4, r4, #3
 80042cc:	42a0      	cmp	r0, r4
 80042ce:	d007      	beq.n	80042e0 <sbrk_aligned+0x38>
 80042d0:	1a21      	subs	r1, r4, r0
 80042d2:	4628      	mov	r0, r5
 80042d4:	f000 fb6a 	bl	80049ac <_sbrk_r>
 80042d8:	3001      	adds	r0, #1
 80042da:	d101      	bne.n	80042e0 <sbrk_aligned+0x38>
 80042dc:	f04f 34ff 	mov.w	r4, #4294967295
 80042e0:	4620      	mov	r0, r4
 80042e2:	bd70      	pop	{r4, r5, r6, pc}
 80042e4:	200001d4 	.word	0x200001d4

080042e8 <_malloc_r>:
 80042e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042ec:	1ccd      	adds	r5, r1, #3
 80042ee:	f025 0503 	bic.w	r5, r5, #3
 80042f2:	3508      	adds	r5, #8
 80042f4:	2d0c      	cmp	r5, #12
 80042f6:	bf38      	it	cc
 80042f8:	250c      	movcc	r5, #12
 80042fa:	2d00      	cmp	r5, #0
 80042fc:	4607      	mov	r7, r0
 80042fe:	db01      	blt.n	8004304 <_malloc_r+0x1c>
 8004300:	42a9      	cmp	r1, r5
 8004302:	d905      	bls.n	8004310 <_malloc_r+0x28>
 8004304:	230c      	movs	r3, #12
 8004306:	603b      	str	r3, [r7, #0]
 8004308:	2600      	movs	r6, #0
 800430a:	4630      	mov	r0, r6
 800430c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004310:	4e2e      	ldr	r6, [pc, #184]	; (80043cc <_malloc_r+0xe4>)
 8004312:	f000 fbf5 	bl	8004b00 <__malloc_lock>
 8004316:	6833      	ldr	r3, [r6, #0]
 8004318:	461c      	mov	r4, r3
 800431a:	bb34      	cbnz	r4, 800436a <_malloc_r+0x82>
 800431c:	4629      	mov	r1, r5
 800431e:	4638      	mov	r0, r7
 8004320:	f7ff ffc2 	bl	80042a8 <sbrk_aligned>
 8004324:	1c43      	adds	r3, r0, #1
 8004326:	4604      	mov	r4, r0
 8004328:	d14d      	bne.n	80043c6 <_malloc_r+0xde>
 800432a:	6834      	ldr	r4, [r6, #0]
 800432c:	4626      	mov	r6, r4
 800432e:	2e00      	cmp	r6, #0
 8004330:	d140      	bne.n	80043b4 <_malloc_r+0xcc>
 8004332:	6823      	ldr	r3, [r4, #0]
 8004334:	4631      	mov	r1, r6
 8004336:	4638      	mov	r0, r7
 8004338:	eb04 0803 	add.w	r8, r4, r3
 800433c:	f000 fb36 	bl	80049ac <_sbrk_r>
 8004340:	4580      	cmp	r8, r0
 8004342:	d13a      	bne.n	80043ba <_malloc_r+0xd2>
 8004344:	6821      	ldr	r1, [r4, #0]
 8004346:	3503      	adds	r5, #3
 8004348:	1a6d      	subs	r5, r5, r1
 800434a:	f025 0503 	bic.w	r5, r5, #3
 800434e:	3508      	adds	r5, #8
 8004350:	2d0c      	cmp	r5, #12
 8004352:	bf38      	it	cc
 8004354:	250c      	movcc	r5, #12
 8004356:	4629      	mov	r1, r5
 8004358:	4638      	mov	r0, r7
 800435a:	f7ff ffa5 	bl	80042a8 <sbrk_aligned>
 800435e:	3001      	adds	r0, #1
 8004360:	d02b      	beq.n	80043ba <_malloc_r+0xd2>
 8004362:	6823      	ldr	r3, [r4, #0]
 8004364:	442b      	add	r3, r5
 8004366:	6023      	str	r3, [r4, #0]
 8004368:	e00e      	b.n	8004388 <_malloc_r+0xa0>
 800436a:	6822      	ldr	r2, [r4, #0]
 800436c:	1b52      	subs	r2, r2, r5
 800436e:	d41e      	bmi.n	80043ae <_malloc_r+0xc6>
 8004370:	2a0b      	cmp	r2, #11
 8004372:	d916      	bls.n	80043a2 <_malloc_r+0xba>
 8004374:	1961      	adds	r1, r4, r5
 8004376:	42a3      	cmp	r3, r4
 8004378:	6025      	str	r5, [r4, #0]
 800437a:	bf18      	it	ne
 800437c:	6059      	strne	r1, [r3, #4]
 800437e:	6863      	ldr	r3, [r4, #4]
 8004380:	bf08      	it	eq
 8004382:	6031      	streq	r1, [r6, #0]
 8004384:	5162      	str	r2, [r4, r5]
 8004386:	604b      	str	r3, [r1, #4]
 8004388:	4638      	mov	r0, r7
 800438a:	f104 060b 	add.w	r6, r4, #11
 800438e:	f000 fbbd 	bl	8004b0c <__malloc_unlock>
 8004392:	f026 0607 	bic.w	r6, r6, #7
 8004396:	1d23      	adds	r3, r4, #4
 8004398:	1af2      	subs	r2, r6, r3
 800439a:	d0b6      	beq.n	800430a <_malloc_r+0x22>
 800439c:	1b9b      	subs	r3, r3, r6
 800439e:	50a3      	str	r3, [r4, r2]
 80043a0:	e7b3      	b.n	800430a <_malloc_r+0x22>
 80043a2:	6862      	ldr	r2, [r4, #4]
 80043a4:	42a3      	cmp	r3, r4
 80043a6:	bf0c      	ite	eq
 80043a8:	6032      	streq	r2, [r6, #0]
 80043aa:	605a      	strne	r2, [r3, #4]
 80043ac:	e7ec      	b.n	8004388 <_malloc_r+0xa0>
 80043ae:	4623      	mov	r3, r4
 80043b0:	6864      	ldr	r4, [r4, #4]
 80043b2:	e7b2      	b.n	800431a <_malloc_r+0x32>
 80043b4:	4634      	mov	r4, r6
 80043b6:	6876      	ldr	r6, [r6, #4]
 80043b8:	e7b9      	b.n	800432e <_malloc_r+0x46>
 80043ba:	230c      	movs	r3, #12
 80043bc:	603b      	str	r3, [r7, #0]
 80043be:	4638      	mov	r0, r7
 80043c0:	f000 fba4 	bl	8004b0c <__malloc_unlock>
 80043c4:	e7a1      	b.n	800430a <_malloc_r+0x22>
 80043c6:	6025      	str	r5, [r4, #0]
 80043c8:	e7de      	b.n	8004388 <_malloc_r+0xa0>
 80043ca:	bf00      	nop
 80043cc:	200001d0 	.word	0x200001d0

080043d0 <__sfputc_r>:
 80043d0:	6893      	ldr	r3, [r2, #8]
 80043d2:	3b01      	subs	r3, #1
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	b410      	push	{r4}
 80043d8:	6093      	str	r3, [r2, #8]
 80043da:	da08      	bge.n	80043ee <__sfputc_r+0x1e>
 80043dc:	6994      	ldr	r4, [r2, #24]
 80043de:	42a3      	cmp	r3, r4
 80043e0:	db01      	blt.n	80043e6 <__sfputc_r+0x16>
 80043e2:	290a      	cmp	r1, #10
 80043e4:	d103      	bne.n	80043ee <__sfputc_r+0x1e>
 80043e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80043ea:	f7ff bc31 	b.w	8003c50 <__swbuf_r>
 80043ee:	6813      	ldr	r3, [r2, #0]
 80043f0:	1c58      	adds	r0, r3, #1
 80043f2:	6010      	str	r0, [r2, #0]
 80043f4:	7019      	strb	r1, [r3, #0]
 80043f6:	4608      	mov	r0, r1
 80043f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80043fc:	4770      	bx	lr

080043fe <__sfputs_r>:
 80043fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004400:	4606      	mov	r6, r0
 8004402:	460f      	mov	r7, r1
 8004404:	4614      	mov	r4, r2
 8004406:	18d5      	adds	r5, r2, r3
 8004408:	42ac      	cmp	r4, r5
 800440a:	d101      	bne.n	8004410 <__sfputs_r+0x12>
 800440c:	2000      	movs	r0, #0
 800440e:	e007      	b.n	8004420 <__sfputs_r+0x22>
 8004410:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004414:	463a      	mov	r2, r7
 8004416:	4630      	mov	r0, r6
 8004418:	f7ff ffda 	bl	80043d0 <__sfputc_r>
 800441c:	1c43      	adds	r3, r0, #1
 800441e:	d1f3      	bne.n	8004408 <__sfputs_r+0xa>
 8004420:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004424 <_vfiprintf_r>:
 8004424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004428:	460d      	mov	r5, r1
 800442a:	b09d      	sub	sp, #116	; 0x74
 800442c:	4614      	mov	r4, r2
 800442e:	4698      	mov	r8, r3
 8004430:	4606      	mov	r6, r0
 8004432:	b118      	cbz	r0, 800443c <_vfiprintf_r+0x18>
 8004434:	6983      	ldr	r3, [r0, #24]
 8004436:	b90b      	cbnz	r3, 800443c <_vfiprintf_r+0x18>
 8004438:	f7ff fde4 	bl	8004004 <__sinit>
 800443c:	4b89      	ldr	r3, [pc, #548]	; (8004664 <_vfiprintf_r+0x240>)
 800443e:	429d      	cmp	r5, r3
 8004440:	d11b      	bne.n	800447a <_vfiprintf_r+0x56>
 8004442:	6875      	ldr	r5, [r6, #4]
 8004444:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004446:	07d9      	lsls	r1, r3, #31
 8004448:	d405      	bmi.n	8004456 <_vfiprintf_r+0x32>
 800444a:	89ab      	ldrh	r3, [r5, #12]
 800444c:	059a      	lsls	r2, r3, #22
 800444e:	d402      	bmi.n	8004456 <_vfiprintf_r+0x32>
 8004450:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004452:	f7ff fe75 	bl	8004140 <__retarget_lock_acquire_recursive>
 8004456:	89ab      	ldrh	r3, [r5, #12]
 8004458:	071b      	lsls	r3, r3, #28
 800445a:	d501      	bpl.n	8004460 <_vfiprintf_r+0x3c>
 800445c:	692b      	ldr	r3, [r5, #16]
 800445e:	b9eb      	cbnz	r3, 800449c <_vfiprintf_r+0x78>
 8004460:	4629      	mov	r1, r5
 8004462:	4630      	mov	r0, r6
 8004464:	f7ff fc46 	bl	8003cf4 <__swsetup_r>
 8004468:	b1c0      	cbz	r0, 800449c <_vfiprintf_r+0x78>
 800446a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800446c:	07dc      	lsls	r4, r3, #31
 800446e:	d50e      	bpl.n	800448e <_vfiprintf_r+0x6a>
 8004470:	f04f 30ff 	mov.w	r0, #4294967295
 8004474:	b01d      	add	sp, #116	; 0x74
 8004476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800447a:	4b7b      	ldr	r3, [pc, #492]	; (8004668 <_vfiprintf_r+0x244>)
 800447c:	429d      	cmp	r5, r3
 800447e:	d101      	bne.n	8004484 <_vfiprintf_r+0x60>
 8004480:	68b5      	ldr	r5, [r6, #8]
 8004482:	e7df      	b.n	8004444 <_vfiprintf_r+0x20>
 8004484:	4b79      	ldr	r3, [pc, #484]	; (800466c <_vfiprintf_r+0x248>)
 8004486:	429d      	cmp	r5, r3
 8004488:	bf08      	it	eq
 800448a:	68f5      	ldreq	r5, [r6, #12]
 800448c:	e7da      	b.n	8004444 <_vfiprintf_r+0x20>
 800448e:	89ab      	ldrh	r3, [r5, #12]
 8004490:	0598      	lsls	r0, r3, #22
 8004492:	d4ed      	bmi.n	8004470 <_vfiprintf_r+0x4c>
 8004494:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004496:	f7ff fe54 	bl	8004142 <__retarget_lock_release_recursive>
 800449a:	e7e9      	b.n	8004470 <_vfiprintf_r+0x4c>
 800449c:	2300      	movs	r3, #0
 800449e:	9309      	str	r3, [sp, #36]	; 0x24
 80044a0:	2320      	movs	r3, #32
 80044a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80044a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80044aa:	2330      	movs	r3, #48	; 0x30
 80044ac:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004670 <_vfiprintf_r+0x24c>
 80044b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80044b4:	f04f 0901 	mov.w	r9, #1
 80044b8:	4623      	mov	r3, r4
 80044ba:	469a      	mov	sl, r3
 80044bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80044c0:	b10a      	cbz	r2, 80044c6 <_vfiprintf_r+0xa2>
 80044c2:	2a25      	cmp	r2, #37	; 0x25
 80044c4:	d1f9      	bne.n	80044ba <_vfiprintf_r+0x96>
 80044c6:	ebba 0b04 	subs.w	fp, sl, r4
 80044ca:	d00b      	beq.n	80044e4 <_vfiprintf_r+0xc0>
 80044cc:	465b      	mov	r3, fp
 80044ce:	4622      	mov	r2, r4
 80044d0:	4629      	mov	r1, r5
 80044d2:	4630      	mov	r0, r6
 80044d4:	f7ff ff93 	bl	80043fe <__sfputs_r>
 80044d8:	3001      	adds	r0, #1
 80044da:	f000 80aa 	beq.w	8004632 <_vfiprintf_r+0x20e>
 80044de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80044e0:	445a      	add	r2, fp
 80044e2:	9209      	str	r2, [sp, #36]	; 0x24
 80044e4:	f89a 3000 	ldrb.w	r3, [sl]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	f000 80a2 	beq.w	8004632 <_vfiprintf_r+0x20e>
 80044ee:	2300      	movs	r3, #0
 80044f0:	f04f 32ff 	mov.w	r2, #4294967295
 80044f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80044f8:	f10a 0a01 	add.w	sl, sl, #1
 80044fc:	9304      	str	r3, [sp, #16]
 80044fe:	9307      	str	r3, [sp, #28]
 8004500:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004504:	931a      	str	r3, [sp, #104]	; 0x68
 8004506:	4654      	mov	r4, sl
 8004508:	2205      	movs	r2, #5
 800450a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800450e:	4858      	ldr	r0, [pc, #352]	; (8004670 <_vfiprintf_r+0x24c>)
 8004510:	f7fb fe66 	bl	80001e0 <memchr>
 8004514:	9a04      	ldr	r2, [sp, #16]
 8004516:	b9d8      	cbnz	r0, 8004550 <_vfiprintf_r+0x12c>
 8004518:	06d1      	lsls	r1, r2, #27
 800451a:	bf44      	itt	mi
 800451c:	2320      	movmi	r3, #32
 800451e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004522:	0713      	lsls	r3, r2, #28
 8004524:	bf44      	itt	mi
 8004526:	232b      	movmi	r3, #43	; 0x2b
 8004528:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800452c:	f89a 3000 	ldrb.w	r3, [sl]
 8004530:	2b2a      	cmp	r3, #42	; 0x2a
 8004532:	d015      	beq.n	8004560 <_vfiprintf_r+0x13c>
 8004534:	9a07      	ldr	r2, [sp, #28]
 8004536:	4654      	mov	r4, sl
 8004538:	2000      	movs	r0, #0
 800453a:	f04f 0c0a 	mov.w	ip, #10
 800453e:	4621      	mov	r1, r4
 8004540:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004544:	3b30      	subs	r3, #48	; 0x30
 8004546:	2b09      	cmp	r3, #9
 8004548:	d94e      	bls.n	80045e8 <_vfiprintf_r+0x1c4>
 800454a:	b1b0      	cbz	r0, 800457a <_vfiprintf_r+0x156>
 800454c:	9207      	str	r2, [sp, #28]
 800454e:	e014      	b.n	800457a <_vfiprintf_r+0x156>
 8004550:	eba0 0308 	sub.w	r3, r0, r8
 8004554:	fa09 f303 	lsl.w	r3, r9, r3
 8004558:	4313      	orrs	r3, r2
 800455a:	9304      	str	r3, [sp, #16]
 800455c:	46a2      	mov	sl, r4
 800455e:	e7d2      	b.n	8004506 <_vfiprintf_r+0xe2>
 8004560:	9b03      	ldr	r3, [sp, #12]
 8004562:	1d19      	adds	r1, r3, #4
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	9103      	str	r1, [sp, #12]
 8004568:	2b00      	cmp	r3, #0
 800456a:	bfbb      	ittet	lt
 800456c:	425b      	neglt	r3, r3
 800456e:	f042 0202 	orrlt.w	r2, r2, #2
 8004572:	9307      	strge	r3, [sp, #28]
 8004574:	9307      	strlt	r3, [sp, #28]
 8004576:	bfb8      	it	lt
 8004578:	9204      	strlt	r2, [sp, #16]
 800457a:	7823      	ldrb	r3, [r4, #0]
 800457c:	2b2e      	cmp	r3, #46	; 0x2e
 800457e:	d10c      	bne.n	800459a <_vfiprintf_r+0x176>
 8004580:	7863      	ldrb	r3, [r4, #1]
 8004582:	2b2a      	cmp	r3, #42	; 0x2a
 8004584:	d135      	bne.n	80045f2 <_vfiprintf_r+0x1ce>
 8004586:	9b03      	ldr	r3, [sp, #12]
 8004588:	1d1a      	adds	r2, r3, #4
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	9203      	str	r2, [sp, #12]
 800458e:	2b00      	cmp	r3, #0
 8004590:	bfb8      	it	lt
 8004592:	f04f 33ff 	movlt.w	r3, #4294967295
 8004596:	3402      	adds	r4, #2
 8004598:	9305      	str	r3, [sp, #20]
 800459a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004680 <_vfiprintf_r+0x25c>
 800459e:	7821      	ldrb	r1, [r4, #0]
 80045a0:	2203      	movs	r2, #3
 80045a2:	4650      	mov	r0, sl
 80045a4:	f7fb fe1c 	bl	80001e0 <memchr>
 80045a8:	b140      	cbz	r0, 80045bc <_vfiprintf_r+0x198>
 80045aa:	2340      	movs	r3, #64	; 0x40
 80045ac:	eba0 000a 	sub.w	r0, r0, sl
 80045b0:	fa03 f000 	lsl.w	r0, r3, r0
 80045b4:	9b04      	ldr	r3, [sp, #16]
 80045b6:	4303      	orrs	r3, r0
 80045b8:	3401      	adds	r4, #1
 80045ba:	9304      	str	r3, [sp, #16]
 80045bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80045c0:	482c      	ldr	r0, [pc, #176]	; (8004674 <_vfiprintf_r+0x250>)
 80045c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80045c6:	2206      	movs	r2, #6
 80045c8:	f7fb fe0a 	bl	80001e0 <memchr>
 80045cc:	2800      	cmp	r0, #0
 80045ce:	d03f      	beq.n	8004650 <_vfiprintf_r+0x22c>
 80045d0:	4b29      	ldr	r3, [pc, #164]	; (8004678 <_vfiprintf_r+0x254>)
 80045d2:	bb1b      	cbnz	r3, 800461c <_vfiprintf_r+0x1f8>
 80045d4:	9b03      	ldr	r3, [sp, #12]
 80045d6:	3307      	adds	r3, #7
 80045d8:	f023 0307 	bic.w	r3, r3, #7
 80045dc:	3308      	adds	r3, #8
 80045de:	9303      	str	r3, [sp, #12]
 80045e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045e2:	443b      	add	r3, r7
 80045e4:	9309      	str	r3, [sp, #36]	; 0x24
 80045e6:	e767      	b.n	80044b8 <_vfiprintf_r+0x94>
 80045e8:	fb0c 3202 	mla	r2, ip, r2, r3
 80045ec:	460c      	mov	r4, r1
 80045ee:	2001      	movs	r0, #1
 80045f0:	e7a5      	b.n	800453e <_vfiprintf_r+0x11a>
 80045f2:	2300      	movs	r3, #0
 80045f4:	3401      	adds	r4, #1
 80045f6:	9305      	str	r3, [sp, #20]
 80045f8:	4619      	mov	r1, r3
 80045fa:	f04f 0c0a 	mov.w	ip, #10
 80045fe:	4620      	mov	r0, r4
 8004600:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004604:	3a30      	subs	r2, #48	; 0x30
 8004606:	2a09      	cmp	r2, #9
 8004608:	d903      	bls.n	8004612 <_vfiprintf_r+0x1ee>
 800460a:	2b00      	cmp	r3, #0
 800460c:	d0c5      	beq.n	800459a <_vfiprintf_r+0x176>
 800460e:	9105      	str	r1, [sp, #20]
 8004610:	e7c3      	b.n	800459a <_vfiprintf_r+0x176>
 8004612:	fb0c 2101 	mla	r1, ip, r1, r2
 8004616:	4604      	mov	r4, r0
 8004618:	2301      	movs	r3, #1
 800461a:	e7f0      	b.n	80045fe <_vfiprintf_r+0x1da>
 800461c:	ab03      	add	r3, sp, #12
 800461e:	9300      	str	r3, [sp, #0]
 8004620:	462a      	mov	r2, r5
 8004622:	4b16      	ldr	r3, [pc, #88]	; (800467c <_vfiprintf_r+0x258>)
 8004624:	a904      	add	r1, sp, #16
 8004626:	4630      	mov	r0, r6
 8004628:	f3af 8000 	nop.w
 800462c:	4607      	mov	r7, r0
 800462e:	1c78      	adds	r0, r7, #1
 8004630:	d1d6      	bne.n	80045e0 <_vfiprintf_r+0x1bc>
 8004632:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004634:	07d9      	lsls	r1, r3, #31
 8004636:	d405      	bmi.n	8004644 <_vfiprintf_r+0x220>
 8004638:	89ab      	ldrh	r3, [r5, #12]
 800463a:	059a      	lsls	r2, r3, #22
 800463c:	d402      	bmi.n	8004644 <_vfiprintf_r+0x220>
 800463e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004640:	f7ff fd7f 	bl	8004142 <__retarget_lock_release_recursive>
 8004644:	89ab      	ldrh	r3, [r5, #12]
 8004646:	065b      	lsls	r3, r3, #25
 8004648:	f53f af12 	bmi.w	8004470 <_vfiprintf_r+0x4c>
 800464c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800464e:	e711      	b.n	8004474 <_vfiprintf_r+0x50>
 8004650:	ab03      	add	r3, sp, #12
 8004652:	9300      	str	r3, [sp, #0]
 8004654:	462a      	mov	r2, r5
 8004656:	4b09      	ldr	r3, [pc, #36]	; (800467c <_vfiprintf_r+0x258>)
 8004658:	a904      	add	r1, sp, #16
 800465a:	4630      	mov	r0, r6
 800465c:	f000 f880 	bl	8004760 <_printf_i>
 8004660:	e7e4      	b.n	800462c <_vfiprintf_r+0x208>
 8004662:	bf00      	nop
 8004664:	08004bf8 	.word	0x08004bf8
 8004668:	08004c18 	.word	0x08004c18
 800466c:	08004bd8 	.word	0x08004bd8
 8004670:	08004c38 	.word	0x08004c38
 8004674:	08004c42 	.word	0x08004c42
 8004678:	00000000 	.word	0x00000000
 800467c:	080043ff 	.word	0x080043ff
 8004680:	08004c3e 	.word	0x08004c3e

08004684 <_printf_common>:
 8004684:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004688:	4616      	mov	r6, r2
 800468a:	4699      	mov	r9, r3
 800468c:	688a      	ldr	r2, [r1, #8]
 800468e:	690b      	ldr	r3, [r1, #16]
 8004690:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004694:	4293      	cmp	r3, r2
 8004696:	bfb8      	it	lt
 8004698:	4613      	movlt	r3, r2
 800469a:	6033      	str	r3, [r6, #0]
 800469c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80046a0:	4607      	mov	r7, r0
 80046a2:	460c      	mov	r4, r1
 80046a4:	b10a      	cbz	r2, 80046aa <_printf_common+0x26>
 80046a6:	3301      	adds	r3, #1
 80046a8:	6033      	str	r3, [r6, #0]
 80046aa:	6823      	ldr	r3, [r4, #0]
 80046ac:	0699      	lsls	r1, r3, #26
 80046ae:	bf42      	ittt	mi
 80046b0:	6833      	ldrmi	r3, [r6, #0]
 80046b2:	3302      	addmi	r3, #2
 80046b4:	6033      	strmi	r3, [r6, #0]
 80046b6:	6825      	ldr	r5, [r4, #0]
 80046b8:	f015 0506 	ands.w	r5, r5, #6
 80046bc:	d106      	bne.n	80046cc <_printf_common+0x48>
 80046be:	f104 0a19 	add.w	sl, r4, #25
 80046c2:	68e3      	ldr	r3, [r4, #12]
 80046c4:	6832      	ldr	r2, [r6, #0]
 80046c6:	1a9b      	subs	r3, r3, r2
 80046c8:	42ab      	cmp	r3, r5
 80046ca:	dc26      	bgt.n	800471a <_printf_common+0x96>
 80046cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80046d0:	1e13      	subs	r3, r2, #0
 80046d2:	6822      	ldr	r2, [r4, #0]
 80046d4:	bf18      	it	ne
 80046d6:	2301      	movne	r3, #1
 80046d8:	0692      	lsls	r2, r2, #26
 80046da:	d42b      	bmi.n	8004734 <_printf_common+0xb0>
 80046dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80046e0:	4649      	mov	r1, r9
 80046e2:	4638      	mov	r0, r7
 80046e4:	47c0      	blx	r8
 80046e6:	3001      	adds	r0, #1
 80046e8:	d01e      	beq.n	8004728 <_printf_common+0xa4>
 80046ea:	6823      	ldr	r3, [r4, #0]
 80046ec:	68e5      	ldr	r5, [r4, #12]
 80046ee:	6832      	ldr	r2, [r6, #0]
 80046f0:	f003 0306 	and.w	r3, r3, #6
 80046f4:	2b04      	cmp	r3, #4
 80046f6:	bf08      	it	eq
 80046f8:	1aad      	subeq	r5, r5, r2
 80046fa:	68a3      	ldr	r3, [r4, #8]
 80046fc:	6922      	ldr	r2, [r4, #16]
 80046fe:	bf0c      	ite	eq
 8004700:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004704:	2500      	movne	r5, #0
 8004706:	4293      	cmp	r3, r2
 8004708:	bfc4      	itt	gt
 800470a:	1a9b      	subgt	r3, r3, r2
 800470c:	18ed      	addgt	r5, r5, r3
 800470e:	2600      	movs	r6, #0
 8004710:	341a      	adds	r4, #26
 8004712:	42b5      	cmp	r5, r6
 8004714:	d11a      	bne.n	800474c <_printf_common+0xc8>
 8004716:	2000      	movs	r0, #0
 8004718:	e008      	b.n	800472c <_printf_common+0xa8>
 800471a:	2301      	movs	r3, #1
 800471c:	4652      	mov	r2, sl
 800471e:	4649      	mov	r1, r9
 8004720:	4638      	mov	r0, r7
 8004722:	47c0      	blx	r8
 8004724:	3001      	adds	r0, #1
 8004726:	d103      	bne.n	8004730 <_printf_common+0xac>
 8004728:	f04f 30ff 	mov.w	r0, #4294967295
 800472c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004730:	3501      	adds	r5, #1
 8004732:	e7c6      	b.n	80046c2 <_printf_common+0x3e>
 8004734:	18e1      	adds	r1, r4, r3
 8004736:	1c5a      	adds	r2, r3, #1
 8004738:	2030      	movs	r0, #48	; 0x30
 800473a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800473e:	4422      	add	r2, r4
 8004740:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004744:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004748:	3302      	adds	r3, #2
 800474a:	e7c7      	b.n	80046dc <_printf_common+0x58>
 800474c:	2301      	movs	r3, #1
 800474e:	4622      	mov	r2, r4
 8004750:	4649      	mov	r1, r9
 8004752:	4638      	mov	r0, r7
 8004754:	47c0      	blx	r8
 8004756:	3001      	adds	r0, #1
 8004758:	d0e6      	beq.n	8004728 <_printf_common+0xa4>
 800475a:	3601      	adds	r6, #1
 800475c:	e7d9      	b.n	8004712 <_printf_common+0x8e>
	...

08004760 <_printf_i>:
 8004760:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004764:	7e0f      	ldrb	r7, [r1, #24]
 8004766:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004768:	2f78      	cmp	r7, #120	; 0x78
 800476a:	4691      	mov	r9, r2
 800476c:	4680      	mov	r8, r0
 800476e:	460c      	mov	r4, r1
 8004770:	469a      	mov	sl, r3
 8004772:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004776:	d807      	bhi.n	8004788 <_printf_i+0x28>
 8004778:	2f62      	cmp	r7, #98	; 0x62
 800477a:	d80a      	bhi.n	8004792 <_printf_i+0x32>
 800477c:	2f00      	cmp	r7, #0
 800477e:	f000 80d8 	beq.w	8004932 <_printf_i+0x1d2>
 8004782:	2f58      	cmp	r7, #88	; 0x58
 8004784:	f000 80a3 	beq.w	80048ce <_printf_i+0x16e>
 8004788:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800478c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004790:	e03a      	b.n	8004808 <_printf_i+0xa8>
 8004792:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004796:	2b15      	cmp	r3, #21
 8004798:	d8f6      	bhi.n	8004788 <_printf_i+0x28>
 800479a:	a101      	add	r1, pc, #4	; (adr r1, 80047a0 <_printf_i+0x40>)
 800479c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80047a0:	080047f9 	.word	0x080047f9
 80047a4:	0800480d 	.word	0x0800480d
 80047a8:	08004789 	.word	0x08004789
 80047ac:	08004789 	.word	0x08004789
 80047b0:	08004789 	.word	0x08004789
 80047b4:	08004789 	.word	0x08004789
 80047b8:	0800480d 	.word	0x0800480d
 80047bc:	08004789 	.word	0x08004789
 80047c0:	08004789 	.word	0x08004789
 80047c4:	08004789 	.word	0x08004789
 80047c8:	08004789 	.word	0x08004789
 80047cc:	08004919 	.word	0x08004919
 80047d0:	0800483d 	.word	0x0800483d
 80047d4:	080048fb 	.word	0x080048fb
 80047d8:	08004789 	.word	0x08004789
 80047dc:	08004789 	.word	0x08004789
 80047e0:	0800493b 	.word	0x0800493b
 80047e4:	08004789 	.word	0x08004789
 80047e8:	0800483d 	.word	0x0800483d
 80047ec:	08004789 	.word	0x08004789
 80047f0:	08004789 	.word	0x08004789
 80047f4:	08004903 	.word	0x08004903
 80047f8:	682b      	ldr	r3, [r5, #0]
 80047fa:	1d1a      	adds	r2, r3, #4
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	602a      	str	r2, [r5, #0]
 8004800:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004804:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004808:	2301      	movs	r3, #1
 800480a:	e0a3      	b.n	8004954 <_printf_i+0x1f4>
 800480c:	6820      	ldr	r0, [r4, #0]
 800480e:	6829      	ldr	r1, [r5, #0]
 8004810:	0606      	lsls	r6, r0, #24
 8004812:	f101 0304 	add.w	r3, r1, #4
 8004816:	d50a      	bpl.n	800482e <_printf_i+0xce>
 8004818:	680e      	ldr	r6, [r1, #0]
 800481a:	602b      	str	r3, [r5, #0]
 800481c:	2e00      	cmp	r6, #0
 800481e:	da03      	bge.n	8004828 <_printf_i+0xc8>
 8004820:	232d      	movs	r3, #45	; 0x2d
 8004822:	4276      	negs	r6, r6
 8004824:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004828:	485e      	ldr	r0, [pc, #376]	; (80049a4 <_printf_i+0x244>)
 800482a:	230a      	movs	r3, #10
 800482c:	e019      	b.n	8004862 <_printf_i+0x102>
 800482e:	680e      	ldr	r6, [r1, #0]
 8004830:	602b      	str	r3, [r5, #0]
 8004832:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004836:	bf18      	it	ne
 8004838:	b236      	sxthne	r6, r6
 800483a:	e7ef      	b.n	800481c <_printf_i+0xbc>
 800483c:	682b      	ldr	r3, [r5, #0]
 800483e:	6820      	ldr	r0, [r4, #0]
 8004840:	1d19      	adds	r1, r3, #4
 8004842:	6029      	str	r1, [r5, #0]
 8004844:	0601      	lsls	r1, r0, #24
 8004846:	d501      	bpl.n	800484c <_printf_i+0xec>
 8004848:	681e      	ldr	r6, [r3, #0]
 800484a:	e002      	b.n	8004852 <_printf_i+0xf2>
 800484c:	0646      	lsls	r6, r0, #25
 800484e:	d5fb      	bpl.n	8004848 <_printf_i+0xe8>
 8004850:	881e      	ldrh	r6, [r3, #0]
 8004852:	4854      	ldr	r0, [pc, #336]	; (80049a4 <_printf_i+0x244>)
 8004854:	2f6f      	cmp	r7, #111	; 0x6f
 8004856:	bf0c      	ite	eq
 8004858:	2308      	moveq	r3, #8
 800485a:	230a      	movne	r3, #10
 800485c:	2100      	movs	r1, #0
 800485e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004862:	6865      	ldr	r5, [r4, #4]
 8004864:	60a5      	str	r5, [r4, #8]
 8004866:	2d00      	cmp	r5, #0
 8004868:	bfa2      	ittt	ge
 800486a:	6821      	ldrge	r1, [r4, #0]
 800486c:	f021 0104 	bicge.w	r1, r1, #4
 8004870:	6021      	strge	r1, [r4, #0]
 8004872:	b90e      	cbnz	r6, 8004878 <_printf_i+0x118>
 8004874:	2d00      	cmp	r5, #0
 8004876:	d04d      	beq.n	8004914 <_printf_i+0x1b4>
 8004878:	4615      	mov	r5, r2
 800487a:	fbb6 f1f3 	udiv	r1, r6, r3
 800487e:	fb03 6711 	mls	r7, r3, r1, r6
 8004882:	5dc7      	ldrb	r7, [r0, r7]
 8004884:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004888:	4637      	mov	r7, r6
 800488a:	42bb      	cmp	r3, r7
 800488c:	460e      	mov	r6, r1
 800488e:	d9f4      	bls.n	800487a <_printf_i+0x11a>
 8004890:	2b08      	cmp	r3, #8
 8004892:	d10b      	bne.n	80048ac <_printf_i+0x14c>
 8004894:	6823      	ldr	r3, [r4, #0]
 8004896:	07de      	lsls	r6, r3, #31
 8004898:	d508      	bpl.n	80048ac <_printf_i+0x14c>
 800489a:	6923      	ldr	r3, [r4, #16]
 800489c:	6861      	ldr	r1, [r4, #4]
 800489e:	4299      	cmp	r1, r3
 80048a0:	bfde      	ittt	le
 80048a2:	2330      	movle	r3, #48	; 0x30
 80048a4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80048a8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80048ac:	1b52      	subs	r2, r2, r5
 80048ae:	6122      	str	r2, [r4, #16]
 80048b0:	f8cd a000 	str.w	sl, [sp]
 80048b4:	464b      	mov	r3, r9
 80048b6:	aa03      	add	r2, sp, #12
 80048b8:	4621      	mov	r1, r4
 80048ba:	4640      	mov	r0, r8
 80048bc:	f7ff fee2 	bl	8004684 <_printf_common>
 80048c0:	3001      	adds	r0, #1
 80048c2:	d14c      	bne.n	800495e <_printf_i+0x1fe>
 80048c4:	f04f 30ff 	mov.w	r0, #4294967295
 80048c8:	b004      	add	sp, #16
 80048ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048ce:	4835      	ldr	r0, [pc, #212]	; (80049a4 <_printf_i+0x244>)
 80048d0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80048d4:	6829      	ldr	r1, [r5, #0]
 80048d6:	6823      	ldr	r3, [r4, #0]
 80048d8:	f851 6b04 	ldr.w	r6, [r1], #4
 80048dc:	6029      	str	r1, [r5, #0]
 80048de:	061d      	lsls	r5, r3, #24
 80048e0:	d514      	bpl.n	800490c <_printf_i+0x1ac>
 80048e2:	07df      	lsls	r7, r3, #31
 80048e4:	bf44      	itt	mi
 80048e6:	f043 0320 	orrmi.w	r3, r3, #32
 80048ea:	6023      	strmi	r3, [r4, #0]
 80048ec:	b91e      	cbnz	r6, 80048f6 <_printf_i+0x196>
 80048ee:	6823      	ldr	r3, [r4, #0]
 80048f0:	f023 0320 	bic.w	r3, r3, #32
 80048f4:	6023      	str	r3, [r4, #0]
 80048f6:	2310      	movs	r3, #16
 80048f8:	e7b0      	b.n	800485c <_printf_i+0xfc>
 80048fa:	6823      	ldr	r3, [r4, #0]
 80048fc:	f043 0320 	orr.w	r3, r3, #32
 8004900:	6023      	str	r3, [r4, #0]
 8004902:	2378      	movs	r3, #120	; 0x78
 8004904:	4828      	ldr	r0, [pc, #160]	; (80049a8 <_printf_i+0x248>)
 8004906:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800490a:	e7e3      	b.n	80048d4 <_printf_i+0x174>
 800490c:	0659      	lsls	r1, r3, #25
 800490e:	bf48      	it	mi
 8004910:	b2b6      	uxthmi	r6, r6
 8004912:	e7e6      	b.n	80048e2 <_printf_i+0x182>
 8004914:	4615      	mov	r5, r2
 8004916:	e7bb      	b.n	8004890 <_printf_i+0x130>
 8004918:	682b      	ldr	r3, [r5, #0]
 800491a:	6826      	ldr	r6, [r4, #0]
 800491c:	6961      	ldr	r1, [r4, #20]
 800491e:	1d18      	adds	r0, r3, #4
 8004920:	6028      	str	r0, [r5, #0]
 8004922:	0635      	lsls	r5, r6, #24
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	d501      	bpl.n	800492c <_printf_i+0x1cc>
 8004928:	6019      	str	r1, [r3, #0]
 800492a:	e002      	b.n	8004932 <_printf_i+0x1d2>
 800492c:	0670      	lsls	r0, r6, #25
 800492e:	d5fb      	bpl.n	8004928 <_printf_i+0x1c8>
 8004930:	8019      	strh	r1, [r3, #0]
 8004932:	2300      	movs	r3, #0
 8004934:	6123      	str	r3, [r4, #16]
 8004936:	4615      	mov	r5, r2
 8004938:	e7ba      	b.n	80048b0 <_printf_i+0x150>
 800493a:	682b      	ldr	r3, [r5, #0]
 800493c:	1d1a      	adds	r2, r3, #4
 800493e:	602a      	str	r2, [r5, #0]
 8004940:	681d      	ldr	r5, [r3, #0]
 8004942:	6862      	ldr	r2, [r4, #4]
 8004944:	2100      	movs	r1, #0
 8004946:	4628      	mov	r0, r5
 8004948:	f7fb fc4a 	bl	80001e0 <memchr>
 800494c:	b108      	cbz	r0, 8004952 <_printf_i+0x1f2>
 800494e:	1b40      	subs	r0, r0, r5
 8004950:	6060      	str	r0, [r4, #4]
 8004952:	6863      	ldr	r3, [r4, #4]
 8004954:	6123      	str	r3, [r4, #16]
 8004956:	2300      	movs	r3, #0
 8004958:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800495c:	e7a8      	b.n	80048b0 <_printf_i+0x150>
 800495e:	6923      	ldr	r3, [r4, #16]
 8004960:	462a      	mov	r2, r5
 8004962:	4649      	mov	r1, r9
 8004964:	4640      	mov	r0, r8
 8004966:	47d0      	blx	sl
 8004968:	3001      	adds	r0, #1
 800496a:	d0ab      	beq.n	80048c4 <_printf_i+0x164>
 800496c:	6823      	ldr	r3, [r4, #0]
 800496e:	079b      	lsls	r3, r3, #30
 8004970:	d413      	bmi.n	800499a <_printf_i+0x23a>
 8004972:	68e0      	ldr	r0, [r4, #12]
 8004974:	9b03      	ldr	r3, [sp, #12]
 8004976:	4298      	cmp	r0, r3
 8004978:	bfb8      	it	lt
 800497a:	4618      	movlt	r0, r3
 800497c:	e7a4      	b.n	80048c8 <_printf_i+0x168>
 800497e:	2301      	movs	r3, #1
 8004980:	4632      	mov	r2, r6
 8004982:	4649      	mov	r1, r9
 8004984:	4640      	mov	r0, r8
 8004986:	47d0      	blx	sl
 8004988:	3001      	adds	r0, #1
 800498a:	d09b      	beq.n	80048c4 <_printf_i+0x164>
 800498c:	3501      	adds	r5, #1
 800498e:	68e3      	ldr	r3, [r4, #12]
 8004990:	9903      	ldr	r1, [sp, #12]
 8004992:	1a5b      	subs	r3, r3, r1
 8004994:	42ab      	cmp	r3, r5
 8004996:	dcf2      	bgt.n	800497e <_printf_i+0x21e>
 8004998:	e7eb      	b.n	8004972 <_printf_i+0x212>
 800499a:	2500      	movs	r5, #0
 800499c:	f104 0619 	add.w	r6, r4, #25
 80049a0:	e7f5      	b.n	800498e <_printf_i+0x22e>
 80049a2:	bf00      	nop
 80049a4:	08004c49 	.word	0x08004c49
 80049a8:	08004c5a 	.word	0x08004c5a

080049ac <_sbrk_r>:
 80049ac:	b538      	push	{r3, r4, r5, lr}
 80049ae:	4d06      	ldr	r5, [pc, #24]	; (80049c8 <_sbrk_r+0x1c>)
 80049b0:	2300      	movs	r3, #0
 80049b2:	4604      	mov	r4, r0
 80049b4:	4608      	mov	r0, r1
 80049b6:	602b      	str	r3, [r5, #0]
 80049b8:	f7fc f9fe 	bl	8000db8 <_sbrk>
 80049bc:	1c43      	adds	r3, r0, #1
 80049be:	d102      	bne.n	80049c6 <_sbrk_r+0x1a>
 80049c0:	682b      	ldr	r3, [r5, #0]
 80049c2:	b103      	cbz	r3, 80049c6 <_sbrk_r+0x1a>
 80049c4:	6023      	str	r3, [r4, #0]
 80049c6:	bd38      	pop	{r3, r4, r5, pc}
 80049c8:	200001d8 	.word	0x200001d8

080049cc <__sread>:
 80049cc:	b510      	push	{r4, lr}
 80049ce:	460c      	mov	r4, r1
 80049d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049d4:	f000 f8a0 	bl	8004b18 <_read_r>
 80049d8:	2800      	cmp	r0, #0
 80049da:	bfab      	itete	ge
 80049dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80049de:	89a3      	ldrhlt	r3, [r4, #12]
 80049e0:	181b      	addge	r3, r3, r0
 80049e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80049e6:	bfac      	ite	ge
 80049e8:	6563      	strge	r3, [r4, #84]	; 0x54
 80049ea:	81a3      	strhlt	r3, [r4, #12]
 80049ec:	bd10      	pop	{r4, pc}

080049ee <__swrite>:
 80049ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049f2:	461f      	mov	r7, r3
 80049f4:	898b      	ldrh	r3, [r1, #12]
 80049f6:	05db      	lsls	r3, r3, #23
 80049f8:	4605      	mov	r5, r0
 80049fa:	460c      	mov	r4, r1
 80049fc:	4616      	mov	r6, r2
 80049fe:	d505      	bpl.n	8004a0c <__swrite+0x1e>
 8004a00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a04:	2302      	movs	r3, #2
 8004a06:	2200      	movs	r2, #0
 8004a08:	f000 f868 	bl	8004adc <_lseek_r>
 8004a0c:	89a3      	ldrh	r3, [r4, #12]
 8004a0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004a12:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a16:	81a3      	strh	r3, [r4, #12]
 8004a18:	4632      	mov	r2, r6
 8004a1a:	463b      	mov	r3, r7
 8004a1c:	4628      	mov	r0, r5
 8004a1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a22:	f000 b817 	b.w	8004a54 <_write_r>

08004a26 <__sseek>:
 8004a26:	b510      	push	{r4, lr}
 8004a28:	460c      	mov	r4, r1
 8004a2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a2e:	f000 f855 	bl	8004adc <_lseek_r>
 8004a32:	1c43      	adds	r3, r0, #1
 8004a34:	89a3      	ldrh	r3, [r4, #12]
 8004a36:	bf15      	itete	ne
 8004a38:	6560      	strne	r0, [r4, #84]	; 0x54
 8004a3a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004a3e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004a42:	81a3      	strheq	r3, [r4, #12]
 8004a44:	bf18      	it	ne
 8004a46:	81a3      	strhne	r3, [r4, #12]
 8004a48:	bd10      	pop	{r4, pc}

08004a4a <__sclose>:
 8004a4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a4e:	f000 b813 	b.w	8004a78 <_close_r>
	...

08004a54 <_write_r>:
 8004a54:	b538      	push	{r3, r4, r5, lr}
 8004a56:	4d07      	ldr	r5, [pc, #28]	; (8004a74 <_write_r+0x20>)
 8004a58:	4604      	mov	r4, r0
 8004a5a:	4608      	mov	r0, r1
 8004a5c:	4611      	mov	r1, r2
 8004a5e:	2200      	movs	r2, #0
 8004a60:	602a      	str	r2, [r5, #0]
 8004a62:	461a      	mov	r2, r3
 8004a64:	f7fc f957 	bl	8000d16 <_write>
 8004a68:	1c43      	adds	r3, r0, #1
 8004a6a:	d102      	bne.n	8004a72 <_write_r+0x1e>
 8004a6c:	682b      	ldr	r3, [r5, #0]
 8004a6e:	b103      	cbz	r3, 8004a72 <_write_r+0x1e>
 8004a70:	6023      	str	r3, [r4, #0]
 8004a72:	bd38      	pop	{r3, r4, r5, pc}
 8004a74:	200001d8 	.word	0x200001d8

08004a78 <_close_r>:
 8004a78:	b538      	push	{r3, r4, r5, lr}
 8004a7a:	4d06      	ldr	r5, [pc, #24]	; (8004a94 <_close_r+0x1c>)
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	4604      	mov	r4, r0
 8004a80:	4608      	mov	r0, r1
 8004a82:	602b      	str	r3, [r5, #0]
 8004a84:	f7fc f963 	bl	8000d4e <_close>
 8004a88:	1c43      	adds	r3, r0, #1
 8004a8a:	d102      	bne.n	8004a92 <_close_r+0x1a>
 8004a8c:	682b      	ldr	r3, [r5, #0]
 8004a8e:	b103      	cbz	r3, 8004a92 <_close_r+0x1a>
 8004a90:	6023      	str	r3, [r4, #0]
 8004a92:	bd38      	pop	{r3, r4, r5, pc}
 8004a94:	200001d8 	.word	0x200001d8

08004a98 <_fstat_r>:
 8004a98:	b538      	push	{r3, r4, r5, lr}
 8004a9a:	4d07      	ldr	r5, [pc, #28]	; (8004ab8 <_fstat_r+0x20>)
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	4604      	mov	r4, r0
 8004aa0:	4608      	mov	r0, r1
 8004aa2:	4611      	mov	r1, r2
 8004aa4:	602b      	str	r3, [r5, #0]
 8004aa6:	f7fc f95e 	bl	8000d66 <_fstat>
 8004aaa:	1c43      	adds	r3, r0, #1
 8004aac:	d102      	bne.n	8004ab4 <_fstat_r+0x1c>
 8004aae:	682b      	ldr	r3, [r5, #0]
 8004ab0:	b103      	cbz	r3, 8004ab4 <_fstat_r+0x1c>
 8004ab2:	6023      	str	r3, [r4, #0]
 8004ab4:	bd38      	pop	{r3, r4, r5, pc}
 8004ab6:	bf00      	nop
 8004ab8:	200001d8 	.word	0x200001d8

08004abc <_isatty_r>:
 8004abc:	b538      	push	{r3, r4, r5, lr}
 8004abe:	4d06      	ldr	r5, [pc, #24]	; (8004ad8 <_isatty_r+0x1c>)
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	4604      	mov	r4, r0
 8004ac4:	4608      	mov	r0, r1
 8004ac6:	602b      	str	r3, [r5, #0]
 8004ac8:	f7fc f95d 	bl	8000d86 <_isatty>
 8004acc:	1c43      	adds	r3, r0, #1
 8004ace:	d102      	bne.n	8004ad6 <_isatty_r+0x1a>
 8004ad0:	682b      	ldr	r3, [r5, #0]
 8004ad2:	b103      	cbz	r3, 8004ad6 <_isatty_r+0x1a>
 8004ad4:	6023      	str	r3, [r4, #0]
 8004ad6:	bd38      	pop	{r3, r4, r5, pc}
 8004ad8:	200001d8 	.word	0x200001d8

08004adc <_lseek_r>:
 8004adc:	b538      	push	{r3, r4, r5, lr}
 8004ade:	4d07      	ldr	r5, [pc, #28]	; (8004afc <_lseek_r+0x20>)
 8004ae0:	4604      	mov	r4, r0
 8004ae2:	4608      	mov	r0, r1
 8004ae4:	4611      	mov	r1, r2
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	602a      	str	r2, [r5, #0]
 8004aea:	461a      	mov	r2, r3
 8004aec:	f7fc f956 	bl	8000d9c <_lseek>
 8004af0:	1c43      	adds	r3, r0, #1
 8004af2:	d102      	bne.n	8004afa <_lseek_r+0x1e>
 8004af4:	682b      	ldr	r3, [r5, #0]
 8004af6:	b103      	cbz	r3, 8004afa <_lseek_r+0x1e>
 8004af8:	6023      	str	r3, [r4, #0]
 8004afa:	bd38      	pop	{r3, r4, r5, pc}
 8004afc:	200001d8 	.word	0x200001d8

08004b00 <__malloc_lock>:
 8004b00:	4801      	ldr	r0, [pc, #4]	; (8004b08 <__malloc_lock+0x8>)
 8004b02:	f7ff bb1d 	b.w	8004140 <__retarget_lock_acquire_recursive>
 8004b06:	bf00      	nop
 8004b08:	200001cc 	.word	0x200001cc

08004b0c <__malloc_unlock>:
 8004b0c:	4801      	ldr	r0, [pc, #4]	; (8004b14 <__malloc_unlock+0x8>)
 8004b0e:	f7ff bb18 	b.w	8004142 <__retarget_lock_release_recursive>
 8004b12:	bf00      	nop
 8004b14:	200001cc 	.word	0x200001cc

08004b18 <_read_r>:
 8004b18:	b538      	push	{r3, r4, r5, lr}
 8004b1a:	4d07      	ldr	r5, [pc, #28]	; (8004b38 <_read_r+0x20>)
 8004b1c:	4604      	mov	r4, r0
 8004b1e:	4608      	mov	r0, r1
 8004b20:	4611      	mov	r1, r2
 8004b22:	2200      	movs	r2, #0
 8004b24:	602a      	str	r2, [r5, #0]
 8004b26:	461a      	mov	r2, r3
 8004b28:	f7fc f8d8 	bl	8000cdc <_read>
 8004b2c:	1c43      	adds	r3, r0, #1
 8004b2e:	d102      	bne.n	8004b36 <_read_r+0x1e>
 8004b30:	682b      	ldr	r3, [r5, #0]
 8004b32:	b103      	cbz	r3, 8004b36 <_read_r+0x1e>
 8004b34:	6023      	str	r3, [r4, #0]
 8004b36:	bd38      	pop	{r3, r4, r5, pc}
 8004b38:	200001d8 	.word	0x200001d8

08004b3c <_init>:
 8004b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b3e:	bf00      	nop
 8004b40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b42:	bc08      	pop	{r3}
 8004b44:	469e      	mov	lr, r3
 8004b46:	4770      	bx	lr

08004b48 <_fini>:
 8004b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b4a:	bf00      	nop
 8004b4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b4e:	bc08      	pop	{r3}
 8004b50:	469e      	mov	lr, r3
 8004b52:	4770      	bx	lr
